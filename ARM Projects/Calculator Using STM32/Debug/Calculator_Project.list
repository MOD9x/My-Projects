
Calculator_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001948  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001a54  08001a54  00002a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a78  08001a78  0000303c  2**0
                  CONTENTS
  4 .ARM          00000008  08001a78  08001a78  00002a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001a80  08001a80  0000303c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a80  08001a80  00002a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001a84  08001a84  00002a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000003c  20000000  08001a88  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000003c  08001ac4  0000303c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08001ac4  0000305c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002ef4  00000000  00000000  00003065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000112b  00000000  00000000  00005f59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000438  00000000  00000000  00007088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000302  00000000  00000000  000074c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000159a4  00000000  00000000  000077c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005994  00000000  00000000  0001d166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079d82  00000000  00000000  00022afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009c87c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ecc  00000000  00000000  0009c8c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0009d78c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000003c 	.word	0x2000003c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001a3c 	.word	0x08001a3c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000040 	.word	0x20000040
 8000148:	08001a3c 	.word	0x08001a3c

0800014c <__aeabi_ldivmod>:
 800014c:	b97b      	cbnz	r3, 800016e <__aeabi_ldivmod+0x22>
 800014e:	b972      	cbnz	r2, 800016e <__aeabi_ldivmod+0x22>
 8000150:	2900      	cmp	r1, #0
 8000152:	bfbe      	ittt	lt
 8000154:	2000      	movlt	r0, #0
 8000156:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800015a:	e006      	blt.n	800016a <__aeabi_ldivmod+0x1e>
 800015c:	bf08      	it	eq
 800015e:	2800      	cmpeq	r0, #0
 8000160:	bf1c      	itt	ne
 8000162:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000166:	f04f 30ff 	movne.w	r0, #4294967295
 800016a:	f000 b99b 	b.w	80004a4 <__aeabi_idiv0>
 800016e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000172:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000176:	2900      	cmp	r1, #0
 8000178:	db09      	blt.n	800018e <__aeabi_ldivmod+0x42>
 800017a:	2b00      	cmp	r3, #0
 800017c:	db1a      	blt.n	80001b4 <__aeabi_ldivmod+0x68>
 800017e:	f000 f835 	bl	80001ec <__udivmoddi4>
 8000182:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000186:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800018a:	b004      	add	sp, #16
 800018c:	4770      	bx	lr
 800018e:	4240      	negs	r0, r0
 8000190:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000194:	2b00      	cmp	r3, #0
 8000196:	db1b      	blt.n	80001d0 <__aeabi_ldivmod+0x84>
 8000198:	f000 f828 	bl	80001ec <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4240      	negs	r0, r0
 80001a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ac:	4252      	negs	r2, r2
 80001ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001b2:	4770      	bx	lr
 80001b4:	4252      	negs	r2, r2
 80001b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ba:	f000 f817 	bl	80001ec <__udivmoddi4>
 80001be:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001c6:	b004      	add	sp, #16
 80001c8:	4240      	negs	r0, r0
 80001ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ce:	4770      	bx	lr
 80001d0:	4252      	negs	r2, r2
 80001d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001d6:	f000 f809 	bl	80001ec <__udivmoddi4>
 80001da:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001e2:	b004      	add	sp, #16
 80001e4:	4252      	negs	r2, r2
 80001e6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ea:	4770      	bx	lr

080001ec <__udivmoddi4>:
 80001ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f0:	9d08      	ldr	r5, [sp, #32]
 80001f2:	460c      	mov	r4, r1
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d14e      	bne.n	8000296 <__udivmoddi4+0xaa>
 80001f8:	4694      	mov	ip, r2
 80001fa:	458c      	cmp	ip, r1
 80001fc:	4686      	mov	lr, r0
 80001fe:	fab2 f282 	clz	r2, r2
 8000202:	d962      	bls.n	80002ca <__udivmoddi4+0xde>
 8000204:	b14a      	cbz	r2, 800021a <__udivmoddi4+0x2e>
 8000206:	f1c2 0320 	rsb	r3, r2, #32
 800020a:	4091      	lsls	r1, r2
 800020c:	fa20 f303 	lsr.w	r3, r0, r3
 8000210:	fa0c fc02 	lsl.w	ip, ip, r2
 8000214:	4319      	orrs	r1, r3
 8000216:	fa00 fe02 	lsl.w	lr, r0, r2
 800021a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800021e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000222:	fb07 1114 	mls	r1, r7, r4, r1
 8000226:	fa1f f68c 	uxth.w	r6, ip
 800022a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800022e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000232:	fb04 f106 	mul.w	r1, r4, r6
 8000236:	4299      	cmp	r1, r3
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x64>
 800023a:	eb1c 0303 	adds.w	r3, ip, r3
 800023e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000242:	f080 8110 	bcs.w	8000466 <__udivmoddi4+0x27a>
 8000246:	4299      	cmp	r1, r3
 8000248:	f240 810d 	bls.w	8000466 <__udivmoddi4+0x27a>
 800024c:	3c02      	subs	r4, #2
 800024e:	4463      	add	r3, ip
 8000250:	1a59      	subs	r1, r3, r1
 8000252:	fbb1 f0f7 	udiv	r0, r1, r7
 8000256:	fb07 1110 	mls	r1, r7, r0, r1
 800025a:	fb00 f606 	mul.w	r6, r0, r6
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	429e      	cmp	r6, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x94>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000272:	f080 80fa 	bcs.w	800046a <__udivmoddi4+0x27e>
 8000276:	429e      	cmp	r6, r3
 8000278:	f240 80f7 	bls.w	800046a <__udivmoddi4+0x27e>
 800027c:	4463      	add	r3, ip
 800027e:	3802      	subs	r0, #2
 8000280:	2100      	movs	r1, #0
 8000282:	1b9b      	subs	r3, r3, r6
 8000284:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000288:	b11d      	cbz	r5, 8000292 <__udivmoddi4+0xa6>
 800028a:	40d3      	lsrs	r3, r2
 800028c:	2200      	movs	r2, #0
 800028e:	e9c5 3200 	strd	r3, r2, [r5]
 8000292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000296:	428b      	cmp	r3, r1
 8000298:	d905      	bls.n	80002a6 <__udivmoddi4+0xba>
 800029a:	b10d      	cbz	r5, 80002a0 <__udivmoddi4+0xb4>
 800029c:	e9c5 0100 	strd	r0, r1, [r5]
 80002a0:	2100      	movs	r1, #0
 80002a2:	4608      	mov	r0, r1
 80002a4:	e7f5      	b.n	8000292 <__udivmoddi4+0xa6>
 80002a6:	fab3 f183 	clz	r1, r3
 80002aa:	2900      	cmp	r1, #0
 80002ac:	d146      	bne.n	800033c <__udivmoddi4+0x150>
 80002ae:	42a3      	cmp	r3, r4
 80002b0:	d302      	bcc.n	80002b8 <__udivmoddi4+0xcc>
 80002b2:	4290      	cmp	r0, r2
 80002b4:	f0c0 80ee 	bcc.w	8000494 <__udivmoddi4+0x2a8>
 80002b8:	1a86      	subs	r6, r0, r2
 80002ba:	eb64 0303 	sbc.w	r3, r4, r3
 80002be:	2001      	movs	r0, #1
 80002c0:	2d00      	cmp	r5, #0
 80002c2:	d0e6      	beq.n	8000292 <__udivmoddi4+0xa6>
 80002c4:	e9c5 6300 	strd	r6, r3, [r5]
 80002c8:	e7e3      	b.n	8000292 <__udivmoddi4+0xa6>
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	f040 808f 	bne.w	80003ee <__udivmoddi4+0x202>
 80002d0:	eba1 040c 	sub.w	r4, r1, ip
 80002d4:	2101      	movs	r1, #1
 80002d6:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fbb4 f6f8 	udiv	r6, r4, r8
 80002e2:	fb08 4416 	mls	r4, r8, r6, r4
 80002e6:	fb07 f006 	mul.w	r0, r7, r6
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002f2:	4298      	cmp	r0, r3
 80002f4:	d908      	bls.n	8000308 <__udivmoddi4+0x11c>
 80002f6:	eb1c 0303 	adds.w	r3, ip, r3
 80002fa:	f106 34ff 	add.w	r4, r6, #4294967295
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x11a>
 8000300:	4298      	cmp	r0, r3
 8000302:	f200 80cb 	bhi.w	800049c <__udivmoddi4+0x2b0>
 8000306:	4626      	mov	r6, r4
 8000308:	1a1c      	subs	r4, r3, r0
 800030a:	fbb4 f0f8 	udiv	r0, r4, r8
 800030e:	fb08 4410 	mls	r4, r8, r0, r4
 8000312:	fb00 f707 	mul.w	r7, r0, r7
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	429f      	cmp	r7, r3
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x148>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f100 34ff 	add.w	r4, r0, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x146>
 800032c:	429f      	cmp	r7, r3
 800032e:	f200 80ae 	bhi.w	800048e <__udivmoddi4+0x2a2>
 8000332:	4620      	mov	r0, r4
 8000334:	1bdb      	subs	r3, r3, r7
 8000336:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800033a:	e7a5      	b.n	8000288 <__udivmoddi4+0x9c>
 800033c:	f1c1 0720 	rsb	r7, r1, #32
 8000340:	408b      	lsls	r3, r1
 8000342:	fa22 fc07 	lsr.w	ip, r2, r7
 8000346:	ea4c 0c03 	orr.w	ip, ip, r3
 800034a:	fa24 f607 	lsr.w	r6, r4, r7
 800034e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000352:	fbb6 f8f9 	udiv	r8, r6, r9
 8000356:	fa1f fe8c 	uxth.w	lr, ip
 800035a:	fb09 6618 	mls	r6, r9, r8, r6
 800035e:	fa20 f307 	lsr.w	r3, r0, r7
 8000362:	408c      	lsls	r4, r1
 8000364:	fa00 fa01 	lsl.w	sl, r0, r1
 8000368:	fb08 f00e 	mul.w	r0, r8, lr
 800036c:	431c      	orrs	r4, r3
 800036e:	0c23      	lsrs	r3, r4, #16
 8000370:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000374:	4298      	cmp	r0, r3
 8000376:	fa02 f201 	lsl.w	r2, r2, r1
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x1a6>
 800037c:	eb1c 0303 	adds.w	r3, ip, r3
 8000380:	f108 36ff 	add.w	r6, r8, #4294967295
 8000384:	f080 8081 	bcs.w	800048a <__udivmoddi4+0x29e>
 8000388:	4298      	cmp	r0, r3
 800038a:	d97e      	bls.n	800048a <__udivmoddi4+0x29e>
 800038c:	f1a8 0802 	sub.w	r8, r8, #2
 8000390:	4463      	add	r3, ip
 8000392:	1a1e      	subs	r6, r3, r0
 8000394:	fbb6 f3f9 	udiv	r3, r6, r9
 8000398:	fb09 6613 	mls	r6, r9, r3, r6
 800039c:	fb03 fe0e 	mul.w	lr, r3, lr
 80003a0:	b2a4      	uxth	r4, r4
 80003a2:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x1d0>
 80003aa:	eb1c 0404 	adds.w	r4, ip, r4
 80003ae:	f103 30ff 	add.w	r0, r3, #4294967295
 80003b2:	d266      	bcs.n	8000482 <__udivmoddi4+0x296>
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d964      	bls.n	8000482 <__udivmoddi4+0x296>
 80003b8:	3b02      	subs	r3, #2
 80003ba:	4464      	add	r4, ip
 80003bc:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003c0:	fba0 8302 	umull	r8, r3, r0, r2
 80003c4:	eba4 040e 	sub.w	r4, r4, lr
 80003c8:	429c      	cmp	r4, r3
 80003ca:	46c6      	mov	lr, r8
 80003cc:	461e      	mov	r6, r3
 80003ce:	d350      	bcc.n	8000472 <__udivmoddi4+0x286>
 80003d0:	d04d      	beq.n	800046e <__udivmoddi4+0x282>
 80003d2:	b155      	cbz	r5, 80003ea <__udivmoddi4+0x1fe>
 80003d4:	ebba 030e 	subs.w	r3, sl, lr
 80003d8:	eb64 0406 	sbc.w	r4, r4, r6
 80003dc:	fa04 f707 	lsl.w	r7, r4, r7
 80003e0:	40cb      	lsrs	r3, r1
 80003e2:	431f      	orrs	r7, r3
 80003e4:	40cc      	lsrs	r4, r1
 80003e6:	e9c5 7400 	strd	r7, r4, [r5]
 80003ea:	2100      	movs	r1, #0
 80003ec:	e751      	b.n	8000292 <__udivmoddi4+0xa6>
 80003ee:	fa0c fc02 	lsl.w	ip, ip, r2
 80003f2:	f1c2 0320 	rsb	r3, r2, #32
 80003f6:	40d9      	lsrs	r1, r3
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa20 f303 	lsr.w	r3, r0, r3
 8000400:	fa00 fe02 	lsl.w	lr, r0, r2
 8000404:	fbb1 f0f8 	udiv	r0, r1, r8
 8000408:	fb08 1110 	mls	r1, r8, r0, r1
 800040c:	4094      	lsls	r4, r2
 800040e:	431c      	orrs	r4, r3
 8000410:	fa1f f78c 	uxth.w	r7, ip
 8000414:	0c23      	lsrs	r3, r4, #16
 8000416:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041a:	fb00 f107 	mul.w	r1, r0, r7
 800041e:	4299      	cmp	r1, r3
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x248>
 8000422:	eb1c 0303 	adds.w	r3, ip, r3
 8000426:	f100 36ff 	add.w	r6, r0, #4294967295
 800042a:	d22c      	bcs.n	8000486 <__udivmoddi4+0x29a>
 800042c:	4299      	cmp	r1, r3
 800042e:	d92a      	bls.n	8000486 <__udivmoddi4+0x29a>
 8000430:	3802      	subs	r0, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	fbb3 f1f8 	udiv	r1, r3, r8
 800043a:	fb08 3311 	mls	r3, r8, r1, r3
 800043e:	b2a4      	uxth	r4, r4
 8000440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000444:	fb01 f307 	mul.w	r3, r1, r7
 8000448:	42a3      	cmp	r3, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x272>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f101 36ff 	add.w	r6, r1, #4294967295
 8000454:	d213      	bcs.n	800047e <__udivmoddi4+0x292>
 8000456:	42a3      	cmp	r3, r4
 8000458:	d911      	bls.n	800047e <__udivmoddi4+0x292>
 800045a:	3902      	subs	r1, #2
 800045c:	4464      	add	r4, ip
 800045e:	1ae4      	subs	r4, r4, r3
 8000460:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000464:	e73b      	b.n	80002de <__udivmoddi4+0xf2>
 8000466:	4604      	mov	r4, r0
 8000468:	e6f2      	b.n	8000250 <__udivmoddi4+0x64>
 800046a:	4608      	mov	r0, r1
 800046c:	e708      	b.n	8000280 <__udivmoddi4+0x94>
 800046e:	45c2      	cmp	sl, r8
 8000470:	d2af      	bcs.n	80003d2 <__udivmoddi4+0x1e6>
 8000472:	ebb8 0e02 	subs.w	lr, r8, r2
 8000476:	eb63 060c 	sbc.w	r6, r3, ip
 800047a:	3801      	subs	r0, #1
 800047c:	e7a9      	b.n	80003d2 <__udivmoddi4+0x1e6>
 800047e:	4631      	mov	r1, r6
 8000480:	e7ed      	b.n	800045e <__udivmoddi4+0x272>
 8000482:	4603      	mov	r3, r0
 8000484:	e79a      	b.n	80003bc <__udivmoddi4+0x1d0>
 8000486:	4630      	mov	r0, r6
 8000488:	e7d4      	b.n	8000434 <__udivmoddi4+0x248>
 800048a:	46b0      	mov	r8, r6
 800048c:	e781      	b.n	8000392 <__udivmoddi4+0x1a6>
 800048e:	4463      	add	r3, ip
 8000490:	3802      	subs	r0, #2
 8000492:	e74f      	b.n	8000334 <__udivmoddi4+0x148>
 8000494:	4606      	mov	r6, r0
 8000496:	4623      	mov	r3, r4
 8000498:	4608      	mov	r0, r1
 800049a:	e711      	b.n	80002c0 <__udivmoddi4+0xd4>
 800049c:	3e02      	subs	r6, #2
 800049e:	4463      	add	r3, ip
 80004a0:	e732      	b.n	8000308 <__udivmoddi4+0x11c>
 80004a2:	bf00      	nop

080004a4 <__aeabi_idiv0>:
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop

080004a8 <Ketpad_GetKey>:
							  KPAD_ROW_PIN2,
							  KPAD_ROW_PIN3
};

uint8_t Ketpad_GetKey(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
	uint8_t col = 0 ,row = 0 ;
 80004ae:	2300      	movs	r3, #0
 80004b0:	71fb      	strb	r3, [r7, #7]
 80004b2:	2300      	movs	r3, #0
 80004b4:	71bb      	strb	r3, [r7, #6]

	HAL_GPIO_WritePin(KPAD_COL_PORT,KPAD_COL_PIN0,1);
 80004b6:	2201      	movs	r2, #1
 80004b8:	2110      	movs	r1, #16
 80004ba:	4826      	ldr	r0, [pc, #152]	@ (8000554 <Ketpad_GetKey+0xac>)
 80004bc:	f000 fe9b 	bl	80011f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KPAD_COL_PORT,KPAD_COL_PIN1,1);
 80004c0:	2201      	movs	r2, #1
 80004c2:	2120      	movs	r1, #32
 80004c4:	4823      	ldr	r0, [pc, #140]	@ (8000554 <Ketpad_GetKey+0xac>)
 80004c6:	f000 fe96 	bl	80011f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KPAD_COL_PORT,KPAD_COL_PIN2,1);
 80004ca:	2201      	movs	r2, #1
 80004cc:	2140      	movs	r1, #64	@ 0x40
 80004ce:	4821      	ldr	r0, [pc, #132]	@ (8000554 <Ketpad_GetKey+0xac>)
 80004d0:	f000 fe91 	bl	80011f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KPAD_COL_PORT,KPAD_COL_PIN3,1);
 80004d4:	2201      	movs	r2, #1
 80004d6:	2180      	movs	r1, #128	@ 0x80
 80004d8:	481e      	ldr	r0, [pc, #120]	@ (8000554 <Ketpad_GetKey+0xac>)
 80004da:	f000 fe8c 	bl	80011f6 <HAL_GPIO_WritePin>

	while(1)
	{
		for(col=0;col<KEYPAD_COL;col++)
 80004de:	2300      	movs	r3, #0
 80004e0:	71fb      	strb	r3, [r7, #7]
 80004e2:	e02f      	b.n	8000544 <Ketpad_GetKey+0x9c>
		{
			// for set col 0-3 low
			HAL_GPIO_WritePin(KPAD_COL_PORT, cols[col],0);
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	4a1c      	ldr	r2, [pc, #112]	@ (8000558 <Ketpad_GetKey+0xb0>)
 80004e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004ec:	2200      	movs	r2, #0
 80004ee:	4619      	mov	r1, r3
 80004f0:	4818      	ldr	r0, [pc, #96]	@ (8000554 <Ketpad_GetKey+0xac>)
 80004f2:	f000 fe80 	bl	80011f6 <HAL_GPIO_WritePin>
			for(row=0;row<KEYPAD_ROW;row++)
 80004f6:	2300      	movs	r3, #0
 80004f8:	71bb      	strb	r3, [r7, #6]
 80004fa:	e014      	b.n	8000526 <Ketpad_GetKey+0x7e>
			{
					//for read row 0-3
				if(!(HAL_GPIO_ReadPin(KPAD_ROW_PORT,rows[row] )) )
 80004fc:	79bb      	ldrb	r3, [r7, #6]
 80004fe:	4a17      	ldr	r2, [pc, #92]	@ (800055c <Ketpad_GetKey+0xb4>)
 8000500:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000504:	4619      	mov	r1, r3
 8000506:	4813      	ldr	r0, [pc, #76]	@ (8000554 <Ketpad_GetKey+0xac>)
 8000508:	f000 fe5e 	bl	80011c8 <HAL_GPIO_ReadPin>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d106      	bne.n	8000520 <Ketpad_GetKey+0x78>
				{
					return Keys[( col + (4*row) )];
 8000512:	79fa      	ldrb	r2, [r7, #7]
 8000514:	79bb      	ldrb	r3, [r7, #6]
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	4413      	add	r3, r2
 800051a:	4a11      	ldr	r2, [pc, #68]	@ (8000560 <Ketpad_GetKey+0xb8>)
 800051c:	5cd3      	ldrb	r3, [r2, r3]
 800051e:	e015      	b.n	800054c <Ketpad_GetKey+0xa4>
			for(row=0;row<KEYPAD_ROW;row++)
 8000520:	79bb      	ldrb	r3, [r7, #6]
 8000522:	3301      	adds	r3, #1
 8000524:	71bb      	strb	r3, [r7, #6]
 8000526:	79bb      	ldrb	r3, [r7, #6]
 8000528:	2b03      	cmp	r3, #3
 800052a:	d9e7      	bls.n	80004fc <Ketpad_GetKey+0x54>
				}

			}
			HAL_GPIO_WritePin(KPAD_COL_PORT, cols[col],1);
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	4a0a      	ldr	r2, [pc, #40]	@ (8000558 <Ketpad_GetKey+0xb0>)
 8000530:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000534:	2201      	movs	r2, #1
 8000536:	4619      	mov	r1, r3
 8000538:	4806      	ldr	r0, [pc, #24]	@ (8000554 <Ketpad_GetKey+0xac>)
 800053a:	f000 fe5c 	bl	80011f6 <HAL_GPIO_WritePin>
		for(col=0;col<KEYPAD_COL;col++)
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	3301      	adds	r3, #1
 8000542:	71fb      	strb	r3, [r7, #7]
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	2b03      	cmp	r3, #3
 8000548:	d9cc      	bls.n	80004e4 <Ketpad_GetKey+0x3c>
 800054a:	e7c8      	b.n	80004de <Ketpad_GetKey+0x36>
		}
	}
	return 0;

}
 800054c:	4618      	mov	r0, r3
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40010800 	.word	0x40010800
 8000558:	20000010 	.word	0x20000010
 800055c:	20000018 	.word	0x20000018
 8000560:	20000000 	.word	0x20000000

08000564 <LCD_sendData>:
		                 LCD_DATA_D7
};


void LCD_sendData(uint8_t data)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	71fb      	strb	r3, [r7, #7]
	uint8_t i=0;
 800056e:	2300      	movs	r3, #0
 8000570:	73fb      	strb	r3, [r7, #15]

	for(i=0;i<8;i++)
 8000572:	2300      	movs	r3, #0
 8000574:	73fb      	strb	r3, [r7, #15]
 8000576:	e012      	b.n	800059e <LCD_sendData+0x3a>
	{
		HAL_GPIO_WritePin(LCD_DATA_PORT, LCD_data[i] , ( (data>>(i))&0x01  ) );
 8000578:	7bfb      	ldrb	r3, [r7, #15]
 800057a:	4a1e      	ldr	r2, [pc, #120]	@ (80005f4 <LCD_sendData+0x90>)
 800057c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000580:	79fa      	ldrb	r2, [r7, #7]
 8000582:	7bfb      	ldrb	r3, [r7, #15]
 8000584:	fa42 f303 	asr.w	r3, r2, r3
 8000588:	b2db      	uxtb	r3, r3
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	b2db      	uxtb	r3, r3
 8000590:	461a      	mov	r2, r3
 8000592:	4819      	ldr	r0, [pc, #100]	@ (80005f8 <LCD_sendData+0x94>)
 8000594:	f000 fe2f 	bl	80011f6 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	3301      	adds	r3, #1
 800059c:	73fb      	strb	r3, [r7, #15]
 800059e:	7bfb      	ldrb	r3, [r7, #15]
 80005a0:	2b07      	cmp	r3, #7
 80005a2:	d9e9      	bls.n	8000578 <LCD_sendData+0x14>
//	HAL_GPIO_WritePin(LCD_DATA_PORT, LCD_DATA_D5 , ( (data>>5)&0x01  ) );
//	HAL_GPIO_WritePin(LCD_DATA_PORT, LCD_DATA_D6 , ( (data>>6)&0x01  ) );
//	HAL_GPIO_WritePin(LCD_DATA_PORT, LCD_DATA_D7 , ( (data>>7)&0x01  ) );

//	send data
	HAL_Delay(10);
 80005a4:	200a      	movs	r0, #10
 80005a6:	f000 fb8b 	bl	8000cc0 <HAL_Delay>

	HAL_GPIO_WritePin(LCD_RS_PORT, LCD_RS_PIN, 1 );
 80005aa:	2201      	movs	r2, #1
 80005ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005b0:	4811      	ldr	r0, [pc, #68]	@ (80005f8 <LCD_sendData+0x94>)
 80005b2:	f000 fe20 	bl	80011f6 <HAL_GPIO_WritePin>
	//	register selector ( data:high / command:low )

	HAL_GPIO_WritePin(LCD_RW_PORT, LCD_RW_PIN, 0 );
 80005b6:	2200      	movs	r2, #0
 80005b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005bc:	480e      	ldr	r0, [pc, #56]	@ (80005f8 <LCD_sendData+0x94>)
 80005be:	f000 fe1a 	bl	80011f6 <HAL_GPIO_WritePin>
//  R/W ( read : low /write:high )

	HAL_Delay(10);
 80005c2:	200a      	movs	r0, #10
 80005c4:	f000 fb7c 	bl	8000cc0 <HAL_Delay>

	HAL_GPIO_WritePin(LCD_E_PORT, LCD_E_PIN, 1 );
 80005c8:	2201      	movs	r2, #1
 80005ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005ce:	480a      	ldr	r0, [pc, #40]	@ (80005f8 <LCD_sendData+0x94>)
 80005d0:	f000 fe11 	bl	80011f6 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80005d4:	200a      	movs	r0, #10
 80005d6:	f000 fb73 	bl	8000cc0 <HAL_Delay>

	HAL_GPIO_WritePin(LCD_E_PORT, LCD_E_PIN, 0 );
 80005da:	2200      	movs	r2, #0
 80005dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005e0:	4805      	ldr	r0, [pc, #20]	@ (80005f8 <LCD_sendData+0x94>)
 80005e2:	f000 fe08 	bl	80011f6 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80005e6:	200a      	movs	r0, #10
 80005e8:	f000 fb6a 	bl	8000cc0 <HAL_Delay>

//  Enable ( pulse falling edge)

}
 80005ec:	bf00      	nop
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000020 	.word	0x20000020
 80005f8:	40010c00 	.word	0x40010c00

080005fc <LCD_sendinst>:

void LCD_sendinst(uint8_t inst)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
	uint8_t i=0;
 8000606:	2300      	movs	r3, #0
 8000608:	73fb      	strb	r3, [r7, #15]

	for(i=0;i<8;i++)
 800060a:	2300      	movs	r3, #0
 800060c:	73fb      	strb	r3, [r7, #15]
 800060e:	e012      	b.n	8000636 <LCD_sendinst+0x3a>
	{
		HAL_GPIO_WritePin(LCD_DATA_PORT, LCD_data[i] , ( (inst>>(i))&0x01  ) );
 8000610:	7bfb      	ldrb	r3, [r7, #15]
 8000612:	4a1d      	ldr	r2, [pc, #116]	@ (8000688 <LCD_sendinst+0x8c>)
 8000614:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000618:	79fa      	ldrb	r2, [r7, #7]
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	fa42 f303 	asr.w	r3, r2, r3
 8000620:	b2db      	uxtb	r3, r3
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	b2db      	uxtb	r3, r3
 8000628:	461a      	mov	r2, r3
 800062a:	4818      	ldr	r0, [pc, #96]	@ (800068c <LCD_sendinst+0x90>)
 800062c:	f000 fde3 	bl	80011f6 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	3301      	adds	r3, #1
 8000634:	73fb      	strb	r3, [r7, #15]
 8000636:	7bfb      	ldrb	r3, [r7, #15]
 8000638:	2b07      	cmp	r3, #7
 800063a:	d9e9      	bls.n	8000610 <LCD_sendinst+0x14>
//	HAL_GPIO_WritePin(LCD_DATA_PORT, LCD_DATA_D4 , ( (inst>>4)&0x01  ) );
//	HAL_GPIO_WritePin(LCD_DATA_PORT, LCD_DATA_D5 , ( (inst>>5)&0x01  ) );
//	HAL_GPIO_WritePin(LCD_DATA_PORT, LCD_DATA_D6 , ( (inst>>6)&0x01  ) );
//	HAL_GPIO_WritePin(LCD_DATA_PORT, LCD_DATA_D7 , ( (inst>>7)&0x01  ) );
	//	send data
	HAL_Delay(1);
 800063c:	2001      	movs	r0, #1
 800063e:	f000 fb3f 	bl	8000cc0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RS_PORT, LCD_RS_PIN, 0 );
 8000642:	2200      	movs	r2, #0
 8000644:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000648:	4810      	ldr	r0, [pc, #64]	@ (800068c <LCD_sendinst+0x90>)
 800064a:	f000 fdd4 	bl	80011f6 <HAL_GPIO_WritePin>
	//	register selector ( data:high / command:low )
	HAL_Delay(1);
 800064e:	2001      	movs	r0, #1
 8000650:	f000 fb36 	bl	8000cc0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RW_PORT, LCD_RW_PIN, 0 );
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800065a:	480c      	ldr	r0, [pc, #48]	@ (800068c <LCD_sendinst+0x90>)
 800065c:	f000 fdcb 	bl	80011f6 <HAL_GPIO_WritePin>
	//  R/W ( read : high /write:low )
	HAL_Delay(1);
 8000660:	2001      	movs	r0, #1
 8000662:	f000 fb2d 	bl	8000cc0 <HAL_Delay>

	HAL_GPIO_WritePin(LCD_E_PORT, LCD_E_PIN, 1 );
 8000666:	2201      	movs	r2, #1
 8000668:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800066c:	4807      	ldr	r0, [pc, #28]	@ (800068c <LCD_sendinst+0x90>)
 800066e:	f000 fdc2 	bl	80011f6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_E_PORT, LCD_E_PIN, 0 );
 8000672:	2200      	movs	r2, #0
 8000674:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000678:	4804      	ldr	r0, [pc, #16]	@ (800068c <LCD_sendinst+0x90>)
 800067a:	f000 fdbc 	bl	80011f6 <HAL_GPIO_WritePin>
	//  Enable ( pulse falling edge)



}
 800067e:	bf00      	nop
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000020 	.word	0x20000020
 800068c:	40010c00 	.word	0x40010c00

08000690 <LCD_Init>:

void LCD_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	HAL_Delay(40);
 8000694:	2028      	movs	r0, #40	@ 0x28
 8000696:	f000 fb13 	bl	8000cc0 <HAL_Delay>
	// Function Set P.19
	LCD_sendinst(LCD_TWO_LINES_EIGHT_BITS_MODE);
 800069a:	2038      	movs	r0, #56	@ 0x38
 800069c:	f7ff ffae 	bl	80005fc <LCD_sendinst>


	// Display ON/OFF p.18
	LCD_sendinst(LCD_CURSOR_ON_BLINK);
 80006a0:	200f      	movs	r0, #15
 80006a2:	f7ff ffab 	bl	80005fc <LCD_sendinst>

	HAL_Delay(1);
 80006a6:	2001      	movs	r0, #1
 80006a8:	f000 fb0a 	bl	8000cc0 <HAL_Delay>

	// set entry mode p.17
	LCD_sendinst(LCD_CLEAR_COMMAND);
 80006ac:	2001      	movs	r0, #1
 80006ae:	f7ff ffa5 	bl	80005fc <LCD_sendinst>

	HAL_Delay(1);
 80006b2:	2001      	movs	r0, #1
 80006b4:	f000 fb04 	bl	8000cc0 <HAL_Delay>


}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}

080006bc <LCD_sendNumber>:
		LCD_sendData( (*str++) );
	}
}

void LCD_sendNumber(int64_t number)
{
 80006bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80006c0:	b0ac      	sub	sp, #176	@ 0xb0
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t i=0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	uint64_t number_askii[20] ={0} ;
 80006ce:	f107 0308 	add.w	r3, r7, #8
 80006d2:	22a0      	movs	r2, #160	@ 0xa0
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 f984 	bl	80019e4 <memset>

	if(number == 0)
 80006dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80006e0:	4313      	orrs	r3, r2
 80006e2:	d103      	bne.n	80006ec <LCD_sendNumber+0x30>
	{
		LCD_sendData('0');
 80006e4:	2030      	movs	r0, #48	@ 0x30
 80006e6:	f7ff ff3d 	bl	8000564 <LCD_sendData>
 80006ea:	e036      	b.n	800075a <LCD_sendNumber+0x9e>
	}
	else if(number < 0)
 80006ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	da32      	bge.n	800075a <LCD_sendNumber+0x9e>
	{
		LCD_sendData('-');
 80006f4:	202d      	movs	r0, #45	@ 0x2d
 80006f6:	f7ff ff35 	bl	8000564 <LCD_sendData>
		number = number * (-1);
 80006fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80006fe:	2100      	movs	r1, #0
 8000700:	4254      	negs	r4, r2
 8000702:	eb61 0503 	sbc.w	r5, r1, r3
 8000706:	e9c7 4500 	strd	r4, r5, [r7]
	}

	while( number != 0 )
 800070a:	e026      	b.n	800075a <LCD_sendNumber+0x9e>
	{
		i++;
 800070c:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8000710:	3301      	adds	r3, #1
 8000712:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
		number_askii[i] = (number%10 ) +48 ;
 8000716:	e9d7 0100 	ldrd	r0, r1, [r7]
 800071a:	f04f 020a 	mov.w	r2, #10
 800071e:	f04f 0300 	mov.w	r3, #0
 8000722:	f7ff fd13 	bl	800014c <__aeabi_ldivmod>
 8000726:	f112 0830 	adds.w	r8, r2, #48	@ 0x30
 800072a:	f143 0900 	adc.w	r9, r3, #0
 800072e:	f897 10af 	ldrb.w	r1, [r7, #175]	@ 0xaf
 8000732:	4642      	mov	r2, r8
 8000734:	464b      	mov	r3, r9
 8000736:	00c9      	lsls	r1, r1, #3
 8000738:	31b0      	adds	r1, #176	@ 0xb0
 800073a:	4439      	add	r1, r7
 800073c:	39a8      	subs	r1, #168	@ 0xa8
 800073e:	e9c1 2300 	strd	r2, r3, [r1]
		number /=10;
 8000742:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000746:	f04f 020a 	mov.w	r2, #10
 800074a:	f04f 0300 	mov.w	r3, #0
 800074e:	f7ff fcfd 	bl	800014c <__aeabi_ldivmod>
 8000752:	4602      	mov	r2, r0
 8000754:	460b      	mov	r3, r1
 8000756:	e9c7 2300 	strd	r2, r3, [r7]
	while( number != 0 )
 800075a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800075e:	4313      	orrs	r3, r2
 8000760:	d1d4      	bne.n	800070c <LCD_sendNumber+0x50>
	}
	while( i != 0 )
 8000762:	e010      	b.n	8000786 <LCD_sendNumber+0xca>
	{
		LCD_sendData(number_askii[i]);
 8000764:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8000768:	00db      	lsls	r3, r3, #3
 800076a:	33b0      	adds	r3, #176	@ 0xb0
 800076c:	443b      	add	r3, r7
 800076e:	3ba8      	subs	r3, #168	@ 0xa8
 8000770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000774:	b2d3      	uxtb	r3, r2
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff fef4 	bl	8000564 <LCD_sendData>
		i--;
 800077c:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8000780:	3b01      	subs	r3, #1
 8000782:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	while( i != 0 )
 8000786:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 800078a:	2b00      	cmp	r3, #0
 800078c:	d1ea      	bne.n	8000764 <LCD_sendNumber+0xa8>
	}
}
 800078e:	bf00      	nop
 8000790:	bf00      	nop
 8000792:	37b0      	adds	r7, #176	@ 0xb0
 8000794:	46bd      	mov	sp, r7
 8000796:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0800079c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800079c:	b5b0      	push	{r4, r5, r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a2:	f000 fa2b 	bl	8000bfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a6:	f000 f8e7 	bl	8000978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007aa:	f000 f92b 	bl	8000a04 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

	int32_t a=0,b=0,c=0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
	uint8_t	 key=0,switch_flag=0,operation=0,continue_flag=0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	703b      	strb	r3, [r7, #0]
 80007be:	2300      	movs	r3, #0
 80007c0:	70fb      	strb	r3, [r7, #3]
 80007c2:	2300      	movs	r3, #0
 80007c4:	70bb      	strb	r3, [r7, #2]
 80007c6:	2300      	movs	r3, #0
 80007c8:	707b      	strb	r3, [r7, #1]
	LCD_Init();
 80007ca:	f7ff ff61 	bl	8000690 <LCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		key = Ketpad_GetKey();
 80007ce:	f7ff fe6b 	bl	80004a8 <Ketpad_GetKey>
 80007d2:	4603      	mov	r3, r0
 80007d4:	703b      	strb	r3, [r7, #0]
		LCD_sendData(key);
 80007d6:	783b      	ldrb	r3, [r7, #0]
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff fec3 	bl	8000564 <LCD_sendData>

		switch(key)
 80007de:	783b      	ldrb	r3, [r7, #0]
 80007e0:	2b3d      	cmp	r3, #61	@ 0x3d
 80007e2:	dc31      	bgt.n	8000848 <main+0xac>
 80007e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80007e6:	f2c0 80a9 	blt.w	800093c <main+0x1a0>
 80007ea:	3b2a      	subs	r3, #42	@ 0x2a
 80007ec:	2b13      	cmp	r3, #19
 80007ee:	f200 80a5 	bhi.w	800093c <main+0x1a0>
 80007f2:	a201      	add	r2, pc, #4	@ (adr r2, 80007f8 <main+0x5c>)
 80007f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007f8:	08000917 	.word	0x08000917
 80007fc:	08000917 	.word	0x08000917
 8000800:	0800093d 	.word	0x0800093d
 8000804:	08000917 	.word	0x08000917
 8000808:	0800093d 	.word	0x0800093d
 800080c:	08000917 	.word	0x08000917
 8000810:	0800093d 	.word	0x0800093d
 8000814:	0800093d 	.word	0x0800093d
 8000818:	0800093d 	.word	0x0800093d
 800081c:	0800093d 	.word	0x0800093d
 8000820:	0800093d 	.word	0x0800093d
 8000824:	0800093d 	.word	0x0800093d
 8000828:	0800093d 	.word	0x0800093d
 800082c:	0800093d 	.word	0x0800093d
 8000830:	0800093d 	.word	0x0800093d
 8000834:	0800093d 	.word	0x0800093d
 8000838:	0800093d 	.word	0x0800093d
 800083c:	0800093d 	.word	0x0800093d
 8000840:	0800093d 	.word	0x0800093d
 8000844:	0800084f 	.word	0x0800084f
 8000848:	2b78      	cmp	r3, #120	@ 0x78
 800084a:	d069      	beq.n	8000920 <main+0x184>
 800084c:	e076      	b.n	800093c <main+0x1a0>
		{
		case '=':
					if(continue_flag == 0)
 800084e:	787b      	ldrb	r3, [r7, #1]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d129      	bne.n	80008a8 <main+0x10c>
					{
						switch(operation)
 8000854:	78bb      	ldrb	r3, [r7, #2]
 8000856:	3b2a      	subs	r3, #42	@ 0x2a
 8000858:	2b05      	cmp	r3, #5
 800085a:	d84f      	bhi.n	80008fc <main+0x160>
 800085c:	a201      	add	r2, pc, #4	@ (adr r2, 8000864 <main+0xc8>)
 800085e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000862:	bf00      	nop
 8000864:	08000891 	.word	0x08000891
 8000868:	08000887 	.word	0x08000887
 800086c:	080008fd 	.word	0x080008fd
 8000870:	0800087d 	.word	0x0800087d
 8000874:	080008fd 	.word	0x080008fd
 8000878:	0800089d 	.word	0x0800089d
								{
								case '-':c=a-b;
 800087c:	68fa      	ldr	r2, [r7, #12]
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	607b      	str	r3, [r7, #4]
								break;
 8000884:	e03a      	b.n	80008fc <main+0x160>

								case '+':c=a+b;
 8000886:	68fa      	ldr	r2, [r7, #12]
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	4413      	add	r3, r2
 800088c:	607b      	str	r3, [r7, #4]
								break;
 800088e:	e035      	b.n	80008fc <main+0x160>

								case '*':c=a*b;
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	68ba      	ldr	r2, [r7, #8]
 8000894:	fb02 f303 	mul.w	r3, r2, r3
 8000898:	607b      	str	r3, [r7, #4]
								break;
 800089a:	e02f      	b.n	80008fc <main+0x160>

								case '/':c=a/b;
 800089c:	68fa      	ldr	r2, [r7, #12]
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	fb92 f3f3 	sdiv	r3, r2, r3
 80008a4:	607b      	str	r3, [r7, #4]
								break;
 80008a6:	e029      	b.n	80008fc <main+0x160>
								}
					}

					else
					{
						switch(operation)
 80008a8:	78bb      	ldrb	r3, [r7, #2]
 80008aa:	3b2a      	subs	r3, #42	@ 0x2a
 80008ac:	2b05      	cmp	r3, #5
 80008ae:	d825      	bhi.n	80008fc <main+0x160>
 80008b0:	a201      	add	r2, pc, #4	@ (adr r2, 80008b8 <main+0x11c>)
 80008b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b6:	bf00      	nop
 80008b8:	080008e5 	.word	0x080008e5
 80008bc:	080008db 	.word	0x080008db
 80008c0:	080008fd 	.word	0x080008fd
 80008c4:	080008d1 	.word	0x080008d1
 80008c8:	080008fd 	.word	0x080008fd
 80008cc:	080008f1 	.word	0x080008f1
							{
							case '-':c=c-b;
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	607b      	str	r3, [r7, #4]
							break;
 80008d8:	e010      	b.n	80008fc <main+0x160>

							case '+':c=c+b;
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	4413      	add	r3, r2
 80008e0:	607b      	str	r3, [r7, #4]
							break;
 80008e2:	e00b      	b.n	80008fc <main+0x160>

							case '*':c=c*b;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	fb02 f303 	mul.w	r3, r2, r3
 80008ec:	607b      	str	r3, [r7, #4]
							break;
 80008ee:	e005      	b.n	80008fc <main+0x160>

							case '/':c=c/b;
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80008f8:	607b      	str	r3, [r7, #4]
							break;
 80008fa:	bf00      	nop
							}
					}

					LCD_sendNumber(c);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	17da      	asrs	r2, r3, #31
 8000900:	461c      	mov	r4, r3
 8000902:	4615      	mov	r5, r2
 8000904:	4620      	mov	r0, r4
 8000906:	4629      	mov	r1, r5
 8000908:	f7ff fed8 	bl	80006bc <LCD_sendNumber>

					continue_flag=1;
 800090c:	2301      	movs	r3, #1
 800090e:	707b      	strb	r3, [r7, #1]
					b=0;
 8000910:	2300      	movs	r3, #0
 8000912:	60bb      	str	r3, [r7, #8]

			break;
 8000914:	e02b      	b.n	800096e <main+0x1d2>

		case '-':
		case '+':
		case '*':
		case '/':
			switch_flag=1;
 8000916:	2301      	movs	r3, #1
 8000918:	70fb      	strb	r3, [r7, #3]
			operation=key;
 800091a:	783b      	ldrb	r3, [r7, #0]
 800091c:	70bb      	strb	r3, [r7, #2]

			break;
 800091e:	e026      	b.n	800096e <main+0x1d2>
		case 'x':
					  switch_flag=0;
 8000920:	2300      	movs	r3, #0
 8000922:	70fb      	strb	r3, [r7, #3]
					  continue_flag=0;
 8000924:	2300      	movs	r3, #0
 8000926:	707b      	strb	r3, [r7, #1]
					  c=0;
 8000928:	2300      	movs	r3, #0
 800092a:	607b      	str	r3, [r7, #4]
					  a=0;
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
					  b=0;
 8000930:	2300      	movs	r3, #0
 8000932:	60bb      	str	r3, [r7, #8]
					  LCD_sendinst(LCD_CLEAR_COMMAND);
 8000934:	2001      	movs	r0, #1
 8000936:	f7ff fe61 	bl	80005fc <LCD_sendinst>

				break;
 800093a:	e018      	b.n	800096e <main+0x1d2>

		default:
			if(switch_flag == 0)
 800093c:	78fb      	ldrb	r3, [r7, #3]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d10a      	bne.n	8000958 <main+0x1bc>
				{
				a = ( ( ( a )* 10 ) + ( key - 48 ) );
 8000942:	68fa      	ldr	r2, [r7, #12]
 8000944:	4613      	mov	r3, r2
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	4413      	add	r3, r2
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	461a      	mov	r2, r3
 800094e:	783b      	ldrb	r3, [r7, #0]
 8000950:	3b30      	subs	r3, #48	@ 0x30
 8000952:	4413      	add	r3, r2
 8000954:	60fb      	str	r3, [r7, #12]
			else
			{
				b = ( ( ( b )* 10 ) + ( key - 48 ) );
			}

			break;
 8000956:	e009      	b.n	800096c <main+0x1d0>
				b = ( ( ( b )* 10 ) + ( key - 48 ) );
 8000958:	68ba      	ldr	r2, [r7, #8]
 800095a:	4613      	mov	r3, r2
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	4413      	add	r3, r2
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	461a      	mov	r2, r3
 8000964:	783b      	ldrb	r3, [r7, #0]
 8000966:	3b30      	subs	r3, #48	@ 0x30
 8000968:	4413      	add	r3, r2
 800096a:	60bb      	str	r3, [r7, #8]
			break;
 800096c:	bf00      	nop
		}
		HAL_Delay(100);
 800096e:	2064      	movs	r0, #100	@ 0x64
 8000970:	f000 f9a6 	bl	8000cc0 <HAL_Delay>
		key = Ketpad_GetKey();
 8000974:	e72b      	b.n	80007ce <main+0x32>
 8000976:	bf00      	nop

08000978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b090      	sub	sp, #64	@ 0x40
 800097c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097e:	f107 0318 	add.w	r3, r7, #24
 8000982:	2228      	movs	r2, #40	@ 0x28
 8000984:	2100      	movs	r1, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f001 f82c 	bl	80019e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
 8000998:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800099a:	2301      	movs	r3, #1
 800099c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800099e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a8:	2301      	movs	r3, #1
 80009aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ac:	2302      	movs	r3, #2
 80009ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009b6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80009ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009bc:	f107 0318 	add.w	r3, r7, #24
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 fc31 	bl	8001228 <HAL_RCC_OscConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80009cc:	f000 f886 	bl	8000adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d0:	230f      	movs	r3, #15
 80009d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d4:	2302      	movs	r3, #2
 80009d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d8:	2300      	movs	r3, #0
 80009da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	2102      	movs	r1, #2
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 fe9e 	bl	800172c <HAL_RCC_ClockConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80009f6:	f000 f871 	bl	8000adc <Error_Handler>
  }
}
 80009fa:	bf00      	nop
 80009fc:	3740      	adds	r7, #64	@ 0x40
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
	...

08000a04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0a:	f107 0310 	add.w	r3, r7, #16
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a18:	4b2d      	ldr	r3, [pc, #180]	@ (8000ad0 <MX_GPIO_Init+0xcc>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	4a2c      	ldr	r2, [pc, #176]	@ (8000ad0 <MX_GPIO_Init+0xcc>)
 8000a1e:	f043 0320 	orr.w	r3, r3, #32
 8000a22:	6193      	str	r3, [r2, #24]
 8000a24:	4b2a      	ldr	r3, [pc, #168]	@ (8000ad0 <MX_GPIO_Init+0xcc>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f003 0320 	and.w	r3, r3, #32
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a30:	4b27      	ldr	r3, [pc, #156]	@ (8000ad0 <MX_GPIO_Init+0xcc>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	4a26      	ldr	r2, [pc, #152]	@ (8000ad0 <MX_GPIO_Init+0xcc>)
 8000a36:	f043 0304 	orr.w	r3, r3, #4
 8000a3a:	6193      	str	r3, [r2, #24]
 8000a3c:	4b24      	ldr	r3, [pc, #144]	@ (8000ad0 <MX_GPIO_Init+0xcc>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f003 0304 	and.w	r3, r3, #4
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a48:	4b21      	ldr	r3, [pc, #132]	@ (8000ad0 <MX_GPIO_Init+0xcc>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	4a20      	ldr	r2, [pc, #128]	@ (8000ad0 <MX_GPIO_Init+0xcc>)
 8000a4e:	f043 0308 	orr.w	r3, r3, #8
 8000a52:	6193      	str	r3, [r2, #24]
 8000a54:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad0 <MX_GPIO_Init+0xcc>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	f003 0308 	and.w	r3, r3, #8
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	21f0      	movs	r1, #240	@ 0xf0
 8000a64:	481b      	ldr	r0, [pc, #108]	@ (8000ad4 <MX_GPIO_Init+0xd0>)
 8000a66:	f000 fbc6 	bl	80011f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f247 71f8 	movw	r1, #30712	@ 0x77f8
 8000a70:	4819      	ldr	r0, [pc, #100]	@ (8000ad8 <MX_GPIO_Init+0xd4>)
 8000a72:	f000 fbc0 	bl	80011f6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000a76:	230f      	movs	r3, #15
 8000a78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a82:	f107 0310 	add.w	r3, r7, #16
 8000a86:	4619      	mov	r1, r3
 8000a88:	4812      	ldr	r0, [pc, #72]	@ (8000ad4 <MX_GPIO_Init+0xd0>)
 8000a8a:	f000 fa21 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a8e:	23f0      	movs	r3, #240	@ 0xf0
 8000a90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a92:	2301      	movs	r3, #1
 8000a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9e:	f107 0310 	add.w	r3, r7, #16
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	480b      	ldr	r0, [pc, #44]	@ (8000ad4 <MX_GPIO_Init+0xd0>)
 8000aa6:	f000 fa13 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 PB13 PB14
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8000aaa:	f247 73f8 	movw	r3, #30712	@ 0x77f8
 8000aae:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000abc:	f107 0310 	add.w	r3, r7, #16
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4805      	ldr	r0, [pc, #20]	@ (8000ad8 <MX_GPIO_Init+0xd4>)
 8000ac4:	f000 fa04 	bl	8000ed0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ac8:	bf00      	nop
 8000aca:	3720      	adds	r7, #32
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	40010800 	.word	0x40010800
 8000ad8:	40010c00 	.word	0x40010c00

08000adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae0:	b672      	cpsid	i
}
 8000ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <Error_Handler+0x8>

08000ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000aee:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <HAL_MspInit+0x5c>)
 8000af0:	699b      	ldr	r3, [r3, #24]
 8000af2:	4a14      	ldr	r2, [pc, #80]	@ (8000b44 <HAL_MspInit+0x5c>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6193      	str	r3, [r2, #24]
 8000afa:	4b12      	ldr	r3, [pc, #72]	@ (8000b44 <HAL_MspInit+0x5c>)
 8000afc:	699b      	ldr	r3, [r3, #24]
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b06:	4b0f      	ldr	r3, [pc, #60]	@ (8000b44 <HAL_MspInit+0x5c>)
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b44 <HAL_MspInit+0x5c>)
 8000b0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b10:	61d3      	str	r3, [r2, #28]
 8000b12:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <HAL_MspInit+0x5c>)
 8000b14:	69db      	ldr	r3, [r3, #28]
 8000b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b48 <HAL_MspInit+0x60>)
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	4a04      	ldr	r2, [pc, #16]	@ (8000b48 <HAL_MspInit+0x60>)
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	40021000 	.word	0x40021000
 8000b48:	40010000 	.word	0x40010000

08000b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <NMI_Handler+0x4>

08000b54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <HardFault_Handler+0x4>

08000b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <MemManage_Handler+0x4>

08000b64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <BusFault_Handler+0x4>

08000b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <UsageFault_Handler+0x4>

08000b74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr

08000b80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr

08000b8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr

08000b98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9c:	f000 f874 	bl	8000c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr

08000bb0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bb0:	f7ff fff8 	bl	8000ba4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb4:	480b      	ldr	r0, [pc, #44]	@ (8000be4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000bb6:	490c      	ldr	r1, [pc, #48]	@ (8000be8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000bb8:	4a0c      	ldr	r2, [pc, #48]	@ (8000bec <LoopFillZerobss+0x16>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bca:	4a09      	ldr	r2, [pc, #36]	@ (8000bf0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bcc:	4c09      	ldr	r4, [pc, #36]	@ (8000bf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bda:	f000 ff0b 	bl	80019f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bde:	f7ff fddd 	bl	800079c <main>
  bx lr
 8000be2:	4770      	bx	lr
  ldr r0, =_sdata
 8000be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be8:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8000bec:	08001a88 	.word	0x08001a88
  ldr r2, =_sbss
 8000bf0:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8000bf4:	2000005c 	.word	0x2000005c

08000bf8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bf8:	e7fe      	b.n	8000bf8 <ADC1_2_IRQHandler>
	...

08000bfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c00:	4b08      	ldr	r3, [pc, #32]	@ (8000c24 <HAL_Init+0x28>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a07      	ldr	r2, [pc, #28]	@ (8000c24 <HAL_Init+0x28>)
 8000c06:	f043 0310 	orr.w	r3, r3, #16
 8000c0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	f000 f92b 	bl	8000e68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c12:	200f      	movs	r0, #15
 8000c14:	f000 f808 	bl	8000c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c18:	f7ff ff66 	bl	8000ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40022000 	.word	0x40022000

08000c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c30:	4b12      	ldr	r3, [pc, #72]	@ (8000c7c <HAL_InitTick+0x54>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4b12      	ldr	r3, [pc, #72]	@ (8000c80 <HAL_InitTick+0x58>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c46:	4618      	mov	r0, r3
 8000c48:	f000 f935 	bl	8000eb6 <HAL_SYSTICK_Config>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e00e      	b.n	8000c74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2b0f      	cmp	r3, #15
 8000c5a:	d80a      	bhi.n	8000c72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	f04f 30ff 	mov.w	r0, #4294967295
 8000c64:	f000 f90b 	bl	8000e7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c68:	4a06      	ldr	r2, [pc, #24]	@ (8000c84 <HAL_InitTick+0x5c>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e000      	b.n	8000c74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000030 	.word	0x20000030
 8000c80:	20000038 	.word	0x20000038
 8000c84:	20000034 	.word	0x20000034

08000c88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ca4 <HAL_IncTick+0x1c>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b05      	ldr	r3, [pc, #20]	@ (8000ca8 <HAL_IncTick+0x20>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4413      	add	r3, r2
 8000c98:	4a03      	ldr	r2, [pc, #12]	@ (8000ca8 <HAL_IncTick+0x20>)
 8000c9a:	6013      	str	r3, [r2, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr
 8000ca4:	20000038 	.word	0x20000038
 8000ca8:	20000058 	.word	0x20000058

08000cac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb0:	4b02      	ldr	r3, [pc, #8]	@ (8000cbc <HAL_GetTick+0x10>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr
 8000cbc:	20000058 	.word	0x20000058

08000cc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cc8:	f7ff fff0 	bl	8000cac <HAL_GetTick>
 8000ccc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cd8:	d005      	beq.n	8000ce6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cda:	4b0a      	ldr	r3, [pc, #40]	@ (8000d04 <HAL_Delay+0x44>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ce6:	bf00      	nop
 8000ce8:	f7ff ffe0 	bl	8000cac <HAL_GetTick>
 8000cec:	4602      	mov	r2, r0
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d8f7      	bhi.n	8000ce8 <HAL_Delay+0x28>
  {
  }
}
 8000cf8:	bf00      	nop
 8000cfa:	bf00      	nop
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000038 	.word	0x20000038

08000d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d18:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d24:	4013      	ands	r3, r2
 8000d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3a:	4a04      	ldr	r2, [pc, #16]	@ (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	60d3      	str	r3, [r2, #12]
}
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d54:	4b04      	ldr	r3, [pc, #16]	@ (8000d68 <__NVIC_GetPriorityGrouping+0x18>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	0a1b      	lsrs	r3, r3, #8
 8000d5a:	f003 0307 	and.w	r3, r3, #7
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	db0a      	blt.n	8000d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	490c      	ldr	r1, [pc, #48]	@ (8000db8 <__NVIC_SetPriority+0x4c>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	0112      	lsls	r2, r2, #4
 8000d8c:	b2d2      	uxtb	r2, r2
 8000d8e:	440b      	add	r3, r1
 8000d90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d94:	e00a      	b.n	8000dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4908      	ldr	r1, [pc, #32]	@ (8000dbc <__NVIC_SetPriority+0x50>)
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	f003 030f 	and.w	r3, r3, #15
 8000da2:	3b04      	subs	r3, #4
 8000da4:	0112      	lsls	r2, r2, #4
 8000da6:	b2d2      	uxtb	r2, r2
 8000da8:	440b      	add	r3, r1
 8000daa:	761a      	strb	r2, [r3, #24]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000e100 	.word	0xe000e100
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	@ 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	f1c3 0307 	rsb	r3, r3, #7
 8000dda:	2b04      	cmp	r3, #4
 8000ddc:	bf28      	it	cs
 8000dde:	2304      	movcs	r3, #4
 8000de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3304      	adds	r3, #4
 8000de6:	2b06      	cmp	r3, #6
 8000de8:	d902      	bls.n	8000df0 <NVIC_EncodePriority+0x30>
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3b03      	subs	r3, #3
 8000dee:	e000      	b.n	8000df2 <NVIC_EncodePriority+0x32>
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	f04f 32ff 	mov.w	r2, #4294967295
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43da      	mvns	r2, r3
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	401a      	ands	r2, r3
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e08:	f04f 31ff 	mov.w	r1, #4294967295
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e12:	43d9      	mvns	r1, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	4313      	orrs	r3, r2
         );
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3724      	adds	r7, #36	@ 0x24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr

08000e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e34:	d301      	bcc.n	8000e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e36:	2301      	movs	r3, #1
 8000e38:	e00f      	b.n	8000e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e64 <SysTick_Config+0x40>)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e42:	210f      	movs	r1, #15
 8000e44:	f04f 30ff 	mov.w	r0, #4294967295
 8000e48:	f7ff ff90 	bl	8000d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e4c:	4b05      	ldr	r3, [pc, #20]	@ (8000e64 <SysTick_Config+0x40>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e52:	4b04      	ldr	r3, [pc, #16]	@ (8000e64 <SysTick_Config+0x40>)
 8000e54:	2207      	movs	r2, #7
 8000e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	e000e010 	.word	0xe000e010

08000e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff ff49 	bl	8000d08 <__NVIC_SetPriorityGrouping>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b086      	sub	sp, #24
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	4603      	mov	r3, r0
 8000e86:	60b9      	str	r1, [r7, #8]
 8000e88:	607a      	str	r2, [r7, #4]
 8000e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e90:	f7ff ff5e 	bl	8000d50 <__NVIC_GetPriorityGrouping>
 8000e94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	68b9      	ldr	r1, [r7, #8]
 8000e9a:	6978      	ldr	r0, [r7, #20]
 8000e9c:	f7ff ff90 	bl	8000dc0 <NVIC_EncodePriority>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff5f 	bl	8000d6c <__NVIC_SetPriority>
}
 8000eae:	bf00      	nop
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff ffb0 	bl	8000e24 <SysTick_Config>
 8000ec4:	4603      	mov	r3, r0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b08b      	sub	sp, #44	@ 0x2c
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eda:	2300      	movs	r3, #0
 8000edc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ee2:	e161      	b.n	80011a8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	69fa      	ldr	r2, [r7, #28]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	f040 8150 	bne.w	80011a2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	4a97      	ldr	r2, [pc, #604]	@ (8001164 <HAL_GPIO_Init+0x294>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d05e      	beq.n	8000fca <HAL_GPIO_Init+0xfa>
 8000f0c:	4a95      	ldr	r2, [pc, #596]	@ (8001164 <HAL_GPIO_Init+0x294>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d875      	bhi.n	8000ffe <HAL_GPIO_Init+0x12e>
 8000f12:	4a95      	ldr	r2, [pc, #596]	@ (8001168 <HAL_GPIO_Init+0x298>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d058      	beq.n	8000fca <HAL_GPIO_Init+0xfa>
 8000f18:	4a93      	ldr	r2, [pc, #588]	@ (8001168 <HAL_GPIO_Init+0x298>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d86f      	bhi.n	8000ffe <HAL_GPIO_Init+0x12e>
 8000f1e:	4a93      	ldr	r2, [pc, #588]	@ (800116c <HAL_GPIO_Init+0x29c>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d052      	beq.n	8000fca <HAL_GPIO_Init+0xfa>
 8000f24:	4a91      	ldr	r2, [pc, #580]	@ (800116c <HAL_GPIO_Init+0x29c>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d869      	bhi.n	8000ffe <HAL_GPIO_Init+0x12e>
 8000f2a:	4a91      	ldr	r2, [pc, #580]	@ (8001170 <HAL_GPIO_Init+0x2a0>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d04c      	beq.n	8000fca <HAL_GPIO_Init+0xfa>
 8000f30:	4a8f      	ldr	r2, [pc, #572]	@ (8001170 <HAL_GPIO_Init+0x2a0>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d863      	bhi.n	8000ffe <HAL_GPIO_Init+0x12e>
 8000f36:	4a8f      	ldr	r2, [pc, #572]	@ (8001174 <HAL_GPIO_Init+0x2a4>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d046      	beq.n	8000fca <HAL_GPIO_Init+0xfa>
 8000f3c:	4a8d      	ldr	r2, [pc, #564]	@ (8001174 <HAL_GPIO_Init+0x2a4>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d85d      	bhi.n	8000ffe <HAL_GPIO_Init+0x12e>
 8000f42:	2b12      	cmp	r3, #18
 8000f44:	d82a      	bhi.n	8000f9c <HAL_GPIO_Init+0xcc>
 8000f46:	2b12      	cmp	r3, #18
 8000f48:	d859      	bhi.n	8000ffe <HAL_GPIO_Init+0x12e>
 8000f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8000f50 <HAL_GPIO_Init+0x80>)
 8000f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f50:	08000fcb 	.word	0x08000fcb
 8000f54:	08000fa5 	.word	0x08000fa5
 8000f58:	08000fb7 	.word	0x08000fb7
 8000f5c:	08000ff9 	.word	0x08000ff9
 8000f60:	08000fff 	.word	0x08000fff
 8000f64:	08000fff 	.word	0x08000fff
 8000f68:	08000fff 	.word	0x08000fff
 8000f6c:	08000fff 	.word	0x08000fff
 8000f70:	08000fff 	.word	0x08000fff
 8000f74:	08000fff 	.word	0x08000fff
 8000f78:	08000fff 	.word	0x08000fff
 8000f7c:	08000fff 	.word	0x08000fff
 8000f80:	08000fff 	.word	0x08000fff
 8000f84:	08000fff 	.word	0x08000fff
 8000f88:	08000fff 	.word	0x08000fff
 8000f8c:	08000fff 	.word	0x08000fff
 8000f90:	08000fff 	.word	0x08000fff
 8000f94:	08000fad 	.word	0x08000fad
 8000f98:	08000fc1 	.word	0x08000fc1
 8000f9c:	4a76      	ldr	r2, [pc, #472]	@ (8001178 <HAL_GPIO_Init+0x2a8>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d013      	beq.n	8000fca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fa2:	e02c      	b.n	8000ffe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	623b      	str	r3, [r7, #32]
          break;
 8000faa:	e029      	b.n	8001000 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	3304      	adds	r3, #4
 8000fb2:	623b      	str	r3, [r7, #32]
          break;
 8000fb4:	e024      	b.n	8001000 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	3308      	adds	r3, #8
 8000fbc:	623b      	str	r3, [r7, #32]
          break;
 8000fbe:	e01f      	b.n	8001000 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	330c      	adds	r3, #12
 8000fc6:	623b      	str	r3, [r7, #32]
          break;
 8000fc8:	e01a      	b.n	8001000 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d102      	bne.n	8000fd8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	623b      	str	r3, [r7, #32]
          break;
 8000fd6:	e013      	b.n	8001000 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d105      	bne.n	8000fec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	69fa      	ldr	r2, [r7, #28]
 8000fe8:	611a      	str	r2, [r3, #16]
          break;
 8000fea:	e009      	b.n	8001000 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fec:	2308      	movs	r3, #8
 8000fee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	69fa      	ldr	r2, [r7, #28]
 8000ff4:	615a      	str	r2, [r3, #20]
          break;
 8000ff6:	e003      	b.n	8001000 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
          break;
 8000ffc:	e000      	b.n	8001000 <HAL_GPIO_Init+0x130>
          break;
 8000ffe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	2bff      	cmp	r3, #255	@ 0xff
 8001004:	d801      	bhi.n	800100a <HAL_GPIO_Init+0x13a>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	e001      	b.n	800100e <HAL_GPIO_Init+0x13e>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3304      	adds	r3, #4
 800100e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	2bff      	cmp	r3, #255	@ 0xff
 8001014:	d802      	bhi.n	800101c <HAL_GPIO_Init+0x14c>
 8001016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	e002      	b.n	8001022 <HAL_GPIO_Init+0x152>
 800101c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800101e:	3b08      	subs	r3, #8
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	210f      	movs	r1, #15
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	fa01 f303 	lsl.w	r3, r1, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	401a      	ands	r2, r3
 8001034:	6a39      	ldr	r1, [r7, #32]
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	fa01 f303 	lsl.w	r3, r1, r3
 800103c:	431a      	orrs	r2, r3
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 80a9 	beq.w	80011a2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001050:	4b4a      	ldr	r3, [pc, #296]	@ (800117c <HAL_GPIO_Init+0x2ac>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	4a49      	ldr	r2, [pc, #292]	@ (800117c <HAL_GPIO_Init+0x2ac>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	6193      	str	r3, [r2, #24]
 800105c:	4b47      	ldr	r3, [pc, #284]	@ (800117c <HAL_GPIO_Init+0x2ac>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001068:	4a45      	ldr	r2, [pc, #276]	@ (8001180 <HAL_GPIO_Init+0x2b0>)
 800106a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800106c:	089b      	lsrs	r3, r3, #2
 800106e:	3302      	adds	r3, #2
 8001070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001074:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001078:	f003 0303 	and.w	r3, r3, #3
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	220f      	movs	r2, #15
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	4013      	ands	r3, r2
 800108a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a3d      	ldr	r2, [pc, #244]	@ (8001184 <HAL_GPIO_Init+0x2b4>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d00d      	beq.n	80010b0 <HAL_GPIO_Init+0x1e0>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a3c      	ldr	r2, [pc, #240]	@ (8001188 <HAL_GPIO_Init+0x2b8>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d007      	beq.n	80010ac <HAL_GPIO_Init+0x1dc>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a3b      	ldr	r2, [pc, #236]	@ (800118c <HAL_GPIO_Init+0x2bc>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d101      	bne.n	80010a8 <HAL_GPIO_Init+0x1d8>
 80010a4:	2302      	movs	r3, #2
 80010a6:	e004      	b.n	80010b2 <HAL_GPIO_Init+0x1e2>
 80010a8:	2303      	movs	r3, #3
 80010aa:	e002      	b.n	80010b2 <HAL_GPIO_Init+0x1e2>
 80010ac:	2301      	movs	r3, #1
 80010ae:	e000      	b.n	80010b2 <HAL_GPIO_Init+0x1e2>
 80010b0:	2300      	movs	r3, #0
 80010b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010b4:	f002 0203 	and.w	r2, r2, #3
 80010b8:	0092      	lsls	r2, r2, #2
 80010ba:	4093      	lsls	r3, r2
 80010bc:	68fa      	ldr	r2, [r7, #12]
 80010be:	4313      	orrs	r3, r2
 80010c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010c2:	492f      	ldr	r1, [pc, #188]	@ (8001180 <HAL_GPIO_Init+0x2b0>)
 80010c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c6:	089b      	lsrs	r3, r3, #2
 80010c8:	3302      	adds	r3, #2
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d006      	beq.n	80010ea <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001190 <HAL_GPIO_Init+0x2c0>)
 80010de:	689a      	ldr	r2, [r3, #8]
 80010e0:	492b      	ldr	r1, [pc, #172]	@ (8001190 <HAL_GPIO_Init+0x2c0>)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	608b      	str	r3, [r1, #8]
 80010e8:	e006      	b.n	80010f8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010ea:	4b29      	ldr	r3, [pc, #164]	@ (8001190 <HAL_GPIO_Init+0x2c0>)
 80010ec:	689a      	ldr	r2, [r3, #8]
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	4927      	ldr	r1, [pc, #156]	@ (8001190 <HAL_GPIO_Init+0x2c0>)
 80010f4:	4013      	ands	r3, r2
 80010f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d006      	beq.n	8001112 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001104:	4b22      	ldr	r3, [pc, #136]	@ (8001190 <HAL_GPIO_Init+0x2c0>)
 8001106:	68da      	ldr	r2, [r3, #12]
 8001108:	4921      	ldr	r1, [pc, #132]	@ (8001190 <HAL_GPIO_Init+0x2c0>)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	4313      	orrs	r3, r2
 800110e:	60cb      	str	r3, [r1, #12]
 8001110:	e006      	b.n	8001120 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001112:	4b1f      	ldr	r3, [pc, #124]	@ (8001190 <HAL_GPIO_Init+0x2c0>)
 8001114:	68da      	ldr	r2, [r3, #12]
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	43db      	mvns	r3, r3
 800111a:	491d      	ldr	r1, [pc, #116]	@ (8001190 <HAL_GPIO_Init+0x2c0>)
 800111c:	4013      	ands	r3, r2
 800111e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d006      	beq.n	800113a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800112c:	4b18      	ldr	r3, [pc, #96]	@ (8001190 <HAL_GPIO_Init+0x2c0>)
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	4917      	ldr	r1, [pc, #92]	@ (8001190 <HAL_GPIO_Init+0x2c0>)
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	4313      	orrs	r3, r2
 8001136:	604b      	str	r3, [r1, #4]
 8001138:	e006      	b.n	8001148 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800113a:	4b15      	ldr	r3, [pc, #84]	@ (8001190 <HAL_GPIO_Init+0x2c0>)
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	43db      	mvns	r3, r3
 8001142:	4913      	ldr	r1, [pc, #76]	@ (8001190 <HAL_GPIO_Init+0x2c0>)
 8001144:	4013      	ands	r3, r2
 8001146:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d01f      	beq.n	8001194 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001154:	4b0e      	ldr	r3, [pc, #56]	@ (8001190 <HAL_GPIO_Init+0x2c0>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	490d      	ldr	r1, [pc, #52]	@ (8001190 <HAL_GPIO_Init+0x2c0>)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	4313      	orrs	r3, r2
 800115e:	600b      	str	r3, [r1, #0]
 8001160:	e01f      	b.n	80011a2 <HAL_GPIO_Init+0x2d2>
 8001162:	bf00      	nop
 8001164:	10320000 	.word	0x10320000
 8001168:	10310000 	.word	0x10310000
 800116c:	10220000 	.word	0x10220000
 8001170:	10210000 	.word	0x10210000
 8001174:	10120000 	.word	0x10120000
 8001178:	10110000 	.word	0x10110000
 800117c:	40021000 	.word	0x40021000
 8001180:	40010000 	.word	0x40010000
 8001184:	40010800 	.word	0x40010800
 8001188:	40010c00 	.word	0x40010c00
 800118c:	40011000 	.word	0x40011000
 8001190:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001194:	4b0b      	ldr	r3, [pc, #44]	@ (80011c4 <HAL_GPIO_Init+0x2f4>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	43db      	mvns	r3, r3
 800119c:	4909      	ldr	r1, [pc, #36]	@ (80011c4 <HAL_GPIO_Init+0x2f4>)
 800119e:	4013      	ands	r3, r2
 80011a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80011a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a4:	3301      	adds	r3, #1
 80011a6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ae:	fa22 f303 	lsr.w	r3, r2, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	f47f ae96 	bne.w	8000ee4 <HAL_GPIO_Init+0x14>
  }
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	372c      	adds	r7, #44	@ 0x2c
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr
 80011c4:	40010400 	.word	0x40010400

080011c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	887b      	ldrh	r3, [r7, #2]
 80011da:	4013      	ands	r3, r2
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d002      	beq.n	80011e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011e0:	2301      	movs	r3, #1
 80011e2:	73fb      	strb	r3, [r7, #15]
 80011e4:	e001      	b.n	80011ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011e6:	2300      	movs	r3, #0
 80011e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr

080011f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	460b      	mov	r3, r1
 8001200:	807b      	strh	r3, [r7, #2]
 8001202:	4613      	mov	r3, r2
 8001204:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001206:	787b      	ldrb	r3, [r7, #1]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d003      	beq.n	8001214 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800120c:	887a      	ldrh	r2, [r7, #2]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001212:	e003      	b.n	800121c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001214:	887b      	ldrh	r3, [r7, #2]
 8001216:	041a      	lsls	r2, r3, #16
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	611a      	str	r2, [r3, #16]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr
	...

08001228 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e272      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b00      	cmp	r3, #0
 8001244:	f000 8087 	beq.w	8001356 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001248:	4b92      	ldr	r3, [pc, #584]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 030c 	and.w	r3, r3, #12
 8001250:	2b04      	cmp	r3, #4
 8001252:	d00c      	beq.n	800126e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001254:	4b8f      	ldr	r3, [pc, #572]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 030c 	and.w	r3, r3, #12
 800125c:	2b08      	cmp	r3, #8
 800125e:	d112      	bne.n	8001286 <HAL_RCC_OscConfig+0x5e>
 8001260:	4b8c      	ldr	r3, [pc, #560]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800126c:	d10b      	bne.n	8001286 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800126e:	4b89      	ldr	r3, [pc, #548]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d06c      	beq.n	8001354 <HAL_RCC_OscConfig+0x12c>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d168      	bne.n	8001354 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e24c      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800128e:	d106      	bne.n	800129e <HAL_RCC_OscConfig+0x76>
 8001290:	4b80      	ldr	r3, [pc, #512]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a7f      	ldr	r2, [pc, #508]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001296:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800129a:	6013      	str	r3, [r2, #0]
 800129c:	e02e      	b.n	80012fc <HAL_RCC_OscConfig+0xd4>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d10c      	bne.n	80012c0 <HAL_RCC_OscConfig+0x98>
 80012a6:	4b7b      	ldr	r3, [pc, #492]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a7a      	ldr	r2, [pc, #488]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	4b78      	ldr	r3, [pc, #480]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a77      	ldr	r2, [pc, #476]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	e01d      	b.n	80012fc <HAL_RCC_OscConfig+0xd4>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012c8:	d10c      	bne.n	80012e4 <HAL_RCC_OscConfig+0xbc>
 80012ca:	4b72      	ldr	r3, [pc, #456]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a71      	ldr	r2, [pc, #452]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	4b6f      	ldr	r3, [pc, #444]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a6e      	ldr	r2, [pc, #440]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	e00b      	b.n	80012fc <HAL_RCC_OscConfig+0xd4>
 80012e4:	4b6b      	ldr	r3, [pc, #428]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a6a      	ldr	r2, [pc, #424]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	4b68      	ldr	r3, [pc, #416]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a67      	ldr	r2, [pc, #412]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d013      	beq.n	800132c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001304:	f7ff fcd2 	bl	8000cac <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800130c:	f7ff fcce 	bl	8000cac <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b64      	cmp	r3, #100	@ 0x64
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e200      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131e:	4b5d      	ldr	r3, [pc, #372]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0f0      	beq.n	800130c <HAL_RCC_OscConfig+0xe4>
 800132a:	e014      	b.n	8001356 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132c:	f7ff fcbe 	bl	8000cac <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001334:	f7ff fcba 	bl	8000cac <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b64      	cmp	r3, #100	@ 0x64
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e1ec      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001346:	4b53      	ldr	r3, [pc, #332]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f0      	bne.n	8001334 <HAL_RCC_OscConfig+0x10c>
 8001352:	e000      	b.n	8001356 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d063      	beq.n	800142a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001362:	4b4c      	ldr	r3, [pc, #304]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f003 030c 	and.w	r3, r3, #12
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00b      	beq.n	8001386 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800136e:	4b49      	ldr	r3, [pc, #292]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f003 030c 	and.w	r3, r3, #12
 8001376:	2b08      	cmp	r3, #8
 8001378:	d11c      	bne.n	80013b4 <HAL_RCC_OscConfig+0x18c>
 800137a:	4b46      	ldr	r3, [pc, #280]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d116      	bne.n	80013b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001386:	4b43      	ldr	r3, [pc, #268]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d005      	beq.n	800139e <HAL_RCC_OscConfig+0x176>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d001      	beq.n	800139e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e1c0      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139e:	4b3d      	ldr	r3, [pc, #244]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	4939      	ldr	r1, [pc, #228]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b2:	e03a      	b.n	800142a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d020      	beq.n	80013fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013bc:	4b36      	ldr	r3, [pc, #216]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 80013be:	2201      	movs	r2, #1
 80013c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c2:	f7ff fc73 	bl	8000cac <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ca:	f7ff fc6f 	bl	8000cac <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e1a1      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0f0      	beq.n	80013ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	695b      	ldr	r3, [r3, #20]
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	4927      	ldr	r1, [pc, #156]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	600b      	str	r3, [r1, #0]
 80013fc:	e015      	b.n	800142a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013fe:	4b26      	ldr	r3, [pc, #152]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001404:	f7ff fc52 	bl	8000cac <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800140c:	f7ff fc4e 	bl	8000cac <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e180      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141e:	4b1d      	ldr	r3, [pc, #116]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1f0      	bne.n	800140c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	2b00      	cmp	r3, #0
 8001434:	d03a      	beq.n	80014ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d019      	beq.n	8001472 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800143e:	4b17      	ldr	r3, [pc, #92]	@ (800149c <HAL_RCC_OscConfig+0x274>)
 8001440:	2201      	movs	r2, #1
 8001442:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001444:	f7ff fc32 	bl	8000cac <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800144c:	f7ff fc2e 	bl	8000cac <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e160      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145e:	4b0d      	ldr	r3, [pc, #52]	@ (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f0      	beq.n	800144c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800146a:	2001      	movs	r0, #1
 800146c:	f000 fa9c 	bl	80019a8 <RCC_Delay>
 8001470:	e01c      	b.n	80014ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001472:	4b0a      	ldr	r3, [pc, #40]	@ (800149c <HAL_RCC_OscConfig+0x274>)
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001478:	f7ff fc18 	bl	8000cac <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800147e:	e00f      	b.n	80014a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001480:	f7ff fc14 	bl	8000cac <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d908      	bls.n	80014a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e146      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
 8001492:	bf00      	nop
 8001494:	40021000 	.word	0x40021000
 8001498:	42420000 	.word	0x42420000
 800149c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a0:	4b92      	ldr	r3, [pc, #584]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 80014a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1e9      	bne.n	8001480 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 80a6 	beq.w	8001606 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014be:	4b8b      	ldr	r3, [pc, #556]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10d      	bne.n	80014e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ca:	4b88      	ldr	r3, [pc, #544]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	4a87      	ldr	r2, [pc, #540]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 80014d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014d4:	61d3      	str	r3, [r2, #28]
 80014d6:	4b85      	ldr	r3, [pc, #532]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014e2:	2301      	movs	r3, #1
 80014e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e6:	4b82      	ldr	r3, [pc, #520]	@ (80016f0 <HAL_RCC_OscConfig+0x4c8>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d118      	bne.n	8001524 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014f2:	4b7f      	ldr	r3, [pc, #508]	@ (80016f0 <HAL_RCC_OscConfig+0x4c8>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a7e      	ldr	r2, [pc, #504]	@ (80016f0 <HAL_RCC_OscConfig+0x4c8>)
 80014f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014fe:	f7ff fbd5 	bl	8000cac <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001506:	f7ff fbd1 	bl	8000cac <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b64      	cmp	r3, #100	@ 0x64
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e103      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001518:	4b75      	ldr	r3, [pc, #468]	@ (80016f0 <HAL_RCC_OscConfig+0x4c8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0f0      	beq.n	8001506 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d106      	bne.n	800153a <HAL_RCC_OscConfig+0x312>
 800152c:	4b6f      	ldr	r3, [pc, #444]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	4a6e      	ldr	r2, [pc, #440]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6213      	str	r3, [r2, #32]
 8001538:	e02d      	b.n	8001596 <HAL_RCC_OscConfig+0x36e>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d10c      	bne.n	800155c <HAL_RCC_OscConfig+0x334>
 8001542:	4b6a      	ldr	r3, [pc, #424]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	4a69      	ldr	r2, [pc, #420]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001548:	f023 0301 	bic.w	r3, r3, #1
 800154c:	6213      	str	r3, [r2, #32]
 800154e:	4b67      	ldr	r3, [pc, #412]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001550:	6a1b      	ldr	r3, [r3, #32]
 8001552:	4a66      	ldr	r2, [pc, #408]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001554:	f023 0304 	bic.w	r3, r3, #4
 8001558:	6213      	str	r3, [r2, #32]
 800155a:	e01c      	b.n	8001596 <HAL_RCC_OscConfig+0x36e>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	2b05      	cmp	r3, #5
 8001562:	d10c      	bne.n	800157e <HAL_RCC_OscConfig+0x356>
 8001564:	4b61      	ldr	r3, [pc, #388]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001566:	6a1b      	ldr	r3, [r3, #32]
 8001568:	4a60      	ldr	r2, [pc, #384]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 800156a:	f043 0304 	orr.w	r3, r3, #4
 800156e:	6213      	str	r3, [r2, #32]
 8001570:	4b5e      	ldr	r3, [pc, #376]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	4a5d      	ldr	r2, [pc, #372]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	6213      	str	r3, [r2, #32]
 800157c:	e00b      	b.n	8001596 <HAL_RCC_OscConfig+0x36e>
 800157e:	4b5b      	ldr	r3, [pc, #364]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001580:	6a1b      	ldr	r3, [r3, #32]
 8001582:	4a5a      	ldr	r2, [pc, #360]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001584:	f023 0301 	bic.w	r3, r3, #1
 8001588:	6213      	str	r3, [r2, #32]
 800158a:	4b58      	ldr	r3, [pc, #352]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 800158c:	6a1b      	ldr	r3, [r3, #32]
 800158e:	4a57      	ldr	r2, [pc, #348]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001590:	f023 0304 	bic.w	r3, r3, #4
 8001594:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d015      	beq.n	80015ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159e:	f7ff fb85 	bl	8000cac <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a4:	e00a      	b.n	80015bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015a6:	f7ff fb81 	bl	8000cac <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e0b1      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015bc:	4b4b      	ldr	r3, [pc, #300]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 80015be:	6a1b      	ldr	r3, [r3, #32]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0ee      	beq.n	80015a6 <HAL_RCC_OscConfig+0x37e>
 80015c8:	e014      	b.n	80015f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ca:	f7ff fb6f 	bl	8000cac <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d0:	e00a      	b.n	80015e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015d2:	f7ff fb6b 	bl	8000cac <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e09b      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e8:	4b40      	ldr	r3, [pc, #256]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1ee      	bne.n	80015d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d105      	bne.n	8001606 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015fa:	4b3c      	ldr	r3, [pc, #240]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	4a3b      	ldr	r2, [pc, #236]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001600:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001604:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	2b00      	cmp	r3, #0
 800160c:	f000 8087 	beq.w	800171e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001610:	4b36      	ldr	r3, [pc, #216]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 030c 	and.w	r3, r3, #12
 8001618:	2b08      	cmp	r3, #8
 800161a:	d061      	beq.n	80016e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69db      	ldr	r3, [r3, #28]
 8001620:	2b02      	cmp	r3, #2
 8001622:	d146      	bne.n	80016b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001624:	4b33      	ldr	r3, [pc, #204]	@ (80016f4 <HAL_RCC_OscConfig+0x4cc>)
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162a:	f7ff fb3f 	bl	8000cac <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001632:	f7ff fb3b 	bl	8000cac <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e06d      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001644:	4b29      	ldr	r3, [pc, #164]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1f0      	bne.n	8001632 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001658:	d108      	bne.n	800166c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800165a:	4b24      	ldr	r3, [pc, #144]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	4921      	ldr	r1, [pc, #132]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001668:	4313      	orrs	r3, r2
 800166a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800166c:	4b1f      	ldr	r3, [pc, #124]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a19      	ldr	r1, [r3, #32]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167c:	430b      	orrs	r3, r1
 800167e:	491b      	ldr	r1, [pc, #108]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 8001680:	4313      	orrs	r3, r2
 8001682:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001684:	4b1b      	ldr	r3, [pc, #108]	@ (80016f4 <HAL_RCC_OscConfig+0x4cc>)
 8001686:	2201      	movs	r2, #1
 8001688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168a:	f7ff fb0f 	bl	8000cac <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001692:	f7ff fb0b 	bl	8000cac <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e03d      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016a4:	4b11      	ldr	r3, [pc, #68]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0f0      	beq.n	8001692 <HAL_RCC_OscConfig+0x46a>
 80016b0:	e035      	b.n	800171e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016b2:	4b10      	ldr	r3, [pc, #64]	@ (80016f4 <HAL_RCC_OscConfig+0x4cc>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b8:	f7ff faf8 	bl	8000cac <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c0:	f7ff faf4 	bl	8000cac <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e026      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016d2:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <HAL_RCC_OscConfig+0x4c4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f0      	bne.n	80016c0 <HAL_RCC_OscConfig+0x498>
 80016de:	e01e      	b.n	800171e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69db      	ldr	r3, [r3, #28]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d107      	bne.n	80016f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e019      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40007000 	.word	0x40007000
 80016f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001728 <HAL_RCC_OscConfig+0x500>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	429a      	cmp	r2, r3
 800170a:	d106      	bne.n	800171a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001716:	429a      	cmp	r2, r3
 8001718:	d001      	beq.n	800171e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e000      	b.n	8001720 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40021000 	.word	0x40021000

0800172c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e0d0      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001740:	4b6a      	ldr	r3, [pc, #424]	@ (80018ec <HAL_RCC_ClockConfig+0x1c0>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d910      	bls.n	8001770 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174e:	4b67      	ldr	r3, [pc, #412]	@ (80018ec <HAL_RCC_ClockConfig+0x1c0>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f023 0207 	bic.w	r2, r3, #7
 8001756:	4965      	ldr	r1, [pc, #404]	@ (80018ec <HAL_RCC_ClockConfig+0x1c0>)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	4313      	orrs	r3, r2
 800175c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800175e:	4b63      	ldr	r3, [pc, #396]	@ (80018ec <HAL_RCC_ClockConfig+0x1c0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	429a      	cmp	r2, r3
 800176a:	d001      	beq.n	8001770 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e0b8      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d020      	beq.n	80017be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	2b00      	cmp	r3, #0
 8001786:	d005      	beq.n	8001794 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001788:	4b59      	ldr	r3, [pc, #356]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	4a58      	ldr	r2, [pc, #352]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 800178e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001792:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0308 	and.w	r3, r3, #8
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017a0:	4b53      	ldr	r3, [pc, #332]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	4a52      	ldr	r2, [pc, #328]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80017a6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80017aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ac:	4b50      	ldr	r3, [pc, #320]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	494d      	ldr	r1, [pc, #308]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d040      	beq.n	800184c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d107      	bne.n	80017e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d2:	4b47      	ldr	r3, [pc, #284]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d115      	bne.n	800180a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e07f      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d107      	bne.n	80017fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ea:	4b41      	ldr	r3, [pc, #260]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d109      	bne.n	800180a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e073      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fa:	4b3d      	ldr	r3, [pc, #244]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e06b      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800180a:	4b39      	ldr	r3, [pc, #228]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f023 0203 	bic.w	r2, r3, #3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	4936      	ldr	r1, [pc, #216]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001818:	4313      	orrs	r3, r2
 800181a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800181c:	f7ff fa46 	bl	8000cac <HAL_GetTick>
 8001820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001822:	e00a      	b.n	800183a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001824:	f7ff fa42 	bl	8000cac <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001832:	4293      	cmp	r3, r2
 8001834:	d901      	bls.n	800183a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e053      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183a:	4b2d      	ldr	r3, [pc, #180]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 020c 	and.w	r2, r3, #12
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	429a      	cmp	r2, r3
 800184a:	d1eb      	bne.n	8001824 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800184c:	4b27      	ldr	r3, [pc, #156]	@ (80018ec <HAL_RCC_ClockConfig+0x1c0>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d210      	bcs.n	800187c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185a:	4b24      	ldr	r3, [pc, #144]	@ (80018ec <HAL_RCC_ClockConfig+0x1c0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f023 0207 	bic.w	r2, r3, #7
 8001862:	4922      	ldr	r1, [pc, #136]	@ (80018ec <HAL_RCC_ClockConfig+0x1c0>)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800186a:	4b20      	ldr	r3, [pc, #128]	@ (80018ec <HAL_RCC_ClockConfig+0x1c0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d001      	beq.n	800187c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e032      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d008      	beq.n	800189a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001888:	4b19      	ldr	r3, [pc, #100]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	4916      	ldr	r1, [pc, #88]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001896:	4313      	orrs	r3, r2
 8001898:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d009      	beq.n	80018ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018a6:	4b12      	ldr	r3, [pc, #72]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	490e      	ldr	r1, [pc, #56]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018ba:	f000 f821 	bl	8001900 <HAL_RCC_GetSysClockFreq>
 80018be:	4602      	mov	r2, r0
 80018c0:	4b0b      	ldr	r3, [pc, #44]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	091b      	lsrs	r3, r3, #4
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	490a      	ldr	r1, [pc, #40]	@ (80018f4 <HAL_RCC_ClockConfig+0x1c8>)
 80018cc:	5ccb      	ldrb	r3, [r1, r3]
 80018ce:	fa22 f303 	lsr.w	r3, r2, r3
 80018d2:	4a09      	ldr	r2, [pc, #36]	@ (80018f8 <HAL_RCC_ClockConfig+0x1cc>)
 80018d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018d6:	4b09      	ldr	r3, [pc, #36]	@ (80018fc <HAL_RCC_ClockConfig+0x1d0>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff f9a4 	bl	8000c28 <HAL_InitTick>

  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40022000 	.word	0x40022000
 80018f0:	40021000 	.word	0x40021000
 80018f4:	08001a54 	.word	0x08001a54
 80018f8:	20000030 	.word	0x20000030
 80018fc:	20000034 	.word	0x20000034

08001900 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001900:	b480      	push	{r7}
 8001902:	b087      	sub	sp, #28
 8001904:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	2300      	movs	r3, #0
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	2300      	movs	r3, #0
 8001914:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800191a:	4b1e      	ldr	r3, [pc, #120]	@ (8001994 <HAL_RCC_GetSysClockFreq+0x94>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f003 030c 	and.w	r3, r3, #12
 8001926:	2b04      	cmp	r3, #4
 8001928:	d002      	beq.n	8001930 <HAL_RCC_GetSysClockFreq+0x30>
 800192a:	2b08      	cmp	r3, #8
 800192c:	d003      	beq.n	8001936 <HAL_RCC_GetSysClockFreq+0x36>
 800192e:	e027      	b.n	8001980 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001930:	4b19      	ldr	r3, [pc, #100]	@ (8001998 <HAL_RCC_GetSysClockFreq+0x98>)
 8001932:	613b      	str	r3, [r7, #16]
      break;
 8001934:	e027      	b.n	8001986 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	0c9b      	lsrs	r3, r3, #18
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	4a17      	ldr	r2, [pc, #92]	@ (800199c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001940:	5cd3      	ldrb	r3, [r2, r3]
 8001942:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d010      	beq.n	8001970 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800194e:	4b11      	ldr	r3, [pc, #68]	@ (8001994 <HAL_RCC_GetSysClockFreq+0x94>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	0c5b      	lsrs	r3, r3, #17
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	4a11      	ldr	r2, [pc, #68]	@ (80019a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800195a:	5cd3      	ldrb	r3, [r2, r3]
 800195c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a0d      	ldr	r2, [pc, #52]	@ (8001998 <HAL_RCC_GetSysClockFreq+0x98>)
 8001962:	fb03 f202 	mul.w	r2, r3, r2
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	fbb2 f3f3 	udiv	r3, r2, r3
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	e004      	b.n	800197a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a0c      	ldr	r2, [pc, #48]	@ (80019a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001974:	fb02 f303 	mul.w	r3, r2, r3
 8001978:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	613b      	str	r3, [r7, #16]
      break;
 800197e:	e002      	b.n	8001986 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001980:	4b05      	ldr	r3, [pc, #20]	@ (8001998 <HAL_RCC_GetSysClockFreq+0x98>)
 8001982:	613b      	str	r3, [r7, #16]
      break;
 8001984:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001986:	693b      	ldr	r3, [r7, #16]
}
 8001988:	4618      	mov	r0, r3
 800198a:	371c      	adds	r7, #28
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	40021000 	.word	0x40021000
 8001998:	007a1200 	.word	0x007a1200
 800199c:	08001a64 	.word	0x08001a64
 80019a0:	08001a74 	.word	0x08001a74
 80019a4:	003d0900 	.word	0x003d0900

080019a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019b0:	4b0a      	ldr	r3, [pc, #40]	@ (80019dc <RCC_Delay+0x34>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a0a      	ldr	r2, [pc, #40]	@ (80019e0 <RCC_Delay+0x38>)
 80019b6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ba:	0a5b      	lsrs	r3, r3, #9
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	fb02 f303 	mul.w	r3, r2, r3
 80019c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019c4:	bf00      	nop
  }
  while (Delay --);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	1e5a      	subs	r2, r3, #1
 80019ca:	60fa      	str	r2, [r7, #12]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1f9      	bne.n	80019c4 <RCC_Delay+0x1c>
}
 80019d0:	bf00      	nop
 80019d2:	bf00      	nop
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr
 80019dc:	20000030 	.word	0x20000030
 80019e0:	10624dd3 	.word	0x10624dd3

080019e4 <memset>:
 80019e4:	4603      	mov	r3, r0
 80019e6:	4402      	add	r2, r0
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d100      	bne.n	80019ee <memset+0xa>
 80019ec:	4770      	bx	lr
 80019ee:	f803 1b01 	strb.w	r1, [r3], #1
 80019f2:	e7f9      	b.n	80019e8 <memset+0x4>

080019f4 <__libc_init_array>:
 80019f4:	b570      	push	{r4, r5, r6, lr}
 80019f6:	2600      	movs	r6, #0
 80019f8:	4d0c      	ldr	r5, [pc, #48]	@ (8001a2c <__libc_init_array+0x38>)
 80019fa:	4c0d      	ldr	r4, [pc, #52]	@ (8001a30 <__libc_init_array+0x3c>)
 80019fc:	1b64      	subs	r4, r4, r5
 80019fe:	10a4      	asrs	r4, r4, #2
 8001a00:	42a6      	cmp	r6, r4
 8001a02:	d109      	bne.n	8001a18 <__libc_init_array+0x24>
 8001a04:	f000 f81a 	bl	8001a3c <_init>
 8001a08:	2600      	movs	r6, #0
 8001a0a:	4d0a      	ldr	r5, [pc, #40]	@ (8001a34 <__libc_init_array+0x40>)
 8001a0c:	4c0a      	ldr	r4, [pc, #40]	@ (8001a38 <__libc_init_array+0x44>)
 8001a0e:	1b64      	subs	r4, r4, r5
 8001a10:	10a4      	asrs	r4, r4, #2
 8001a12:	42a6      	cmp	r6, r4
 8001a14:	d105      	bne.n	8001a22 <__libc_init_array+0x2e>
 8001a16:	bd70      	pop	{r4, r5, r6, pc}
 8001a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a1c:	4798      	blx	r3
 8001a1e:	3601      	adds	r6, #1
 8001a20:	e7ee      	b.n	8001a00 <__libc_init_array+0xc>
 8001a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a26:	4798      	blx	r3
 8001a28:	3601      	adds	r6, #1
 8001a2a:	e7f2      	b.n	8001a12 <__libc_init_array+0x1e>
 8001a2c:	08001a80 	.word	0x08001a80
 8001a30:	08001a80 	.word	0x08001a80
 8001a34:	08001a80 	.word	0x08001a80
 8001a38:	08001a84 	.word	0x08001a84

08001a3c <_init>:
 8001a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a3e:	bf00      	nop
 8001a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a42:	bc08      	pop	{r3}
 8001a44:	469e      	mov	lr, r3
 8001a46:	4770      	bx	lr

08001a48 <_fini>:
 8001a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a4a:	bf00      	nop
 8001a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a4e:	bc08      	pop	{r3}
 8001a50:	469e      	mov	lr, r3
 8001a52:	4770      	bx	lr
