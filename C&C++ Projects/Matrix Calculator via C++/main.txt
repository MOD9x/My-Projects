#include<iostream> 
#define size 10 
using namespace std; 
void MATRIXmenu(); 
void MATRIXdesplay(int x); 
int MATRIXaddition(int a[][size], int b[][size],int r1,int  c1,int r2,int c2); 
int MATRIXsubtraction(int a[][size], int b[][size],int  r1,int c1,int r2,int c2); 
int MATRIXScalar_multiplication(int a[][size], int  b[][size],int r1,int c1,int r2,int c2); 
int MATRIXmatrix_multiplication(int a[][size], int  b[][size],int r1,int c1,int r2,int c2); 
int Power_of_matrix(int a[][size], int b[][size],int r1,int  c1,int r2,int c2); 
int Transpose_of_matrix(int a[][size], int b[][size],int  r1,int c1,int r2,int c2); 
int Determinant_of_matrix(int a[][size], int b[][size],int  r1,int c1,int r2,int c2);
int Inverse_of_matrix(int a[][size], int b[][size],int r1,int  c1,int r2,int c2); 
int main(){ 
MATRIXmenu(); 
} 
void MATRIXmenu(){ 
int a=0; 
while(1){ 
cout<<"select an operation to be executed :\n 1- Matrix addition\n 2- Matrix subtraction\n 3- Matrix Scalar multiplication\n4- Matrix Matrix-matrix  multiplication\n 5- Power of a matrix\n 6- Transpose of a matrix\n 7- Determinant of a matrix\n 8- Inverse of a matrix \n"; 
cin>>a;
MATRIXdesplay(a); 
} 
} 
void MATRIXdesplay(int x){ 
int a[size][size], b[size][size], r1, c1, r2, c2, i, j; 
 cout << "Enter rows and columns for the first  matrix: \n"; 
 cin >> r1 >> c1; //matrix a size 
  
 cout << "Enter rows and columns for the second  matrix:\n "; 
 cin >> r2 >> c2; //matrix b size 
  
 cout << "Enter elements of matrix a:\n" ;  for(i = 0; i < r1; ++i) 
 for(j = 0; j < c1; ++j) 
 {
 cout << "Enter element a" << i + 1 <<","<< j + 1  << " :\n"; 
 cin >> a[i][j]; 
 } // matrix a initialization 
  
 cout << "Enter elements of matrix b:\n" ;  for(i = 0; i < r2; ++i) 
 for(j = 0; j < c2; ++j) 
 { 
 cout << "Enter element b" << i + 1 <<","<< j + 1  << " :\n"; 
 cin >> b[i][j]; 
 } // matrix b initialization 
  
cout << "matrix a :\n";  
 for(i = 0; i < r1; ++i){ 
 for(j = 0; j < c1; ++j) 
 { 
  
 cout << a[i][j]<<"\t"; 
 } 
 cout<<"\n"; 
 }// matrix a display 
  
 cout << "matrix b :\n";  
 for(i = 0; i < r2; ++i){ 
 for(j = 0; j < c2; ++j) 
 { 
  
 cout << b[i][j]<<"\t"; 
 }  
 cout<<"\n"; 
 }// matrix b display 
  
 switch(x){ 
 case 1: 
 MATRIXaddition(a,b,r1,c1,r2,c2);  break; 
case 2: 
 MATRIXsubtraction(a,b,r1,c1,r2,c2);  break;
case 3: 
 MATRIXScalar_multiplication(a,b,r1,c1,r2,c2);  break; 
case 4: 
 MATRIXmatrix_multiplication(a,b,r1,c1,r2,c2);  break; 
case 5: 
 Power_of_matrix(a,b,r1,c1,r2,c2);  break; 
case 6: 
 Transpose_of_matrix(a,b,r1,c1,r2,c2);  break; 
case 7: 
 Determinant_of_matrix(a,b,r1,c1,r2,c2);  break;
case 8: 
 Inverse_of_matrix(a,b,r1,c1,r2,c2);  break; 
} 
} 
int MATRIXaddition(int a[][size], int b[][size],int r1,int  c1,int r2,int c2){ 
if(r1!=r2 && c1!=c2){ 
cout<<"erorr: the cloumn and rows must be  equal\n"; 
return 0; 
} 
int result[size][size],i,j; 
for(i = 0; i < r1; ++i) 
 for(j = 0; j < c1; ++j) 
 result[i][j] = a[i][j] + b[i][j]; 
 // operation 
  
 cout << endl << "result of the two matrix is: " <<  endl; 
 for(i = 0; i < r1; ++i){ 
 for(j = 0; j < c1; ++j) 
 { 
 cout << result[i][j] << "\t"; 
  
 } 
 cout << endl; 
 }//Display result of the matrix 
 return 0; 
} 
int MATRIXsubtraction(int a[][size], int b[][size],int  r1,int c1,int r2,int c2){ 
if(r1!=r2 && c1!=c2){ 
cout<<"erorr: the cloumn and rows must be  equal\n"; 
return 0; 
}
int result[size][size],i,j; 
for(i = 0; i < r1; ++i) 
 for(j = 0; j < c1; ++j) 
 result[i][j] = a[i][j] - b[i][j]; 
 // operation  
  
 cout << endl << "result of the two matrix is: " <<  endl; 
 for(i = 0; i < r1; ++i){ 
 for(j = 0; j < c1; ++j) 
 { 
 cout << result[i][j] << "\t"; 
  
 } 
 cout << endl; 
 } // Display result of the matrix 
 return 0;
} 
int MATRIXScalar_multiplication(int a[][size], int  b[][size],int r1,int c1,int r2,int c2){ 
int result1[size][size],result2[size][size],i,j,x1,x2; 
cout<<"enter the variable of matrix a\n"; cin>>x1; 
cout<<"enter the variable of matrix b\n"; cin>>x2; 
for(i = 0; i < r1; ++i) 
 for(j = 0; j < c1; ++j) 
 result1[i][j] = x1*a[i][j] ; 
 // operation 1 
  
for(i = 0; i < r2; ++i) 
 for(j = 0; j < c2; ++j)
 result2[i][j] = x2*b[i][j] ; 
 // operation 2 
  
 cout << endl << "result of matrix a is: " << endl;  for(i = 0; i < r1; ++i){ 
 for(j = 0; j < c1; ++j) 
 { 
 cout << result1[i][j] << "\t"; 
  
 } 
 cout << endl; 
 } // Display result of matrix a 
  
 cout << endl << "result of matrix b is: " << endl;  for(i = 0; i < r2; ++i){ 
 for(j = 0; j < c2; ++j) 
 { 
 cout << result2[i][j] << "\t"; 
  
 }
 cout << endl; 
 } // Display result of matrix b 
 return 0; 
} 
int MATRIXmatrix_multiplication(int a[][size], int  b[][size],int r1,int c1,int r2,int c2){ 
int result[size][size],i,j,k; 
if(c1!=r2){ 
cout<<"erorr: the column of matrix a must  equal the row of matrix b\n"; 
return 0; 
} 
for(i = 0; i < r1; ++i) 
 for(j = 0; j < c2; ++j) 
 { 
 result[i][j]=0; 
 } // result initialization
for(i = 0; i < r1; ++i){ 
 for(j = 0; j < c2; ++j){ 
 for(k = 0; k < c1; ++k) 
 { 
 result[i][j] += a[i][k] * b[k][j]; 
 } } }//opertaion 
  
 cout << endl << "result of the Matrix is : " << endl;  for(i = 0; i < r1; ++i){ 
 for(j = 0; j < c2; ++j) 
 { 
 cout<< result[i][j]<<"\t"; 
 } cout << endl; 
} // Display result of the matrix 
return 0; 
} 
int Power_of_matrix(int a[][size], int b[][size],int r1,int  c1,int r2,int c2)
{
  
 int  result1x1[size][size],result2x1[size][size],result1x2[size][size],result2x2[size][size],i,j,k,x1,x2,n; 
 cout<<"enter the power of matrix a\n";  cin>>x1; 
cout<<"enter the power of matrix b\n"; 
cin>>x2; 
for(i = 0; i < r1; ++i) 
 for(j = 0; j < c2; ++j) 
 { 
 result1x1[i][j]=0; 
 } // result 1.1 cleaning 
  
 for(i = 0; i < r1; ++i) 
 for(j = 0; j < c2; ++j) 
 { 
 result2x1[i][j]=0; 
 } // result 2.1 cleaning
for(i = 0; i < r1; ++i)
{ 
    for(j = 0; j < c1; ++j)
    { 
        for(k = 0; k < c1; ++k) 
        { 
 result1x1[i][j] += a[i][k] * a[k][j];  
        } 
        
    } 
    
}// result 1.1 initialization  
  
  
 for(n = 1 ; n < (x1)-1 ; ++n)
 { 
  
    for(i = 0; i < r1; ++i) 
        for(j = 0; j < c1; ++j) 
        { 
        result1x2[i][j]=0; 
        } // result 1.2 cleaning 
  
        for(i = 0; i < r1; ++i)
        { 
            for(j = 0; j < c1; ++j)
            { 
                 for(k = 0; k < c1; ++k) 
                 { 
                 result1x2[i][j] += result1x1[i][k] * a[k][j];
                 }
            } 
            
        } // result 1.2 initialization   
        
 for(i = 0; i < r1; ++i)
 { 
        for(j = 0; j < c1; ++j)
        { 
            for(k = 0; k < c1; ++k) 
            { 
            result1x1[i][j] = result1x2[i][j];  
                
            } 
            
        } 
     
 } // result 1.1 initialization   
 }//opertaion result1  
  
 for(i = 0; i < r2; ++i)
 { 
        for(j = 0; j < c2; ++j)
        { 
            for(k = 0; k < c2; ++k) 
            { 
            result2x1[i][j] += b[i][k] * b[k][j];  
                
            } 
            
        } 
 }// result 2.1 initialization    
  
 for(n = 1 ; n < (x2)-1 ; ++n)
 { 
  
        for(i = 0; i < r2; ++i)
            for(j = 0; j < c2; ++j) 
            { 
            result2x2[i][j]=0; 
            } // result 2.2 cleaning 
 
for(i = 0; i < r2; ++i){ 
 for(j = 0; j < c2; ++j){ 
 for(k = 0; k < c2; ++k) 
 { 
 result2x2[i][j] += result2x1[i][k] * b[k][j];  } } } // result 2.2 initialization 
  
 for(i = 0; i < r2; ++i){ 
 for(j = 0; j < c2; ++j){ 
 for(k = 0; k < c2; ++k) 
 { 
 result2x1[i][j] = result2x2[i][j]; 
 } } }  
 }//opertaion result2  
  
 cout << endl << "result of the Matrix a is : " << endl;
 for(i = 0; i < r1; ++i)
 { 
 for(j = 0; j < c1; ++j) 
 { 
 cout<< result1x1[i][j]<<"\t"; 
 } cout << endl; 
} // Display result of the matrix a 
cout << endl << "result of the Matrix b is : " <<  endl; 
 for(i = 0; i < r2; ++i)
 { 
 for(j = 0; j < c2; ++j) 
 { 
 cout<< result2x1[i][j]<<"\t"; 
 } cout << endl; 
} // Display result of the matrix b  
return 0; 
}

int Transpose_of_matrix(int a[][size], int b[][size],int r1,int c1,int r2,int c2)
{
int result1[size][size],result2[size][size],i,j; 
 for ( i = 0; i < r1; ++i){ 
 for ( j = 0; j < c1; ++j) { 
 result1[j][i] = a[i][j]; 
}} // result1 operation; 
 for ( i = 0; i < r2; ++i){ 
 for ( j = 0; j < c2; ++j) { 
 result2[j][i] = b[i][j]; 
}} // result2 operation; 
cout << endl << "result of the Matrix a is : " << endl;  for(i = 0; i < c1; ++i){ 
 for(j = 0; j < r1 ; ++j) 
 { 
 cout<< result1[i][j]<<"\t";
 } cout << endl; 
} // Display result of the matrix a  
cout << endl << "result of the Matrix b is : " <<  endl; 
 for(i = 0; i < c2; ++i){ 
 for(j = 0; j < r2 ; ++j) 
 { 
 cout<< result2[i][j]<<"\t"; 
 } cout << endl; 
} // Display result of the matrix b  
 return 0; 
} 

int Determinant_of_matrix(int a[][size], int b[][size],int  r1,int c1,int r2,int c2){ 
  
 int i, j,k; 
 float ratio1 , det1 , ratio2 , det2 ; 
 for(i = 0; i < r1; i++){
 for(j = 0; j < c1; j++){ 
 if(j>i){ 
 ratio1 = (float)a[j][i]/(float)a[i][i];  for(k = 0; k < r1; k++){ 
 a[j][k] -= ratio1 * (float)a[i][k];  } 
 } 
 } 
 } // op1 
  
 for(i = 0; i < r2; i++){ 
 for(j = 0; j < c2; j++){ 
 if(j>i){ 
 ratio2 = (float)b[j][i]/(float)b[i][i];  for(k = 0; k < r2; k++){ 
 b[j][k] =(float)b[j][k] - ratio2 * (float)b[i][k];  } 
 } 
 } 
 } // op2 
 
 det1 = 1; //storage for determinant 
 for(i = 0; i < r1; i++) 
 det1 *= (float)a[i][i]; 
 cout<<"The determinant of matrix a is:"<< det1  <<"\n"; 
  
  
 det2 = 1; //storage for determinant 
 for(i = 0; i < r2; i++) 
 det2 *= (float)b[i][i]; 
 cout<<"The determinant of matrix b is:"<< det2  <<"\n"; 
 return 0; 
  
} 
int Inverse_of_matrix(int a[][size], int b[][size],int r1,int  c1,int r2,int c2){ 
int i, j; 
 float determinant1 = 0, determinant2 = 0;
  
  
 for(i = 0; i < 3; i++) 
 determinant1 = determinant1 + (a[0][i] *  (a[1][(i+1)%3] * a[2][(i+2)%3] - a[1][(i+2)%3] *  a[2][(i+1)%3])); 
  
 cout<<"\n\ndeterminant: "<<determinant1;   
 cout<<"\n\nInverse of matrix is: \n";  for(i = 0; i < 3; i++){ 
 for(j = 0; j < 3; j++) 
 cout<<((a[(j+1)%3][(i+1)%3] *  a[(j+2)%3][(i+2)%3]) - (a[(j+1)%3][(i+2)%3] *  a[(j+2)%3][(i+1)%3]))/ determinant1<<"\t"; 
  
 cout<<"\n"; 
 } // matrix a result  
  
 for(i = 0; i < 3; i++) 
 determinant2 = determinant2 + (b[0][i] *  (b[1][(i+1)%3] * b[2][(i+2)%3] - b[1][(i+2)%3] *  b[2][(i+1)%3]));
  
 cout<<"\n\ndeterminant: "<<determinant2;   
 cout<<"\n\nInverse of matrix is: \n";  for(i = 0; i < 3; i++){ 
 for(j = 0; j < 3; j++) 
 cout<<((b[(j+1)%3][(i+1)%3] *  b[(j+2)%3][(i+2)%3]) - (b[(j+1)%3][(i+2)%3] *  b[(j+2)%3][(i+1)%3]))/ determinant2<<"\t"; 
  
 cout<<"\n"; 
 } // matrix b result  
 return 0; 
}