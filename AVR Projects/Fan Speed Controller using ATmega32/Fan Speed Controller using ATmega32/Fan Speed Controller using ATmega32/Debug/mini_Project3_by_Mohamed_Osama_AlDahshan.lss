
mini_Project3_by_Mohamed_Osama_AlDahshan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012a  00800060  000028de  00002952  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002178  00000000  00000000  00002a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000f43  00000000  00000000  00004bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001c0  00000000  00000000  00005b37  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000214  00000000  00000000  00005cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002612  00000000  00000000  00005f0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014ce  00000000  00000000  0000851d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000130b  00000000  00000000  000099eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  0000acf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000307  00000000  00000000  0000aed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a1a  00000000  00000000  0000b1df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000bbf9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ed       	ldi	r30, 0xDE	; 222
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <main>
      7a:	0c 94 6d 14 	jmp	0x28da	; 0x28da <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 f1 13 	jmp	0x27e2	; 0x27e2 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a2 e8       	ldi	r26, 0x82	; 130
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 0d 14 	jmp	0x281a	; 0x281a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 fd 13 	jmp	0x27fa	; 0x27fa <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 19 14 	jmp	0x2832	; 0x2832 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 fd 13 	jmp	0x27fa	; 0x27fa <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 19 14 	jmp	0x2832	; 0x2832 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 f1 13 	jmp	0x27e2	; 0x27e2 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	82 e8       	ldi	r24, 0x82	; 130
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 0d 14 	jmp	0x281a	; 0x281a <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 f9 13 	jmp	0x27f2	; 0x27f2 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	62 e8       	ldi	r22, 0x82	; 130
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 15 14 	jmp	0x282a	; 0x282a <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 fd 13 	jmp	0x27fa	; 0x27fa <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 19 14 	jmp	0x2832	; 0x2832 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 fd 13 	jmp	0x27fa	; 0x27fa <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 19 14 	jmp	0x2832	; 0x2832 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 fd 13 	jmp	0x27fa	; 0x27fa <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 19 14 	jmp	0x2832	; 0x2832 <__epilogue_restores__+0x18>

0000089a <__floatsisf>:
     89a:	a8 e0       	ldi	r26, 0x08	; 8
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 fa 13 	jmp	0x27f4	; 0x27f4 <__prologue_saves__+0x12>
     8a6:	9b 01       	movw	r18, r22
     8a8:	ac 01       	movw	r20, r24
     8aa:	83 e0       	ldi	r24, 0x03	; 3
     8ac:	89 83       	std	Y+1, r24	; 0x01
     8ae:	da 01       	movw	r26, r20
     8b0:	c9 01       	movw	r24, r18
     8b2:	88 27       	eor	r24, r24
     8b4:	b7 fd       	sbrc	r27, 7
     8b6:	83 95       	inc	r24
     8b8:	99 27       	eor	r25, r25
     8ba:	aa 27       	eor	r26, r26
     8bc:	bb 27       	eor	r27, r27
     8be:	b8 2e       	mov	r11, r24
     8c0:	21 15       	cp	r18, r1
     8c2:	31 05       	cpc	r19, r1
     8c4:	41 05       	cpc	r20, r1
     8c6:	51 05       	cpc	r21, r1
     8c8:	19 f4       	brne	.+6      	; 0x8d0 <__floatsisf+0x36>
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	3a c0       	rjmp	.+116    	; 0x944 <__floatsisf+0xaa>
     8d0:	88 23       	and	r24, r24
     8d2:	a9 f0       	breq	.+42     	; 0x8fe <__floatsisf+0x64>
     8d4:	20 30       	cpi	r18, 0x00	; 0
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	38 07       	cpc	r19, r24
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	48 07       	cpc	r20, r24
     8de:	80 e8       	ldi	r24, 0x80	; 128
     8e0:	58 07       	cpc	r21, r24
     8e2:	29 f4       	brne	.+10     	; 0x8ee <__floatsisf+0x54>
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	9f ec       	ldi	r25, 0xCF	; 207
     8ec:	30 c0       	rjmp	.+96     	; 0x94e <__floatsisf+0xb4>
     8ee:	ee 24       	eor	r14, r14
     8f0:	ff 24       	eor	r15, r15
     8f2:	87 01       	movw	r16, r14
     8f4:	e2 1a       	sub	r14, r18
     8f6:	f3 0a       	sbc	r15, r19
     8f8:	04 0b       	sbc	r16, r20
     8fa:	15 0b       	sbc	r17, r21
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__floatsisf+0x68>
     8fe:	79 01       	movw	r14, r18
     900:	8a 01       	movw	r16, r20
     902:	8e e1       	ldi	r24, 0x1E	; 30
     904:	c8 2e       	mov	r12, r24
     906:	d1 2c       	mov	r13, r1
     908:	dc 82       	std	Y+4, r13	; 0x04
     90a:	cb 82       	std	Y+3, r12	; 0x03
     90c:	ed 82       	std	Y+5, r14	; 0x05
     90e:	fe 82       	std	Y+6, r15	; 0x06
     910:	0f 83       	std	Y+7, r16	; 0x07
     912:	18 87       	std	Y+8, r17	; 0x08
     914:	c8 01       	movw	r24, r16
     916:	b7 01       	movw	r22, r14
     918:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__clzsi2>
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	18 16       	cp	r1, r24
     920:	19 06       	cpc	r1, r25
     922:	84 f4       	brge	.+32     	; 0x944 <__floatsisf+0xaa>
     924:	08 2e       	mov	r0, r24
     926:	04 c0       	rjmp	.+8      	; 0x930 <__floatsisf+0x96>
     928:	ee 0c       	add	r14, r14
     92a:	ff 1c       	adc	r15, r15
     92c:	00 1f       	adc	r16, r16
     92e:	11 1f       	adc	r17, r17
     930:	0a 94       	dec	r0
     932:	d2 f7       	brpl	.-12     	; 0x928 <__floatsisf+0x8e>
     934:	ed 82       	std	Y+5, r14	; 0x05
     936:	fe 82       	std	Y+6, r15	; 0x06
     938:	0f 83       	std	Y+7, r16	; 0x07
     93a:	18 87       	std	Y+8, r17	; 0x08
     93c:	c8 1a       	sub	r12, r24
     93e:	d9 0a       	sbc	r13, r25
     940:	dc 82       	std	Y+4, r13	; 0x04
     942:	cb 82       	std	Y+3, r12	; 0x03
     944:	ba 82       	std	Y+2, r11	; 0x02
     946:	ce 01       	movw	r24, r28
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     94e:	28 96       	adiw	r28, 0x08	; 8
     950:	e9 e0       	ldi	r30, 0x09	; 9
     952:	0c 94 16 14 	jmp	0x282c	; 0x282c <__epilogue_restores__+0x12>

00000956 <__fixsfsi>:
     956:	ac e0       	ldi	r26, 0x0C	; 12
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	e1 eb       	ldi	r30, 0xB1	; 177
     95c:	f4 e0       	ldi	r31, 0x04	; 4
     95e:	0c 94 01 14 	jmp	0x2802	; 0x2802 <__prologue_saves__+0x20>
     962:	69 83       	std	Y+1, r22	; 0x01
     964:	7a 83       	std	Y+2, r23	; 0x02
     966:	8b 83       	std	Y+3, r24	; 0x03
     968:	9c 83       	std	Y+4, r25	; 0x04
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	be 01       	movw	r22, r28
     970:	6b 5f       	subi	r22, 0xFB	; 251
     972:	7f 4f       	sbci	r23, 0xFF	; 255
     974:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     978:	8d 81       	ldd	r24, Y+5	; 0x05
     97a:	82 30       	cpi	r24, 0x02	; 2
     97c:	61 f1       	breq	.+88     	; 0x9d6 <__fixsfsi+0x80>
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	50 f1       	brcs	.+84     	; 0x9d6 <__fixsfsi+0x80>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	21 f4       	brne	.+8      	; 0x98e <__fixsfsi+0x38>
     986:	8e 81       	ldd	r24, Y+6	; 0x06
     988:	88 23       	and	r24, r24
     98a:	51 f1       	breq	.+84     	; 0x9e0 <__fixsfsi+0x8a>
     98c:	2e c0       	rjmp	.+92     	; 0x9ea <__fixsfsi+0x94>
     98e:	2f 81       	ldd	r18, Y+7	; 0x07
     990:	38 85       	ldd	r19, Y+8	; 0x08
     992:	37 fd       	sbrc	r19, 7
     994:	20 c0       	rjmp	.+64     	; 0x9d6 <__fixsfsi+0x80>
     996:	6e 81       	ldd	r22, Y+6	; 0x06
     998:	2f 31       	cpi	r18, 0x1F	; 31
     99a:	31 05       	cpc	r19, r1
     99c:	1c f0       	brlt	.+6      	; 0x9a4 <__fixsfsi+0x4e>
     99e:	66 23       	and	r22, r22
     9a0:	f9 f0       	breq	.+62     	; 0x9e0 <__fixsfsi+0x8a>
     9a2:	23 c0       	rjmp	.+70     	; 0x9ea <__fixsfsi+0x94>
     9a4:	8e e1       	ldi	r24, 0x1E	; 30
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	82 1b       	sub	r24, r18
     9aa:	93 0b       	sbc	r25, r19
     9ac:	29 85       	ldd	r18, Y+9	; 0x09
     9ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     9b0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9b2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__fixsfsi+0x68>
     9b6:	56 95       	lsr	r21
     9b8:	47 95       	ror	r20
     9ba:	37 95       	ror	r19
     9bc:	27 95       	ror	r18
     9be:	8a 95       	dec	r24
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__fixsfsi+0x60>
     9c2:	66 23       	and	r22, r22
     9c4:	b1 f0       	breq	.+44     	; 0x9f2 <__fixsfsi+0x9c>
     9c6:	50 95       	com	r21
     9c8:	40 95       	com	r20
     9ca:	30 95       	com	r19
     9cc:	21 95       	neg	r18
     9ce:	3f 4f       	sbci	r19, 0xFF	; 255
     9d0:	4f 4f       	sbci	r20, 0xFF	; 255
     9d2:	5f 4f       	sbci	r21, 0xFF	; 255
     9d4:	0e c0       	rjmp	.+28     	; 0x9f2 <__fixsfsi+0x9c>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	09 c0       	rjmp	.+18     	; 0x9f2 <__fixsfsi+0x9c>
     9e0:	2f ef       	ldi	r18, 0xFF	; 255
     9e2:	3f ef       	ldi	r19, 0xFF	; 255
     9e4:	4f ef       	ldi	r20, 0xFF	; 255
     9e6:	5f e7       	ldi	r21, 0x7F	; 127
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e8       	ldi	r21, 0x80	; 128
     9f2:	b9 01       	movw	r22, r18
     9f4:	ca 01       	movw	r24, r20
     9f6:	2c 96       	adiw	r28, 0x0c	; 12
     9f8:	e2 e0       	ldi	r30, 0x02	; 2
     9fa:	0c 94 1d 14 	jmp	0x283a	; 0x283a <__epilogue_restores__+0x20>

000009fe <__floatunsisf>:
     9fe:	a8 e0       	ldi	r26, 0x08	; 8
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	e5 e0       	ldi	r30, 0x05	; 5
     a04:	f5 e0       	ldi	r31, 0x05	; 5
     a06:	0c 94 f9 13 	jmp	0x27f2	; 0x27f2 <__prologue_saves__+0x10>
     a0a:	7b 01       	movw	r14, r22
     a0c:	8c 01       	movw	r16, r24
     a0e:	61 15       	cp	r22, r1
     a10:	71 05       	cpc	r23, r1
     a12:	81 05       	cpc	r24, r1
     a14:	91 05       	cpc	r25, r1
     a16:	19 f4       	brne	.+6      	; 0xa1e <__floatunsisf+0x20>
     a18:	82 e0       	ldi	r24, 0x02	; 2
     a1a:	89 83       	std	Y+1, r24	; 0x01
     a1c:	60 c0       	rjmp	.+192    	; 0xade <__floatunsisf+0xe0>
     a1e:	83 e0       	ldi	r24, 0x03	; 3
     a20:	89 83       	std	Y+1, r24	; 0x01
     a22:	8e e1       	ldi	r24, 0x1E	; 30
     a24:	c8 2e       	mov	r12, r24
     a26:	d1 2c       	mov	r13, r1
     a28:	dc 82       	std	Y+4, r13	; 0x04
     a2a:	cb 82       	std	Y+3, r12	; 0x03
     a2c:	ed 82       	std	Y+5, r14	; 0x05
     a2e:	fe 82       	std	Y+6, r15	; 0x06
     a30:	0f 83       	std	Y+7, r16	; 0x07
     a32:	18 87       	std	Y+8, r17	; 0x08
     a34:	c8 01       	movw	r24, r16
     a36:	b7 01       	movw	r22, r14
     a38:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__clzsi2>
     a3c:	fc 01       	movw	r30, r24
     a3e:	31 97       	sbiw	r30, 0x01	; 1
     a40:	f7 ff       	sbrs	r31, 7
     a42:	3b c0       	rjmp	.+118    	; 0xaba <__floatunsisf+0xbc>
     a44:	22 27       	eor	r18, r18
     a46:	33 27       	eor	r19, r19
     a48:	2e 1b       	sub	r18, r30
     a4a:	3f 0b       	sbc	r19, r31
     a4c:	57 01       	movw	r10, r14
     a4e:	68 01       	movw	r12, r16
     a50:	02 2e       	mov	r0, r18
     a52:	04 c0       	rjmp	.+8      	; 0xa5c <__floatunsisf+0x5e>
     a54:	d6 94       	lsr	r13
     a56:	c7 94       	ror	r12
     a58:	b7 94       	ror	r11
     a5a:	a7 94       	ror	r10
     a5c:	0a 94       	dec	r0
     a5e:	d2 f7       	brpl	.-12     	; 0xa54 <__floatunsisf+0x56>
     a60:	40 e0       	ldi	r20, 0x00	; 0
     a62:	50 e0       	ldi	r21, 0x00	; 0
     a64:	60 e0       	ldi	r22, 0x00	; 0
     a66:	70 e0       	ldi	r23, 0x00	; 0
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	a0 e0       	ldi	r26, 0x00	; 0
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	04 c0       	rjmp	.+8      	; 0xa7a <__floatunsisf+0x7c>
     a72:	88 0f       	add	r24, r24
     a74:	99 1f       	adc	r25, r25
     a76:	aa 1f       	adc	r26, r26
     a78:	bb 1f       	adc	r27, r27
     a7a:	2a 95       	dec	r18
     a7c:	d2 f7       	brpl	.-12     	; 0xa72 <__floatunsisf+0x74>
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	a1 09       	sbc	r26, r1
     a82:	b1 09       	sbc	r27, r1
     a84:	8e 21       	and	r24, r14
     a86:	9f 21       	and	r25, r15
     a88:	a0 23       	and	r26, r16
     a8a:	b1 23       	and	r27, r17
     a8c:	00 97       	sbiw	r24, 0x00	; 0
     a8e:	a1 05       	cpc	r26, r1
     a90:	b1 05       	cpc	r27, r1
     a92:	21 f0       	breq	.+8      	; 0xa9c <__floatunsisf+0x9e>
     a94:	41 e0       	ldi	r20, 0x01	; 1
     a96:	50 e0       	ldi	r21, 0x00	; 0
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	4a 29       	or	r20, r10
     a9e:	5b 29       	or	r21, r11
     aa0:	6c 29       	or	r22, r12
     aa2:	7d 29       	or	r23, r13
     aa4:	4d 83       	std	Y+5, r20	; 0x05
     aa6:	5e 83       	std	Y+6, r21	; 0x06
     aa8:	6f 83       	std	Y+7, r22	; 0x07
     aaa:	78 87       	std	Y+8, r23	; 0x08
     aac:	8e e1       	ldi	r24, 0x1E	; 30
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	8e 1b       	sub	r24, r30
     ab2:	9f 0b       	sbc	r25, r31
     ab4:	9c 83       	std	Y+4, r25	; 0x04
     ab6:	8b 83       	std	Y+3, r24	; 0x03
     ab8:	12 c0       	rjmp	.+36     	; 0xade <__floatunsisf+0xe0>
     aba:	30 97       	sbiw	r30, 0x00	; 0
     abc:	81 f0       	breq	.+32     	; 0xade <__floatunsisf+0xe0>
     abe:	0e 2e       	mov	r0, r30
     ac0:	04 c0       	rjmp	.+8      	; 0xaca <__floatunsisf+0xcc>
     ac2:	ee 0c       	add	r14, r14
     ac4:	ff 1c       	adc	r15, r15
     ac6:	00 1f       	adc	r16, r16
     ac8:	11 1f       	adc	r17, r17
     aca:	0a 94       	dec	r0
     acc:	d2 f7       	brpl	.-12     	; 0xac2 <__floatunsisf+0xc4>
     ace:	ed 82       	std	Y+5, r14	; 0x05
     ad0:	fe 82       	std	Y+6, r15	; 0x06
     ad2:	0f 83       	std	Y+7, r16	; 0x07
     ad4:	18 87       	std	Y+8, r17	; 0x08
     ad6:	ce 1a       	sub	r12, r30
     ad8:	df 0a       	sbc	r13, r31
     ada:	dc 82       	std	Y+4, r13	; 0x04
     adc:	cb 82       	std	Y+3, r12	; 0x03
     ade:	1a 82       	std	Y+2, r1	; 0x02
     ae0:	ce 01       	movw	r24, r28
     ae2:	01 96       	adiw	r24, 0x01	; 1
     ae4:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     ae8:	28 96       	adiw	r28, 0x08	; 8
     aea:	ea e0       	ldi	r30, 0x0A	; 10
     aec:	0c 94 15 14 	jmp	0x282a	; 0x282a <__epilogue_restores__+0x10>

00000af0 <__clzsi2>:
     af0:	ef 92       	push	r14
     af2:	ff 92       	push	r15
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
     af8:	7b 01       	movw	r14, r22
     afa:	8c 01       	movw	r16, r24
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	e8 16       	cp	r14, r24
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	f8 06       	cpc	r15, r24
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	08 07       	cpc	r16, r24
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	18 07       	cpc	r17, r24
     b0c:	88 f4       	brcc	.+34     	; 0xb30 <__clzsi2+0x40>
     b0e:	8f ef       	ldi	r24, 0xFF	; 255
     b10:	e8 16       	cp	r14, r24
     b12:	f1 04       	cpc	r15, r1
     b14:	01 05       	cpc	r16, r1
     b16:	11 05       	cpc	r17, r1
     b18:	31 f0       	breq	.+12     	; 0xb26 <__clzsi2+0x36>
     b1a:	28 f0       	brcs	.+10     	; 0xb26 <__clzsi2+0x36>
     b1c:	88 e0       	ldi	r24, 0x08	; 8
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	a0 e0       	ldi	r26, 0x00	; 0
     b22:	b0 e0       	ldi	r27, 0x00	; 0
     b24:	17 c0       	rjmp	.+46     	; 0xb54 <__clzsi2+0x64>
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	12 c0       	rjmp	.+36     	; 0xb54 <__clzsi2+0x64>
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	e8 16       	cp	r14, r24
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	f8 06       	cpc	r15, r24
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	08 07       	cpc	r16, r24
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	18 07       	cpc	r17, r24
     b40:	28 f0       	brcs	.+10     	; 0xb4c <__clzsi2+0x5c>
     b42:	88 e1       	ldi	r24, 0x18	; 24
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	a0 e0       	ldi	r26, 0x00	; 0
     b48:	b0 e0       	ldi	r27, 0x00	; 0
     b4a:	04 c0       	rjmp	.+8      	; 0xb54 <__clzsi2+0x64>
     b4c:	80 e1       	ldi	r24, 0x10	; 16
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	a0 e0       	ldi	r26, 0x00	; 0
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	20 e2       	ldi	r18, 0x20	; 32
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	40 e0       	ldi	r20, 0x00	; 0
     b5a:	50 e0       	ldi	r21, 0x00	; 0
     b5c:	28 1b       	sub	r18, r24
     b5e:	39 0b       	sbc	r19, r25
     b60:	4a 0b       	sbc	r20, r26
     b62:	5b 0b       	sbc	r21, r27
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__clzsi2+0x7e>
     b66:	16 95       	lsr	r17
     b68:	07 95       	ror	r16
     b6a:	f7 94       	ror	r15
     b6c:	e7 94       	ror	r14
     b6e:	8a 95       	dec	r24
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__clzsi2+0x76>
     b72:	f7 01       	movw	r30, r14
     b74:	e6 57       	subi	r30, 0x76	; 118
     b76:	ff 4f       	sbci	r31, 0xFF	; 255
     b78:	80 81       	ld	r24, Z
     b7a:	28 1b       	sub	r18, r24
     b7c:	31 09       	sbc	r19, r1
     b7e:	41 09       	sbc	r20, r1
     b80:	51 09       	sbc	r21, r1
     b82:	c9 01       	movw	r24, r18
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	08 95       	ret

00000b8e <__pack_f>:
     b8e:	df 92       	push	r13
     b90:	ef 92       	push	r14
     b92:	ff 92       	push	r15
     b94:	0f 93       	push	r16
     b96:	1f 93       	push	r17
     b98:	fc 01       	movw	r30, r24
     b9a:	e4 80       	ldd	r14, Z+4	; 0x04
     b9c:	f5 80       	ldd	r15, Z+5	; 0x05
     b9e:	06 81       	ldd	r16, Z+6	; 0x06
     ba0:	17 81       	ldd	r17, Z+7	; 0x07
     ba2:	d1 80       	ldd	r13, Z+1	; 0x01
     ba4:	80 81       	ld	r24, Z
     ba6:	82 30       	cpi	r24, 0x02	; 2
     ba8:	48 f4       	brcc	.+18     	; 0xbbc <__pack_f+0x2e>
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	a0 e1       	ldi	r26, 0x10	; 16
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	e8 2a       	or	r14, r24
     bb4:	f9 2a       	or	r15, r25
     bb6:	0a 2b       	or	r16, r26
     bb8:	1b 2b       	or	r17, r27
     bba:	a5 c0       	rjmp	.+330    	; 0xd06 <__pack_f+0x178>
     bbc:	84 30       	cpi	r24, 0x04	; 4
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <__pack_f+0x34>
     bc0:	9f c0       	rjmp	.+318    	; 0xd00 <__pack_f+0x172>
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	21 f4       	brne	.+8      	; 0xbce <__pack_f+0x40>
     bc6:	ee 24       	eor	r14, r14
     bc8:	ff 24       	eor	r15, r15
     bca:	87 01       	movw	r16, r14
     bcc:	05 c0       	rjmp	.+10     	; 0xbd8 <__pack_f+0x4a>
     bce:	e1 14       	cp	r14, r1
     bd0:	f1 04       	cpc	r15, r1
     bd2:	01 05       	cpc	r16, r1
     bd4:	11 05       	cpc	r17, r1
     bd6:	19 f4       	brne	.+6      	; 0xbde <__pack_f+0x50>
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	96 c0       	rjmp	.+300    	; 0xd0a <__pack_f+0x17c>
     bde:	62 81       	ldd	r22, Z+2	; 0x02
     be0:	73 81       	ldd	r23, Z+3	; 0x03
     be2:	9f ef       	ldi	r25, 0xFF	; 255
     be4:	62 38       	cpi	r22, 0x82	; 130
     be6:	79 07       	cpc	r23, r25
     be8:	0c f0       	brlt	.+2      	; 0xbec <__pack_f+0x5e>
     bea:	5b c0       	rjmp	.+182    	; 0xca2 <__pack_f+0x114>
     bec:	22 e8       	ldi	r18, 0x82	; 130
     bee:	3f ef       	ldi	r19, 0xFF	; 255
     bf0:	26 1b       	sub	r18, r22
     bf2:	37 0b       	sbc	r19, r23
     bf4:	2a 31       	cpi	r18, 0x1A	; 26
     bf6:	31 05       	cpc	r19, r1
     bf8:	2c f0       	brlt	.+10     	; 0xc04 <__pack_f+0x76>
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	40 e0       	ldi	r20, 0x00	; 0
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	2a c0       	rjmp	.+84     	; 0xc58 <__pack_f+0xca>
     c04:	b8 01       	movw	r22, r16
     c06:	a7 01       	movw	r20, r14
     c08:	02 2e       	mov	r0, r18
     c0a:	04 c0       	rjmp	.+8      	; 0xc14 <__pack_f+0x86>
     c0c:	76 95       	lsr	r23
     c0e:	67 95       	ror	r22
     c10:	57 95       	ror	r21
     c12:	47 95       	ror	r20
     c14:	0a 94       	dec	r0
     c16:	d2 f7       	brpl	.-12     	; 0xc0c <__pack_f+0x7e>
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	a0 e0       	ldi	r26, 0x00	; 0
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	04 c0       	rjmp	.+8      	; 0xc2a <__pack_f+0x9c>
     c22:	88 0f       	add	r24, r24
     c24:	99 1f       	adc	r25, r25
     c26:	aa 1f       	adc	r26, r26
     c28:	bb 1f       	adc	r27, r27
     c2a:	2a 95       	dec	r18
     c2c:	d2 f7       	brpl	.-12     	; 0xc22 <__pack_f+0x94>
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	a1 09       	sbc	r26, r1
     c32:	b1 09       	sbc	r27, r1
     c34:	8e 21       	and	r24, r14
     c36:	9f 21       	and	r25, r15
     c38:	a0 23       	and	r26, r16
     c3a:	b1 23       	and	r27, r17
     c3c:	00 97       	sbiw	r24, 0x00	; 0
     c3e:	a1 05       	cpc	r26, r1
     c40:	b1 05       	cpc	r27, r1
     c42:	21 f0       	breq	.+8      	; 0xc4c <__pack_f+0xbe>
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	a0 e0       	ldi	r26, 0x00	; 0
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	9a 01       	movw	r18, r20
     c4e:	ab 01       	movw	r20, r22
     c50:	28 2b       	or	r18, r24
     c52:	39 2b       	or	r19, r25
     c54:	4a 2b       	or	r20, r26
     c56:	5b 2b       	or	r21, r27
     c58:	da 01       	movw	r26, r20
     c5a:	c9 01       	movw	r24, r18
     c5c:	8f 77       	andi	r24, 0x7F	; 127
     c5e:	90 70       	andi	r25, 0x00	; 0
     c60:	a0 70       	andi	r26, 0x00	; 0
     c62:	b0 70       	andi	r27, 0x00	; 0
     c64:	80 34       	cpi	r24, 0x40	; 64
     c66:	91 05       	cpc	r25, r1
     c68:	a1 05       	cpc	r26, r1
     c6a:	b1 05       	cpc	r27, r1
     c6c:	39 f4       	brne	.+14     	; 0xc7c <__pack_f+0xee>
     c6e:	27 ff       	sbrs	r18, 7
     c70:	09 c0       	rjmp	.+18     	; 0xc84 <__pack_f+0xf6>
     c72:	20 5c       	subi	r18, 0xC0	; 192
     c74:	3f 4f       	sbci	r19, 0xFF	; 255
     c76:	4f 4f       	sbci	r20, 0xFF	; 255
     c78:	5f 4f       	sbci	r21, 0xFF	; 255
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0xf6>
     c7c:	21 5c       	subi	r18, 0xC1	; 193
     c7e:	3f 4f       	sbci	r19, 0xFF	; 255
     c80:	4f 4f       	sbci	r20, 0xFF	; 255
     c82:	5f 4f       	sbci	r21, 0xFF	; 255
     c84:	e0 e0       	ldi	r30, 0x00	; 0
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	20 30       	cpi	r18, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	3a 07       	cpc	r19, r26
     c8e:	a0 e0       	ldi	r26, 0x00	; 0
     c90:	4a 07       	cpc	r20, r26
     c92:	a0 e4       	ldi	r26, 0x40	; 64
     c94:	5a 07       	cpc	r21, r26
     c96:	10 f0       	brcs	.+4      	; 0xc9c <__pack_f+0x10e>
     c98:	e1 e0       	ldi	r30, 0x01	; 1
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	79 01       	movw	r14, r18
     c9e:	8a 01       	movw	r16, r20
     ca0:	27 c0       	rjmp	.+78     	; 0xcf0 <__pack_f+0x162>
     ca2:	60 38       	cpi	r22, 0x80	; 128
     ca4:	71 05       	cpc	r23, r1
     ca6:	64 f5       	brge	.+88     	; 0xd00 <__pack_f+0x172>
     ca8:	fb 01       	movw	r30, r22
     caa:	e1 58       	subi	r30, 0x81	; 129
     cac:	ff 4f       	sbci	r31, 0xFF	; 255
     cae:	d8 01       	movw	r26, r16
     cb0:	c7 01       	movw	r24, r14
     cb2:	8f 77       	andi	r24, 0x7F	; 127
     cb4:	90 70       	andi	r25, 0x00	; 0
     cb6:	a0 70       	andi	r26, 0x00	; 0
     cb8:	b0 70       	andi	r27, 0x00	; 0
     cba:	80 34       	cpi	r24, 0x40	; 64
     cbc:	91 05       	cpc	r25, r1
     cbe:	a1 05       	cpc	r26, r1
     cc0:	b1 05       	cpc	r27, r1
     cc2:	39 f4       	brne	.+14     	; 0xcd2 <__pack_f+0x144>
     cc4:	e7 fe       	sbrs	r14, 7
     cc6:	0d c0       	rjmp	.+26     	; 0xce2 <__pack_f+0x154>
     cc8:	80 e4       	ldi	r24, 0x40	; 64
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	a0 e0       	ldi	r26, 0x00	; 0
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	04 c0       	rjmp	.+8      	; 0xcda <__pack_f+0x14c>
     cd2:	8f e3       	ldi	r24, 0x3F	; 63
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	a0 e0       	ldi	r26, 0x00	; 0
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e8 0e       	add	r14, r24
     cdc:	f9 1e       	adc	r15, r25
     cde:	0a 1f       	adc	r16, r26
     ce0:	1b 1f       	adc	r17, r27
     ce2:	17 ff       	sbrs	r17, 7
     ce4:	05 c0       	rjmp	.+10     	; 0xcf0 <__pack_f+0x162>
     ce6:	16 95       	lsr	r17
     ce8:	07 95       	ror	r16
     cea:	f7 94       	ror	r15
     cec:	e7 94       	ror	r14
     cee:	31 96       	adiw	r30, 0x01	; 1
     cf0:	87 e0       	ldi	r24, 0x07	; 7
     cf2:	16 95       	lsr	r17
     cf4:	07 95       	ror	r16
     cf6:	f7 94       	ror	r15
     cf8:	e7 94       	ror	r14
     cfa:	8a 95       	dec	r24
     cfc:	d1 f7       	brne	.-12     	; 0xcf2 <__pack_f+0x164>
     cfe:	05 c0       	rjmp	.+10     	; 0xd0a <__pack_f+0x17c>
     d00:	ee 24       	eor	r14, r14
     d02:	ff 24       	eor	r15, r15
     d04:	87 01       	movw	r16, r14
     d06:	ef ef       	ldi	r30, 0xFF	; 255
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	6e 2f       	mov	r22, r30
     d0c:	67 95       	ror	r22
     d0e:	66 27       	eor	r22, r22
     d10:	67 95       	ror	r22
     d12:	90 2f       	mov	r25, r16
     d14:	9f 77       	andi	r25, 0x7F	; 127
     d16:	d7 94       	ror	r13
     d18:	dd 24       	eor	r13, r13
     d1a:	d7 94       	ror	r13
     d1c:	8e 2f       	mov	r24, r30
     d1e:	86 95       	lsr	r24
     d20:	49 2f       	mov	r20, r25
     d22:	46 2b       	or	r20, r22
     d24:	58 2f       	mov	r21, r24
     d26:	5d 29       	or	r21, r13
     d28:	b7 01       	movw	r22, r14
     d2a:	ca 01       	movw	r24, r20
     d2c:	1f 91       	pop	r17
     d2e:	0f 91       	pop	r16
     d30:	ff 90       	pop	r15
     d32:	ef 90       	pop	r14
     d34:	df 90       	pop	r13
     d36:	08 95       	ret

00000d38 <__unpack_f>:
     d38:	fc 01       	movw	r30, r24
     d3a:	db 01       	movw	r26, r22
     d3c:	40 81       	ld	r20, Z
     d3e:	51 81       	ldd	r21, Z+1	; 0x01
     d40:	22 81       	ldd	r18, Z+2	; 0x02
     d42:	62 2f       	mov	r22, r18
     d44:	6f 77       	andi	r22, 0x7F	; 127
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	22 1f       	adc	r18, r18
     d4a:	22 27       	eor	r18, r18
     d4c:	22 1f       	adc	r18, r18
     d4e:	93 81       	ldd	r25, Z+3	; 0x03
     d50:	89 2f       	mov	r24, r25
     d52:	88 0f       	add	r24, r24
     d54:	82 2b       	or	r24, r18
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	99 1f       	adc	r25, r25
     d5c:	99 27       	eor	r25, r25
     d5e:	99 1f       	adc	r25, r25
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	9c 93       	st	X, r25
     d64:	11 97       	sbiw	r26, 0x01	; 1
     d66:	21 15       	cp	r18, r1
     d68:	31 05       	cpc	r19, r1
     d6a:	a9 f5       	brne	.+106    	; 0xdd6 <__unpack_f+0x9e>
     d6c:	41 15       	cp	r20, r1
     d6e:	51 05       	cpc	r21, r1
     d70:	61 05       	cpc	r22, r1
     d72:	71 05       	cpc	r23, r1
     d74:	11 f4       	brne	.+4      	; 0xd7a <__unpack_f+0x42>
     d76:	82 e0       	ldi	r24, 0x02	; 2
     d78:	37 c0       	rjmp	.+110    	; 0xde8 <__unpack_f+0xb0>
     d7a:	82 e8       	ldi	r24, 0x82	; 130
     d7c:	9f ef       	ldi	r25, 0xFF	; 255
     d7e:	13 96       	adiw	r26, 0x03	; 3
     d80:	9c 93       	st	X, r25
     d82:	8e 93       	st	-X, r24
     d84:	12 97       	sbiw	r26, 0x02	; 2
     d86:	9a 01       	movw	r18, r20
     d88:	ab 01       	movw	r20, r22
     d8a:	67 e0       	ldi	r22, 0x07	; 7
     d8c:	22 0f       	add	r18, r18
     d8e:	33 1f       	adc	r19, r19
     d90:	44 1f       	adc	r20, r20
     d92:	55 1f       	adc	r21, r21
     d94:	6a 95       	dec	r22
     d96:	d1 f7       	brne	.-12     	; 0xd8c <__unpack_f+0x54>
     d98:	83 e0       	ldi	r24, 0x03	; 3
     d9a:	8c 93       	st	X, r24
     d9c:	0d c0       	rjmp	.+26     	; 0xdb8 <__unpack_f+0x80>
     d9e:	22 0f       	add	r18, r18
     da0:	33 1f       	adc	r19, r19
     da2:	44 1f       	adc	r20, r20
     da4:	55 1f       	adc	r21, r21
     da6:	12 96       	adiw	r26, 0x02	; 2
     da8:	8d 91       	ld	r24, X+
     daa:	9c 91       	ld	r25, X
     dac:	13 97       	sbiw	r26, 0x03	; 3
     dae:	01 97       	sbiw	r24, 0x01	; 1
     db0:	13 96       	adiw	r26, 0x03	; 3
     db2:	9c 93       	st	X, r25
     db4:	8e 93       	st	-X, r24
     db6:	12 97       	sbiw	r26, 0x02	; 2
     db8:	20 30       	cpi	r18, 0x00	; 0
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	38 07       	cpc	r19, r24
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	48 07       	cpc	r20, r24
     dc2:	80 e4       	ldi	r24, 0x40	; 64
     dc4:	58 07       	cpc	r21, r24
     dc6:	58 f3       	brcs	.-42     	; 0xd9e <__unpack_f+0x66>
     dc8:	14 96       	adiw	r26, 0x04	; 4
     dca:	2d 93       	st	X+, r18
     dcc:	3d 93       	st	X+, r19
     dce:	4d 93       	st	X+, r20
     dd0:	5c 93       	st	X, r21
     dd2:	17 97       	sbiw	r26, 0x07	; 7
     dd4:	08 95       	ret
     dd6:	2f 3f       	cpi	r18, 0xFF	; 255
     dd8:	31 05       	cpc	r19, r1
     dda:	79 f4       	brne	.+30     	; 0xdfa <__unpack_f+0xc2>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	19 f4       	brne	.+6      	; 0xdec <__unpack_f+0xb4>
     de6:	84 e0       	ldi	r24, 0x04	; 4
     de8:	8c 93       	st	X, r24
     dea:	08 95       	ret
     dec:	64 ff       	sbrs	r22, 4
     dee:	03 c0       	rjmp	.+6      	; 0xdf6 <__unpack_f+0xbe>
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	8c 93       	st	X, r24
     df4:	12 c0       	rjmp	.+36     	; 0xe1a <__unpack_f+0xe2>
     df6:	1c 92       	st	X, r1
     df8:	10 c0       	rjmp	.+32     	; 0xe1a <__unpack_f+0xe2>
     dfa:	2f 57       	subi	r18, 0x7F	; 127
     dfc:	30 40       	sbci	r19, 0x00	; 0
     dfe:	13 96       	adiw	r26, 0x03	; 3
     e00:	3c 93       	st	X, r19
     e02:	2e 93       	st	-X, r18
     e04:	12 97       	sbiw	r26, 0x02	; 2
     e06:	83 e0       	ldi	r24, 0x03	; 3
     e08:	8c 93       	st	X, r24
     e0a:	87 e0       	ldi	r24, 0x07	; 7
     e0c:	44 0f       	add	r20, r20
     e0e:	55 1f       	adc	r21, r21
     e10:	66 1f       	adc	r22, r22
     e12:	77 1f       	adc	r23, r23
     e14:	8a 95       	dec	r24
     e16:	d1 f7       	brne	.-12     	; 0xe0c <__unpack_f+0xd4>
     e18:	70 64       	ori	r23, 0x40	; 64
     e1a:	14 96       	adiw	r26, 0x04	; 4
     e1c:	4d 93       	st	X+, r20
     e1e:	5d 93       	st	X+, r21
     e20:	6d 93       	st	X+, r22
     e22:	7c 93       	st	X, r23
     e24:	17 97       	sbiw	r26, 0x07	; 7
     e26:	08 95       	ret

00000e28 <__fpcmp_parts_f>:
     e28:	1f 93       	push	r17
     e2a:	dc 01       	movw	r26, r24
     e2c:	fb 01       	movw	r30, r22
     e2e:	9c 91       	ld	r25, X
     e30:	92 30       	cpi	r25, 0x02	; 2
     e32:	08 f4       	brcc	.+2      	; 0xe36 <__fpcmp_parts_f+0xe>
     e34:	47 c0       	rjmp	.+142    	; 0xec4 <__fpcmp_parts_f+0x9c>
     e36:	80 81       	ld	r24, Z
     e38:	82 30       	cpi	r24, 0x02	; 2
     e3a:	08 f4       	brcc	.+2      	; 0xe3e <__fpcmp_parts_f+0x16>
     e3c:	43 c0       	rjmp	.+134    	; 0xec4 <__fpcmp_parts_f+0x9c>
     e3e:	94 30       	cpi	r25, 0x04	; 4
     e40:	51 f4       	brne	.+20     	; 0xe56 <__fpcmp_parts_f+0x2e>
     e42:	11 96       	adiw	r26, 0x01	; 1
     e44:	1c 91       	ld	r17, X
     e46:	84 30       	cpi	r24, 0x04	; 4
     e48:	99 f5       	brne	.+102    	; 0xeb0 <__fpcmp_parts_f+0x88>
     e4a:	81 81       	ldd	r24, Z+1	; 0x01
     e4c:	68 2f       	mov	r22, r24
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	61 1b       	sub	r22, r17
     e52:	71 09       	sbc	r23, r1
     e54:	3f c0       	rjmp	.+126    	; 0xed4 <__fpcmp_parts_f+0xac>
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	21 f0       	breq	.+8      	; 0xe62 <__fpcmp_parts_f+0x3a>
     e5a:	92 30       	cpi	r25, 0x02	; 2
     e5c:	31 f4       	brne	.+12     	; 0xe6a <__fpcmp_parts_f+0x42>
     e5e:	82 30       	cpi	r24, 0x02	; 2
     e60:	b9 f1       	breq	.+110    	; 0xed0 <__fpcmp_parts_f+0xa8>
     e62:	81 81       	ldd	r24, Z+1	; 0x01
     e64:	88 23       	and	r24, r24
     e66:	89 f1       	breq	.+98     	; 0xeca <__fpcmp_parts_f+0xa2>
     e68:	2d c0       	rjmp	.+90     	; 0xec4 <__fpcmp_parts_f+0x9c>
     e6a:	11 96       	adiw	r26, 0x01	; 1
     e6c:	1c 91       	ld	r17, X
     e6e:	11 97       	sbiw	r26, 0x01	; 1
     e70:	82 30       	cpi	r24, 0x02	; 2
     e72:	f1 f0       	breq	.+60     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e74:	81 81       	ldd	r24, Z+1	; 0x01
     e76:	18 17       	cp	r17, r24
     e78:	d9 f4       	brne	.+54     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e7a:	12 96       	adiw	r26, 0x02	; 2
     e7c:	2d 91       	ld	r18, X+
     e7e:	3c 91       	ld	r19, X
     e80:	13 97       	sbiw	r26, 0x03	; 3
     e82:	82 81       	ldd	r24, Z+2	; 0x02
     e84:	93 81       	ldd	r25, Z+3	; 0x03
     e86:	82 17       	cp	r24, r18
     e88:	93 07       	cpc	r25, r19
     e8a:	94 f0       	brlt	.+36     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e8c:	28 17       	cp	r18, r24
     e8e:	39 07       	cpc	r19, r25
     e90:	bc f0       	brlt	.+46     	; 0xec0 <__fpcmp_parts_f+0x98>
     e92:	14 96       	adiw	r26, 0x04	; 4
     e94:	8d 91       	ld	r24, X+
     e96:	9d 91       	ld	r25, X+
     e98:	0d 90       	ld	r0, X+
     e9a:	bc 91       	ld	r27, X
     e9c:	a0 2d       	mov	r26, r0
     e9e:	24 81       	ldd	r18, Z+4	; 0x04
     ea0:	35 81       	ldd	r19, Z+5	; 0x05
     ea2:	46 81       	ldd	r20, Z+6	; 0x06
     ea4:	57 81       	ldd	r21, Z+7	; 0x07
     ea6:	28 17       	cp	r18, r24
     ea8:	39 07       	cpc	r19, r25
     eaa:	4a 07       	cpc	r20, r26
     eac:	5b 07       	cpc	r21, r27
     eae:	18 f4       	brcc	.+6      	; 0xeb6 <__fpcmp_parts_f+0x8e>
     eb0:	11 23       	and	r17, r17
     eb2:	41 f0       	breq	.+16     	; 0xec4 <__fpcmp_parts_f+0x9c>
     eb4:	0a c0       	rjmp	.+20     	; 0xeca <__fpcmp_parts_f+0xa2>
     eb6:	82 17       	cp	r24, r18
     eb8:	93 07       	cpc	r25, r19
     eba:	a4 07       	cpc	r26, r20
     ebc:	b5 07       	cpc	r27, r21
     ebe:	40 f4       	brcc	.+16     	; 0xed0 <__fpcmp_parts_f+0xa8>
     ec0:	11 23       	and	r17, r17
     ec2:	19 f0       	breq	.+6      	; 0xeca <__fpcmp_parts_f+0xa2>
     ec4:	61 e0       	ldi	r22, 0x01	; 1
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	05 c0       	rjmp	.+10     	; 0xed4 <__fpcmp_parts_f+0xac>
     eca:	6f ef       	ldi	r22, 0xFF	; 255
     ecc:	7f ef       	ldi	r23, 0xFF	; 255
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <__fpcmp_parts_f+0xac>
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	70 e0       	ldi	r23, 0x00	; 0
     ed4:	cb 01       	movw	r24, r22
     ed6:	1f 91       	pop	r17
     ed8:	08 95       	ret

00000eda <ADC_init>:
#include"common_macros.h"

#include<avr/io.h>

void ADC_init( const ADC_ConfigType * Config_Ptr )
{
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	00 d0       	rcall	.+0      	; 0xee0 <ADC_init+0x6>
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
     ee4:	9a 83       	std	Y+2, r25	; 0x02
     ee6:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Vref selection
	 */
	ADMUX = (Config_Ptr->ref_volt);
     ee8:	a7 e2       	ldi	r26, 0x27	; 39
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e9 81       	ldd	r30, Y+1	; 0x01
     eee:	fa 81       	ldd	r31, Y+2	; 0x02
     ef0:	80 81       	ld	r24, Z
     ef2:	8c 93       	st	X, r24

	ADCSRA = (Config_Ptr->prescaler) | (1<<ADEN);
     ef4:	a6 e2       	ldi	r26, 0x26	; 38
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e9 81       	ldd	r30, Y+1	; 0x01
     efa:	fa 81       	ldd	r31, Y+2	; 0x02
     efc:	81 81       	ldd	r24, Z+1	; 0x01
     efe:	80 68       	ori	r24, 0x80	; 128
     f00:	8c 93       	st	X, r24
	/* pre-scaler selection and ADC module enabled */

}
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	08 95       	ret

00000f0c <ADC_readChannel>:

uint16 ADC_readChannel( uint8 ch_num)
{
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	0f 92       	push	r0
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
     f16:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * channel selection
	 */
	ADMUX = (ADMUX & 0xE0) | (ch_num & 0x07) ;
     f18:	a7 e2       	ldi	r26, 0x27	; 39
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e7 e2       	ldi	r30, 0x27	; 39
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	98 2f       	mov	r25, r24
     f24:	90 7e       	andi	r25, 0xE0	; 224
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	87 70       	andi	r24, 0x07	; 7
     f2a:	89 2b       	or	r24, r25
     f2c:	8c 93       	st	X, r24

	/*
	 * start conversion
	 */
	SET_BIT(ADCSRA,ADSC);
     f2e:	a6 e2       	ldi	r26, 0x26	; 38
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e6 e2       	ldi	r30, 0x26	; 38
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	80 64       	ori	r24, 0x40	; 64
     f3a:	8c 93       	st	X, r24

	/*
	 * polling until conversion is complete
	 */
	while( BIT_IS_CLEAR(ADCSRA,ADIF) );
     f3c:	e6 e2       	ldi	r30, 0x26	; 38
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	88 2f       	mov	r24, r24
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	80 71       	andi	r24, 0x10	; 16
     f48:	90 70       	andi	r25, 0x00	; 0
     f4a:	00 97       	sbiw	r24, 0x00	; 0
     f4c:	b9 f3       	breq	.-18     	; 0xf3c <ADC_readChannel+0x30>

	/*
	 * clearing the flag
	 */
	SET_BIT(ADCSRA,ADIF);
     f4e:	a6 e2       	ldi	r26, 0x26	; 38
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e6 e2       	ldi	r30, 0x26	; 38
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	80 61       	ori	r24, 0x10	; 16
     f5a:	8c 93       	st	X, r24
	/*
	 * read value of conversion
	 */
	return ADC;
     f5c:	e4 e2       	ldi	r30, 0x24	; 36
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	91 81       	ldd	r25, Z+1	; 0x01
}
     f64:	0f 90       	pop	r0
     f66:	cf 91       	pop	r28
     f68:	df 91       	pop	r29
     f6a:	08 95       	ret

00000f6c <DcMotor_Init>:
#include "DcMotor.h"
#include"PWM.h"


void DcMotor_Init(void)
{
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DCMOTOR_PORT1,DCMOTOR_PIN1, PIN_OUTPUT);
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	60 e0       	ldi	r22, 0x00	; 0
     f78:	41 e0       	ldi	r20, 0x01	; 1
     f7a:	0e 94 4b 09 	call	0x1296	; 0x1296 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DCMOTOR_PORT2,DCMOTOR_PIN2, PIN_OUTPUT);
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	61 e0       	ldi	r22, 0x01	; 1
     f82:	41 e0       	ldi	r20, 0x01	; 1
     f84:	0e 94 4b 09 	call	0x1296	; 0x1296 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DCMOTOR_ENABLE_PORT,DCMOTOR_ENABLE_PIN, PIN_OUTPUT);
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	63 e0       	ldi	r22, 0x03	; 3
     f8c:	41 e0       	ldi	r20, 0x01	; 1
     f8e:	0e 94 4b 09 	call	0x1296	; 0x1296 <GPIO_setupPinDirection>

	/*
	 * configure Pin1 , Pin2 and enable pin as O/P pins
	 */

	GPIO_writePin(DCMOTOR_PORT1,DCMOTOR_PIN1, LOGIC_LOW );
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	60 e0       	ldi	r22, 0x00	; 0
     f96:	40 e0       	ldi	r20, 0x00	; 0
     f98:	0e 94 36 0a 	call	0x146c	; 0x146c <GPIO_writePin>
	GPIO_writePin(DCMOTOR_PORT2,DCMOTOR_PIN2, LOGIC_LOW );
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	61 e0       	ldi	r22, 0x01	; 1
     fa0:	40 e0       	ldi	r20, 0x00	; 0
     fa2:	0e 94 36 0a 	call	0x146c	; 0x146c <GPIO_writePin>
	GPIO_writePin(DCMOTOR_ENABLE_PORT,DCMOTOR_ENABLE_PIN, LOGIC_LOW );
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	63 e0       	ldi	r22, 0x03	; 3
     faa:	40 e0       	ldi	r20, 0x00	; 0
     fac:	0e 94 36 0a 	call	0x146c	; 0x146c <GPIO_writePin>

	/*
	 * clearing Pin1 , Pin2 and enable pin ( Motor is OFF )
	 */
}
     fb0:	cf 91       	pop	r28
     fb2:	df 91       	pop	r29
     fb4:	08 95       	ret

00000fb6 <DcMotor_Rotate>:

void DcMotor_Rotate( DcMotor_State state , uint8 speed)
{
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	00 d0       	rcall	.+0      	; 0xfbc <DcMotor_Rotate+0x6>
     fbc:	00 d0       	rcall	.+0      	; 0xfbe <DcMotor_Rotate+0x8>
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
     fc2:	89 83       	std	Y+1, r24	; 0x01
     fc4:	6a 83       	std	Y+2, r22	; 0x02
	switch(state)
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	3c 83       	std	Y+4, r19	; 0x04
     fce:	2b 83       	std	Y+3, r18	; 0x03
     fd0:	8b 81       	ldd	r24, Y+3	; 0x03
     fd2:	9c 81       	ldd	r25, Y+4	; 0x04
     fd4:	81 30       	cpi	r24, 0x01	; 1
     fd6:	91 05       	cpc	r25, r1
     fd8:	a1 f0       	breq	.+40     	; 0x1002 <DcMotor_Rotate+0x4c>
     fda:	2b 81       	ldd	r18, Y+3	; 0x03
     fdc:	3c 81       	ldd	r19, Y+4	; 0x04
     fde:	22 30       	cpi	r18, 0x02	; 2
     fe0:	31 05       	cpc	r19, r1
     fe2:	a9 f0       	breq	.+42     	; 0x100e <DcMotor_Rotate+0x58>
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	9c 81       	ldd	r25, Y+4	; 0x04
     fe8:	00 97       	sbiw	r24, 0x00	; 0
     fea:	b1 f4       	brne	.+44     	; 0x1018 <DcMotor_Rotate+0x62>
	{
	case 0 :
		GPIO_writePin(DCMOTOR_PORT1,DCMOTOR_PIN1, LOGIC_LOW );
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	60 e0       	ldi	r22, 0x00	; 0
     ff0:	40 e0       	ldi	r20, 0x00	; 0
     ff2:	0e 94 36 0a 	call	0x146c	; 0x146c <GPIO_writePin>
		GPIO_writePin(DCMOTOR_PORT2,DCMOTOR_PIN2, LOGIC_LOW );
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	61 e0       	ldi	r22, 0x01	; 1
     ffa:	40 e0       	ldi	r20, 0x00	; 0
     ffc:	0e 94 36 0a 	call	0x146c	; 0x146c <GPIO_writePin>
    1000:	0b c0       	rjmp	.+22     	; 0x1018 <DcMotor_Rotate+0x62>
		/*
		 * clearing Pin1 , Pin2 ( Motor is OFF )
		 */

	case 1 :
			GPIO_writePin(DCMOTOR_PORT2,DCMOTOR_PIN2, LOGIC_HIGH );
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	61 e0       	ldi	r22, 0x01	; 1
    1006:	41 e0       	ldi	r20, 0x01	; 1
    1008:	0e 94 36 0a 	call	0x146c	; 0x146c <GPIO_writePin>
    100c:	05 c0       	rjmp	.+10     	; 0x1018 <DcMotor_Rotate+0x62>
			/*
			 * SET Pin2 ( Motor is ON Clockwise )
			 */

	case 2 :
			GPIO_writePin(DCMOTOR_PORT1,DCMOTOR_PIN1, LOGIC_HIGH );
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	60 e0       	ldi	r22, 0x00	; 0
    1012:	41 e0       	ldi	r20, 0x01	; 1
    1014:	0e 94 36 0a 	call	0x146c	; 0x146c <GPIO_writePin>
			 * SET Pin1 ( Motor is ON Anti-Clockwise )
			 */

	}

	PWM_Timer0_Start(speed);
    1018:	8a 81       	ldd	r24, Y+2	; 0x02
    101a:	0e 94 15 09 	call	0x122a	; 0x122a <PWM_Timer0_Start>
	/*
	 * calling PWM to Control the speed of the Motor
	 */
}
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <LM35_GetTemperature>:
/*
 * Description :
 * Function responsible for calculate the temperature from the ADC digital value.
 */
uint8 LM35_GetTemperature(void)
{
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	00 d0       	rcall	.+0      	; 0x1032 <LM35_GetTemperature+0x6>
    1032:	0f 92       	push	r0
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
	uint8 temp_value = 0;
    1038:	1b 82       	std	Y+3, r1	; 0x03

	uint16 adc_value = 0;
    103a:	1a 82       	std	Y+2, r1	; 0x02
    103c:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the temperature sensor is connected */
	adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
    103e:	82 e0       	ldi	r24, 0x02	; 2
    1040:	0e 94 86 07 	call	0xf0c	; 0xf0c <ADC_readChannel>
    1044:	9a 83       	std	Y+2, r25	; 0x02
    1046:	89 83       	std	Y+1, r24	; 0x01

	/* Calculate the temperature from the ADC value*/
	temp_value = (uint8)(((uint32)adc_value*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	9a 81       	ldd	r25, Y+2	; 0x02
    104c:	cc 01       	movw	r24, r24
    104e:	a0 e0       	ldi	r26, 0x00	; 0
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	26 e9       	ldi	r18, 0x96	; 150
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	40 e0       	ldi	r20, 0x00	; 0
    1058:	50 e0       	ldi	r21, 0x00	; 0
    105a:	bc 01       	movw	r22, r24
    105c:	cd 01       	movw	r24, r26
    105e:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__mulsi3>
    1062:	dc 01       	movw	r26, r24
    1064:	cb 01       	movw	r24, r22
    1066:	bc 01       	movw	r22, r24
    1068:	cd 01       	movw	r24, r26
    106a:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatunsisf>
    106e:	dc 01       	movw	r26, r24
    1070:	cb 01       	movw	r24, r22
    1072:	bc 01       	movw	r22, r24
    1074:	cd 01       	movw	r24, r26
    1076:	2a e0       	ldi	r18, 0x0A	; 10
    1078:	37 ed       	ldi	r19, 0xD7	; 215
    107a:	43 e2       	ldi	r20, 0x23	; 35
    107c:	50 e4       	ldi	r21, 0x40	; 64
    107e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1082:	dc 01       	movw	r26, r24
    1084:	cb 01       	movw	r24, r22
    1086:	bc 01       	movw	r22, r24
    1088:	cd 01       	movw	r24, r26
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	30 ed       	ldi	r19, 0xD0	; 208
    108e:	4f eb       	ldi	r20, 0xBF	; 191
    1090:	54 e4       	ldi	r21, 0x44	; 68
    1092:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1096:	dc 01       	movw	r26, r24
    1098:	cb 01       	movw	r24, r22
    109a:	bc 01       	movw	r22, r24
    109c:	cd 01       	movw	r24, r26
    109e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10a2:	dc 01       	movw	r26, r24
    10a4:	cb 01       	movw	r24, r22
    10a6:	8b 83       	std	Y+3, r24	; 0x03

	return temp_value;
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03

}
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	cf 91       	pop	r28
    10b2:	df 91       	pop	r29
    10b4:	08 95       	ret

000010b6 <main>:
#include "adc.h"
#include "LM35.h"


int main()
{
    10b6:	df 93       	push	r29
    10b8:	cf 93       	push	r28
    10ba:	00 d0       	rcall	.+0      	; 0x10bc <main+0x6>
    10bc:	0f 92       	push	r0
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
	 uint8 Temperature=0 ;
    10c2:	19 82       	std	Y+1, r1	; 0x01

	 ADC_ConfigType ConfigType ={InternalVref_ADC,ADC_F8};
    10c4:	80 ec       	ldi	r24, 0xC0	; 192
    10c6:	8a 83       	std	Y+2, r24	; 0x02
    10c8:	83 e0       	ldi	r24, 0x03	; 3
    10ca:	8b 83       	std	Y+3, r24	; 0x03

	 DcMotor_Init(); /* initialize DC Motor driver */
    10cc:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DcMotor_Init>

	 LCD_init(); /* initialize LCD driver */
    10d0:	0e 94 89 0c 	call	0x1912	; 0x1912 <LCD_init>

	 ADC_init(&ConfigType); /* initialize ADC driver */
    10d4:	ce 01       	movw	r24, r28
    10d6:	02 96       	adiw	r24, 0x02	; 2
    10d8:	0e 94 6d 07 	call	0xeda	; 0xeda <ADC_init>


	  LCD_displayStringRowColumn( 0 , 4 ,"FAN is OFF");
    10dc:	20 e6       	ldi	r18, 0x60	; 96
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	64 e0       	ldi	r22, 0x04	; 4
    10e4:	a9 01       	movw	r20, r18
    10e6:	0e 94 6e 11 	call	0x22dc	; 0x22dc <LCD_displayStringRowColumn>

	  LCD_displayStringRowColumn( 1 , 4 ,"Temp =    C");
    10ea:	2b e6       	ldi	r18, 0x6B	; 107
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	64 e0       	ldi	r22, 0x04	; 4
    10f2:	a9 01       	movw	r20, r18
    10f4:	0e 94 6e 11 	call	0x22dc	; 0x22dc <LCD_displayStringRowColumn>

	  LCD_intgerToStringRowColumn(1,11,Temperature);
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	6b e0       	ldi	r22, 0x0B	; 11
    1102:	a9 01       	movw	r20, r18
    1104:	0e 94 b4 11 	call	0x2368	; 0x2368 <LCD_intgerToStringRowColumn>


	 while(1)
	 {
		 Temperature = LM35_GetTemperature();
    1108:	0e 94 16 08 	call	0x102c	; 0x102c <LM35_GetTemperature>
    110c:	89 83       	std	Y+1, r24	; 0x01

		 if( Temperature<30 )
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	8e 31       	cpi	r24, 0x1E	; 30
    1112:	e0 f4       	brcc	.+56     	; 0x114c <main+0x96>
		 {
			 DcMotor_Rotate( DC_MOTOR_STOP , 0 );
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	60 e0       	ldi	r22, 0x00	; 0
    1118:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DcMotor_Rotate>
			 LCD_displayStringRowColumn( 0 , 4 ,"FAN is OFF");
    111c:	20 e6       	ldi	r18, 0x60	; 96
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	64 e0       	ldi	r22, 0x04	; 4
    1124:	a9 01       	movw	r20, r18
    1126:	0e 94 6e 11 	call	0x22dc	; 0x22dc <LCD_displayStringRowColumn>
			 LCD_intgerToStringRowColumn(1,11,Temperature);
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	6b e0       	ldi	r22, 0x0B	; 11
    1134:	a9 01       	movw	r20, r18
    1136:	0e 94 b4 11 	call	0x2368	; 0x2368 <LCD_intgerToStringRowColumn>

		 	 if(Temperature==9)
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	89 30       	cpi	r24, 0x09	; 9
    113e:	21 f7       	brne	.-56     	; 0x1108 <main+0x52>
		 	 {
		 		 LCD_displayCharacterRowColumn(1,12,' ');
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	6c e0       	ldi	r22, 0x0C	; 12
    1144:	40 e2       	ldi	r20, 0x20	; 32
    1146:	0e 94 dd 11 	call	0x23ba	; 0x23ba <LCD_displayCharacterRowColumn>
    114a:	de cf       	rjmp	.-68     	; 0x1108 <main+0x52>
		 	 }

		 }

		 else if( Temperature >= 30 && Temperature < 60)
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	8e 31       	cpi	r24, 0x1E	; 30
    1150:	b8 f0       	brcs	.+46     	; 0x1180 <main+0xca>
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	8c 33       	cpi	r24, 0x3C	; 60
    1156:	a0 f4       	brcc	.+40     	; 0x1180 <main+0xca>
		  {
		 	 DcMotor_Rotate( DC_MOTOR_CW , 25 );
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	69 e1       	ldi	r22, 0x19	; 25
    115c:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DcMotor_Rotate>
		 	 LCD_displayStringRowColumn( 0 , 4 ,"FAN is ON ");
    1160:	27 e7       	ldi	r18, 0x77	; 119
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	64 e0       	ldi	r22, 0x04	; 4
    1168:	a9 01       	movw	r20, r18
    116a:	0e 94 6e 11 	call	0x22dc	; 0x22dc <LCD_displayStringRowColumn>
		 	 LCD_intgerToStringRowColumn(1,11,Temperature);
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	6b e0       	ldi	r22, 0x0B	; 11
    1178:	a9 01       	movw	r20, r18
    117a:	0e 94 b4 11 	call	0x2368	; 0x2368 <LCD_intgerToStringRowColumn>
    117e:	c4 cf       	rjmp	.-120    	; 0x1108 <main+0x52>
		  }

		 else if( Temperature >= 60 && Temperature < 90)
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	8c 33       	cpi	r24, 0x3C	; 60
    1184:	b8 f0       	brcs	.+46     	; 0x11b4 <main+0xfe>
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	8a 35       	cpi	r24, 0x5A	; 90
    118a:	a0 f4       	brcc	.+40     	; 0x11b4 <main+0xfe>
		  {
		 	 DcMotor_Rotate( DC_MOTOR_CW , 50 );
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	62 e3       	ldi	r22, 0x32	; 50
    1190:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DcMotor_Rotate>
		 	 LCD_displayStringRowColumn( 0 , 4 ,"FAN is ON ");
    1194:	27 e7       	ldi	r18, 0x77	; 119
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	64 e0       	ldi	r22, 0x04	; 4
    119c:	a9 01       	movw	r20, r18
    119e:	0e 94 6e 11 	call	0x22dc	; 0x22dc <LCD_displayStringRowColumn>
		 	 LCD_intgerToStringRowColumn(1,11,Temperature);
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	28 2f       	mov	r18, r24
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	6b e0       	ldi	r22, 0x0B	; 11
    11ac:	a9 01       	movw	r20, r18
    11ae:	0e 94 b4 11 	call	0x2368	; 0x2368 <LCD_intgerToStringRowColumn>
    11b2:	aa cf       	rjmp	.-172    	; 0x1108 <main+0x52>
		  }

		 else if( Temperature >= 90 && Temperature < 120)
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	8a 35       	cpi	r24, 0x5A	; 90
    11b8:	00 f1       	brcs	.+64     	; 0x11fa <main+0x144>
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	88 37       	cpi	r24, 0x78	; 120
    11be:	e8 f4       	brcc	.+58     	; 0x11fa <main+0x144>
		  {
		 	 DcMotor_Rotate( DC_MOTOR_CW , 75 );
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	6b e4       	ldi	r22, 0x4B	; 75
    11c4:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DcMotor_Rotate>
		 	 LCD_displayStringRowColumn( 0 , 4 ,"FAN is ON ");
    11c8:	27 e7       	ldi	r18, 0x77	; 119
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	64 e0       	ldi	r22, 0x04	; 4
    11d0:	a9 01       	movw	r20, r18
    11d2:	0e 94 6e 11 	call	0x22dc	; 0x22dc <LCD_displayStringRowColumn>
		 	 LCD_intgerToStringRowColumn(1,11,Temperature);
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	6b e0       	ldi	r22, 0x0B	; 11
    11e0:	a9 01       	movw	r20, r18
    11e2:	0e 94 b4 11 	call	0x2368	; 0x2368 <LCD_intgerToStringRowColumn>

		 	 if(Temperature==99)
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	83 36       	cpi	r24, 0x63	; 99
    11ea:	09 f0       	breq	.+2      	; 0x11ee <main+0x138>
    11ec:	8d cf       	rjmp	.-230    	; 0x1108 <main+0x52>
		 	 {
		 		LCD_displayCharacterRowColumn(1,13,' ');
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	6d e0       	ldi	r22, 0x0D	; 13
    11f2:	40 e2       	ldi	r20, 0x20	; 32
    11f4:	0e 94 dd 11 	call	0x23ba	; 0x23ba <LCD_displayCharacterRowColumn>
    11f8:	87 cf       	rjmp	.-242    	; 0x1108 <main+0x52>
		 	 }
		  }

		 else if( Temperature >= 120 )
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	88 37       	cpi	r24, 0x78	; 120
    11fe:	08 f4       	brcc	.+2      	; 0x1202 <main+0x14c>
    1200:	83 cf       	rjmp	.-250    	; 0x1108 <main+0x52>
		  {
		 	 DcMotor_Rotate( DC_MOTOR_CW , 100 );
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	64 e6       	ldi	r22, 0x64	; 100
    1206:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DcMotor_Rotate>
		 	 LCD_displayStringRowColumn( 0 , 4 ,"FAN is ON ");
    120a:	27 e7       	ldi	r18, 0x77	; 119
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	64 e0       	ldi	r22, 0x04	; 4
    1212:	a9 01       	movw	r20, r18
    1214:	0e 94 6e 11 	call	0x22dc	; 0x22dc <LCD_displayStringRowColumn>
		 	 LCD_intgerToStringRowColumn(1,11,Temperature);
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	6b e0       	ldi	r22, 0x0B	; 11
    1222:	a9 01       	movw	r20, r18
    1224:	0e 94 b4 11 	call	0x2368	; 0x2368 <LCD_intgerToStringRowColumn>
    1228:	6f cf       	rjmp	.-290    	; 0x1108 <main+0x52>

0000122a <PWM_Timer0_Start>:
#include "common_macros.h"
#include"PWM.h"


void PWM_Timer0_Start(uint8 duty_cycle)
{
    122a:	0f 93       	push	r16
    122c:	1f 93       	push	r17
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	0f 92       	push	r0
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
    1238:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01) ;
    123a:	e3 e5       	ldi	r30, 0x53	; 83
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	8a e6       	ldi	r24, 0x6A	; 106
    1240:	80 83       	st	Z, r24
	/*
	 *      MODE : FAST PWM | NON-INVERTING | N=8
	 */

	TCNT0=0; // initial value
    1242:	e2 e5       	ldi	r30, 0x52	; 82
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	10 82       	st	Z, r1

	OCR0= (duty_cycle * (2.55) );
    1248:	0c e5       	ldi	r16, 0x5C	; 92
    124a:	10 e0       	ldi	r17, 0x00	; 0
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	88 2f       	mov	r24, r24
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	aa 27       	eor	r26, r26
    1254:	97 fd       	sbrc	r25, 7
    1256:	a0 95       	com	r26
    1258:	ba 2f       	mov	r27, r26
    125a:	bc 01       	movw	r22, r24
    125c:	cd 01       	movw	r24, r26
    125e:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    1262:	dc 01       	movw	r26, r24
    1264:	cb 01       	movw	r24, r22
    1266:	bc 01       	movw	r22, r24
    1268:	cd 01       	movw	r24, r26
    126a:	23 e3       	ldi	r18, 0x33	; 51
    126c:	33 e3       	ldi	r19, 0x33	; 51
    126e:	43 e2       	ldi	r20, 0x23	; 35
    1270:	50 e4       	ldi	r21, 0x40	; 64
    1272:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1276:	dc 01       	movw	r26, r24
    1278:	cb 01       	movw	r24, r22
    127a:	bc 01       	movw	r22, r24
    127c:	cd 01       	movw	r24, r26
    127e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1282:	dc 01       	movw	r26, r24
    1284:	cb 01       	movw	r24, r22
    1286:	f8 01       	movw	r30, r16
    1288:	80 83       	st	Z, r24

	 duty cycle = 0% - 100% , OCR0 = 0-255

	 */

}
    128a:	0f 90       	pop	r0
    128c:	cf 91       	pop	r28
    128e:	df 91       	pop	r29
    1290:	1f 91       	pop	r17
    1292:	0f 91       	pop	r16
    1294:	08 95       	ret

00001296 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	00 d0       	rcall	.+0      	; 0x129c <GPIO_setupPinDirection+0x6>
    129c:	00 d0       	rcall	.+0      	; 0x129e <GPIO_setupPinDirection+0x8>
    129e:	0f 92       	push	r0
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
    12a4:	89 83       	std	Y+1, r24	; 0x01
    12a6:	6a 83       	std	Y+2, r22	; 0x02
    12a8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	88 30       	cpi	r24, 0x08	; 8
    12ae:	08 f0       	brcs	.+2      	; 0x12b2 <GPIO_setupPinDirection+0x1c>
    12b0:	d5 c0       	rjmp	.+426    	; 0x145c <GPIO_setupPinDirection+0x1c6>
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	84 30       	cpi	r24, 0x04	; 4
    12b6:	08 f0       	brcs	.+2      	; 0x12ba <GPIO_setupPinDirection+0x24>
    12b8:	d1 c0       	rjmp	.+418    	; 0x145c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	3d 83       	std	Y+5, r19	; 0x05
    12c2:	2c 83       	std	Y+4, r18	; 0x04
    12c4:	8c 81       	ldd	r24, Y+4	; 0x04
    12c6:	9d 81       	ldd	r25, Y+5	; 0x05
    12c8:	81 30       	cpi	r24, 0x01	; 1
    12ca:	91 05       	cpc	r25, r1
    12cc:	09 f4       	brne	.+2      	; 0x12d0 <GPIO_setupPinDirection+0x3a>
    12ce:	43 c0       	rjmp	.+134    	; 0x1356 <GPIO_setupPinDirection+0xc0>
    12d0:	2c 81       	ldd	r18, Y+4	; 0x04
    12d2:	3d 81       	ldd	r19, Y+5	; 0x05
    12d4:	22 30       	cpi	r18, 0x02	; 2
    12d6:	31 05       	cpc	r19, r1
    12d8:	2c f4       	brge	.+10     	; 0x12e4 <GPIO_setupPinDirection+0x4e>
    12da:	8c 81       	ldd	r24, Y+4	; 0x04
    12dc:	9d 81       	ldd	r25, Y+5	; 0x05
    12de:	00 97       	sbiw	r24, 0x00	; 0
    12e0:	71 f0       	breq	.+28     	; 0x12fe <GPIO_setupPinDirection+0x68>
    12e2:	bc c0       	rjmp	.+376    	; 0x145c <GPIO_setupPinDirection+0x1c6>
    12e4:	2c 81       	ldd	r18, Y+4	; 0x04
    12e6:	3d 81       	ldd	r19, Y+5	; 0x05
    12e8:	22 30       	cpi	r18, 0x02	; 2
    12ea:	31 05       	cpc	r19, r1
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <GPIO_setupPinDirection+0x5a>
    12ee:	5f c0       	rjmp	.+190    	; 0x13ae <GPIO_setupPinDirection+0x118>
    12f0:	8c 81       	ldd	r24, Y+4	; 0x04
    12f2:	9d 81       	ldd	r25, Y+5	; 0x05
    12f4:	83 30       	cpi	r24, 0x03	; 3
    12f6:	91 05       	cpc	r25, r1
    12f8:	09 f4       	brne	.+2      	; 0x12fc <GPIO_setupPinDirection+0x66>
    12fa:	85 c0       	rjmp	.+266    	; 0x1406 <GPIO_setupPinDirection+0x170>
    12fc:	af c0       	rjmp	.+350    	; 0x145c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	81 30       	cpi	r24, 0x01	; 1
    1302:	a1 f4       	brne	.+40     	; 0x132c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1304:	aa e3       	ldi	r26, 0x3A	; 58
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	ea e3       	ldi	r30, 0x3A	; 58
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	48 2f       	mov	r20, r24
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	02 2e       	mov	r0, r18
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <GPIO_setupPinDirection+0x8c>
    131e:	88 0f       	add	r24, r24
    1320:	99 1f       	adc	r25, r25
    1322:	0a 94       	dec	r0
    1324:	e2 f7       	brpl	.-8      	; 0x131e <GPIO_setupPinDirection+0x88>
    1326:	84 2b       	or	r24, r20
    1328:	8c 93       	st	X, r24
    132a:	98 c0       	rjmp	.+304    	; 0x145c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    132c:	aa e3       	ldi	r26, 0x3A	; 58
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	ea e3       	ldi	r30, 0x3A	; 58
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	48 2f       	mov	r20, r24
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	02 2e       	mov	r0, r18
    1344:	02 c0       	rjmp	.+4      	; 0x134a <GPIO_setupPinDirection+0xb4>
    1346:	88 0f       	add	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	0a 94       	dec	r0
    134c:	e2 f7       	brpl	.-8      	; 0x1346 <GPIO_setupPinDirection+0xb0>
    134e:	80 95       	com	r24
    1350:	84 23       	and	r24, r20
    1352:	8c 93       	st	X, r24
    1354:	83 c0       	rjmp	.+262    	; 0x145c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	81 30       	cpi	r24, 0x01	; 1
    135a:	a1 f4       	brne	.+40     	; 0x1384 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    135c:	a7 e3       	ldi	r26, 0x37	; 55
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e7 e3       	ldi	r30, 0x37	; 55
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	48 2f       	mov	r20, r24
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	02 2e       	mov	r0, r18
    1374:	02 c0       	rjmp	.+4      	; 0x137a <GPIO_setupPinDirection+0xe4>
    1376:	88 0f       	add	r24, r24
    1378:	99 1f       	adc	r25, r25
    137a:	0a 94       	dec	r0
    137c:	e2 f7       	brpl	.-8      	; 0x1376 <GPIO_setupPinDirection+0xe0>
    137e:	84 2b       	or	r24, r20
    1380:	8c 93       	st	X, r24
    1382:	6c c0       	rjmp	.+216    	; 0x145c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1384:	a7 e3       	ldi	r26, 0x37	; 55
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	e7 e3       	ldi	r30, 0x37	; 55
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	48 2f       	mov	r20, r24
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	02 2e       	mov	r0, r18
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <GPIO_setupPinDirection+0x10c>
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	0a 94       	dec	r0
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <GPIO_setupPinDirection+0x108>
    13a6:	80 95       	com	r24
    13a8:	84 23       	and	r24, r20
    13aa:	8c 93       	st	X, r24
    13ac:	57 c0       	rjmp	.+174    	; 0x145c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	81 30       	cpi	r24, 0x01	; 1
    13b2:	a1 f4       	brne	.+40     	; 0x13dc <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    13b4:	a4 e3       	ldi	r26, 0x34	; 52
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e4 e3       	ldi	r30, 0x34	; 52
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	48 2f       	mov	r20, r24
    13c0:	8a 81       	ldd	r24, Y+2	; 0x02
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	02 2e       	mov	r0, r18
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <GPIO_setupPinDirection+0x13c>
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	0a 94       	dec	r0
    13d4:	e2 f7       	brpl	.-8      	; 0x13ce <GPIO_setupPinDirection+0x138>
    13d6:	84 2b       	or	r24, r20
    13d8:	8c 93       	st	X, r24
    13da:	40 c0       	rjmp	.+128    	; 0x145c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    13dc:	a4 e3       	ldi	r26, 0x34	; 52
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e4 e3       	ldi	r30, 0x34	; 52
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	48 2f       	mov	r20, r24
    13e8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	02 2e       	mov	r0, r18
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <GPIO_setupPinDirection+0x164>
    13f6:	88 0f       	add	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	0a 94       	dec	r0
    13fc:	e2 f7       	brpl	.-8      	; 0x13f6 <GPIO_setupPinDirection+0x160>
    13fe:	80 95       	com	r24
    1400:	84 23       	and	r24, r20
    1402:	8c 93       	st	X, r24
    1404:	2b c0       	rjmp	.+86     	; 0x145c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	a1 f4       	brne	.+40     	; 0x1434 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    140c:	a1 e3       	ldi	r26, 0x31	; 49
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e1 e3       	ldi	r30, 0x31	; 49
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	48 2f       	mov	r20, r24
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	02 2e       	mov	r0, r18
    1424:	02 c0       	rjmp	.+4      	; 0x142a <GPIO_setupPinDirection+0x194>
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	0a 94       	dec	r0
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <GPIO_setupPinDirection+0x190>
    142e:	84 2b       	or	r24, r20
    1430:	8c 93       	st	X, r24
    1432:	14 c0       	rjmp	.+40     	; 0x145c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1434:	a1 e3       	ldi	r26, 0x31	; 49
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e1 e3       	ldi	r30, 0x31	; 49
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	48 2f       	mov	r20, r24
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	02 2e       	mov	r0, r18
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <GPIO_setupPinDirection+0x1bc>
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	0a 94       	dec	r0
    1454:	e2 f7       	brpl	.-8      	; 0x144e <GPIO_setupPinDirection+0x1b8>
    1456:	80 95       	com	r24
    1458:	84 23       	and	r24, r20
    145a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	08 95       	ret

0000146c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	00 d0       	rcall	.+0      	; 0x1472 <GPIO_writePin+0x6>
    1472:	00 d0       	rcall	.+0      	; 0x1474 <GPIO_writePin+0x8>
    1474:	0f 92       	push	r0
    1476:	cd b7       	in	r28, 0x3d	; 61
    1478:	de b7       	in	r29, 0x3e	; 62
    147a:	89 83       	std	Y+1, r24	; 0x01
    147c:	6a 83       	std	Y+2, r22	; 0x02
    147e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	88 30       	cpi	r24, 0x08	; 8
    1484:	08 f0       	brcs	.+2      	; 0x1488 <GPIO_writePin+0x1c>
    1486:	d5 c0       	rjmp	.+426    	; 0x1632 <GPIO_writePin+0x1c6>
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	84 30       	cpi	r24, 0x04	; 4
    148c:	08 f0       	brcs	.+2      	; 0x1490 <GPIO_writePin+0x24>
    148e:	d1 c0       	rjmp	.+418    	; 0x1632 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1490:	89 81       	ldd	r24, Y+1	; 0x01
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	3d 83       	std	Y+5, r19	; 0x05
    1498:	2c 83       	std	Y+4, r18	; 0x04
    149a:	8c 81       	ldd	r24, Y+4	; 0x04
    149c:	9d 81       	ldd	r25, Y+5	; 0x05
    149e:	81 30       	cpi	r24, 0x01	; 1
    14a0:	91 05       	cpc	r25, r1
    14a2:	09 f4       	brne	.+2      	; 0x14a6 <GPIO_writePin+0x3a>
    14a4:	43 c0       	rjmp	.+134    	; 0x152c <GPIO_writePin+0xc0>
    14a6:	2c 81       	ldd	r18, Y+4	; 0x04
    14a8:	3d 81       	ldd	r19, Y+5	; 0x05
    14aa:	22 30       	cpi	r18, 0x02	; 2
    14ac:	31 05       	cpc	r19, r1
    14ae:	2c f4       	brge	.+10     	; 0x14ba <GPIO_writePin+0x4e>
    14b0:	8c 81       	ldd	r24, Y+4	; 0x04
    14b2:	9d 81       	ldd	r25, Y+5	; 0x05
    14b4:	00 97       	sbiw	r24, 0x00	; 0
    14b6:	71 f0       	breq	.+28     	; 0x14d4 <GPIO_writePin+0x68>
    14b8:	bc c0       	rjmp	.+376    	; 0x1632 <GPIO_writePin+0x1c6>
    14ba:	2c 81       	ldd	r18, Y+4	; 0x04
    14bc:	3d 81       	ldd	r19, Y+5	; 0x05
    14be:	22 30       	cpi	r18, 0x02	; 2
    14c0:	31 05       	cpc	r19, r1
    14c2:	09 f4       	brne	.+2      	; 0x14c6 <GPIO_writePin+0x5a>
    14c4:	5f c0       	rjmp	.+190    	; 0x1584 <GPIO_writePin+0x118>
    14c6:	8c 81       	ldd	r24, Y+4	; 0x04
    14c8:	9d 81       	ldd	r25, Y+5	; 0x05
    14ca:	83 30       	cpi	r24, 0x03	; 3
    14cc:	91 05       	cpc	r25, r1
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <GPIO_writePin+0x66>
    14d0:	85 c0       	rjmp	.+266    	; 0x15dc <GPIO_writePin+0x170>
    14d2:	af c0       	rjmp	.+350    	; 0x1632 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	81 30       	cpi	r24, 0x01	; 1
    14d8:	a1 f4       	brne	.+40     	; 0x1502 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    14da:	ab e3       	ldi	r26, 0x3B	; 59
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	eb e3       	ldi	r30, 0x3B	; 59
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	48 2f       	mov	r20, r24
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	02 2e       	mov	r0, r18
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <GPIO_writePin+0x8c>
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	0a 94       	dec	r0
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <GPIO_writePin+0x88>
    14fc:	84 2b       	or	r24, r20
    14fe:	8c 93       	st	X, r24
    1500:	98 c0       	rjmp	.+304    	; 0x1632 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1502:	ab e3       	ldi	r26, 0x3B	; 59
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	eb e3       	ldi	r30, 0x3B	; 59
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	48 2f       	mov	r20, r24
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	02 2e       	mov	r0, r18
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <GPIO_writePin+0xb4>
    151c:	88 0f       	add	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	0a 94       	dec	r0
    1522:	e2 f7       	brpl	.-8      	; 0x151c <GPIO_writePin+0xb0>
    1524:	80 95       	com	r24
    1526:	84 23       	and	r24, r20
    1528:	8c 93       	st	X, r24
    152a:	83 c0       	rjmp	.+262    	; 0x1632 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    152c:	8b 81       	ldd	r24, Y+3	; 0x03
    152e:	81 30       	cpi	r24, 0x01	; 1
    1530:	a1 f4       	brne	.+40     	; 0x155a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1532:	a8 e3       	ldi	r26, 0x38	; 56
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	e8 e3       	ldi	r30, 0x38	; 56
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	48 2f       	mov	r20, r24
    153e:	8a 81       	ldd	r24, Y+2	; 0x02
    1540:	28 2f       	mov	r18, r24
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	02 2e       	mov	r0, r18
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <GPIO_writePin+0xe4>
    154c:	88 0f       	add	r24, r24
    154e:	99 1f       	adc	r25, r25
    1550:	0a 94       	dec	r0
    1552:	e2 f7       	brpl	.-8      	; 0x154c <GPIO_writePin+0xe0>
    1554:	84 2b       	or	r24, r20
    1556:	8c 93       	st	X, r24
    1558:	6c c0       	rjmp	.+216    	; 0x1632 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    155a:	a8 e3       	ldi	r26, 0x38	; 56
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	e8 e3       	ldi	r30, 0x38	; 56
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	48 2f       	mov	r20, r24
    1566:	8a 81       	ldd	r24, Y+2	; 0x02
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	02 2e       	mov	r0, r18
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <GPIO_writePin+0x10c>
    1574:	88 0f       	add	r24, r24
    1576:	99 1f       	adc	r25, r25
    1578:	0a 94       	dec	r0
    157a:	e2 f7       	brpl	.-8      	; 0x1574 <GPIO_writePin+0x108>
    157c:	80 95       	com	r24
    157e:	84 23       	and	r24, r20
    1580:	8c 93       	st	X, r24
    1582:	57 c0       	rjmp	.+174    	; 0x1632 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
    1586:	81 30       	cpi	r24, 0x01	; 1
    1588:	a1 f4       	brne	.+40     	; 0x15b2 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    158a:	a5 e3       	ldi	r26, 0x35	; 53
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	e5 e3       	ldi	r30, 0x35	; 53
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	48 2f       	mov	r20, r24
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	28 2f       	mov	r18, r24
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	02 2e       	mov	r0, r18
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <GPIO_writePin+0x13c>
    15a4:	88 0f       	add	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	0a 94       	dec	r0
    15aa:	e2 f7       	brpl	.-8      	; 0x15a4 <GPIO_writePin+0x138>
    15ac:	84 2b       	or	r24, r20
    15ae:	8c 93       	st	X, r24
    15b0:	40 c0       	rjmp	.+128    	; 0x1632 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    15b2:	a5 e3       	ldi	r26, 0x35	; 53
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	e5 e3       	ldi	r30, 0x35	; 53
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	48 2f       	mov	r20, r24
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	28 2f       	mov	r18, r24
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	02 2e       	mov	r0, r18
    15ca:	02 c0       	rjmp	.+4      	; 0x15d0 <GPIO_writePin+0x164>
    15cc:	88 0f       	add	r24, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	0a 94       	dec	r0
    15d2:	e2 f7       	brpl	.-8      	; 0x15cc <GPIO_writePin+0x160>
    15d4:	80 95       	com	r24
    15d6:	84 23       	and	r24, r20
    15d8:	8c 93       	st	X, r24
    15da:	2b c0       	rjmp	.+86     	; 0x1632 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	81 30       	cpi	r24, 0x01	; 1
    15e0:	a1 f4       	brne	.+40     	; 0x160a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    15e2:	a2 e3       	ldi	r26, 0x32	; 50
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	e2 e3       	ldi	r30, 0x32	; 50
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	48 2f       	mov	r20, r24
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	02 2e       	mov	r0, r18
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <GPIO_writePin+0x194>
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	0a 94       	dec	r0
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <GPIO_writePin+0x190>
    1604:	84 2b       	or	r24, r20
    1606:	8c 93       	st	X, r24
    1608:	14 c0       	rjmp	.+40     	; 0x1632 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    160a:	a2 e3       	ldi	r26, 0x32	; 50
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	e2 e3       	ldi	r30, 0x32	; 50
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	48 2f       	mov	r20, r24
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	02 2e       	mov	r0, r18
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <GPIO_writePin+0x1bc>
    1624:	88 0f       	add	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	0a 94       	dec	r0
    162a:	e2 f7       	brpl	.-8      	; 0x1624 <GPIO_writePin+0x1b8>
    162c:	80 95       	com	r24
    162e:	84 23       	and	r24, r20
    1630:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	cf 91       	pop	r28
    163e:	df 91       	pop	r29
    1640:	08 95       	ret

00001642 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1642:	df 93       	push	r29
    1644:	cf 93       	push	r28
    1646:	00 d0       	rcall	.+0      	; 0x1648 <GPIO_readPin+0x6>
    1648:	00 d0       	rcall	.+0      	; 0x164a <GPIO_readPin+0x8>
    164a:	0f 92       	push	r0
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
    1650:	8a 83       	std	Y+2, r24	; 0x02
    1652:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1654:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	88 30       	cpi	r24, 0x08	; 8
    165a:	08 f0       	brcs	.+2      	; 0x165e <GPIO_readPin+0x1c>
    165c:	84 c0       	rjmp	.+264    	; 0x1766 <GPIO_readPin+0x124>
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	84 30       	cpi	r24, 0x04	; 4
    1662:	08 f0       	brcs	.+2      	; 0x1666 <GPIO_readPin+0x24>
    1664:	80 c0       	rjmp	.+256    	; 0x1766 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1666:	8a 81       	ldd	r24, Y+2	; 0x02
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	3d 83       	std	Y+5, r19	; 0x05
    166e:	2c 83       	std	Y+4, r18	; 0x04
    1670:	4c 81       	ldd	r20, Y+4	; 0x04
    1672:	5d 81       	ldd	r21, Y+5	; 0x05
    1674:	41 30       	cpi	r20, 0x01	; 1
    1676:	51 05       	cpc	r21, r1
    1678:	79 f1       	breq	.+94     	; 0x16d8 <GPIO_readPin+0x96>
    167a:	8c 81       	ldd	r24, Y+4	; 0x04
    167c:	9d 81       	ldd	r25, Y+5	; 0x05
    167e:	82 30       	cpi	r24, 0x02	; 2
    1680:	91 05       	cpc	r25, r1
    1682:	34 f4       	brge	.+12     	; 0x1690 <GPIO_readPin+0x4e>
    1684:	2c 81       	ldd	r18, Y+4	; 0x04
    1686:	3d 81       	ldd	r19, Y+5	; 0x05
    1688:	21 15       	cp	r18, r1
    168a:	31 05       	cpc	r19, r1
    168c:	69 f0       	breq	.+26     	; 0x16a8 <GPIO_readPin+0x66>
    168e:	6b c0       	rjmp	.+214    	; 0x1766 <GPIO_readPin+0x124>
    1690:	4c 81       	ldd	r20, Y+4	; 0x04
    1692:	5d 81       	ldd	r21, Y+5	; 0x05
    1694:	42 30       	cpi	r20, 0x02	; 2
    1696:	51 05       	cpc	r21, r1
    1698:	b9 f1       	breq	.+110    	; 0x1708 <GPIO_readPin+0xc6>
    169a:	8c 81       	ldd	r24, Y+4	; 0x04
    169c:	9d 81       	ldd	r25, Y+5	; 0x05
    169e:	83 30       	cpi	r24, 0x03	; 3
    16a0:	91 05       	cpc	r25, r1
    16a2:	09 f4       	brne	.+2      	; 0x16a6 <GPIO_readPin+0x64>
    16a4:	49 c0       	rjmp	.+146    	; 0x1738 <GPIO_readPin+0xf6>
    16a6:	5f c0       	rjmp	.+190    	; 0x1766 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    16a8:	e9 e3       	ldi	r30, 0x39	; 57
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	88 2f       	mov	r24, r24
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	a9 01       	movw	r20, r18
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <GPIO_readPin+0x7e>
    16bc:	55 95       	asr	r21
    16be:	47 95       	ror	r20
    16c0:	8a 95       	dec	r24
    16c2:	e2 f7       	brpl	.-8      	; 0x16bc <GPIO_readPin+0x7a>
    16c4:	ca 01       	movw	r24, r20
    16c6:	81 70       	andi	r24, 0x01	; 1
    16c8:	90 70       	andi	r25, 0x00	; 0
    16ca:	88 23       	and	r24, r24
    16cc:	19 f0       	breq	.+6      	; 0x16d4 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	89 83       	std	Y+1, r24	; 0x01
    16d2:	49 c0       	rjmp	.+146    	; 0x1766 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    16d4:	19 82       	std	Y+1, r1	; 0x01
    16d6:	47 c0       	rjmp	.+142    	; 0x1766 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    16d8:	e6 e3       	ldi	r30, 0x36	; 54
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	28 2f       	mov	r18, r24
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	88 2f       	mov	r24, r24
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	a9 01       	movw	r20, r18
    16ea:	02 c0       	rjmp	.+4      	; 0x16f0 <GPIO_readPin+0xae>
    16ec:	55 95       	asr	r21
    16ee:	47 95       	ror	r20
    16f0:	8a 95       	dec	r24
    16f2:	e2 f7       	brpl	.-8      	; 0x16ec <GPIO_readPin+0xaa>
    16f4:	ca 01       	movw	r24, r20
    16f6:	81 70       	andi	r24, 0x01	; 1
    16f8:	90 70       	andi	r25, 0x00	; 0
    16fa:	88 23       	and	r24, r24
    16fc:	19 f0       	breq	.+6      	; 0x1704 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	89 83       	std	Y+1, r24	; 0x01
    1702:	31 c0       	rjmp	.+98     	; 0x1766 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1704:	19 82       	std	Y+1, r1	; 0x01
    1706:	2f c0       	rjmp	.+94     	; 0x1766 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1708:	e3 e3       	ldi	r30, 0x33	; 51
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	88 2f       	mov	r24, r24
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	a9 01       	movw	r20, r18
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <GPIO_readPin+0xde>
    171c:	55 95       	asr	r21
    171e:	47 95       	ror	r20
    1720:	8a 95       	dec	r24
    1722:	e2 f7       	brpl	.-8      	; 0x171c <GPIO_readPin+0xda>
    1724:	ca 01       	movw	r24, r20
    1726:	81 70       	andi	r24, 0x01	; 1
    1728:	90 70       	andi	r25, 0x00	; 0
    172a:	88 23       	and	r24, r24
    172c:	19 f0       	breq	.+6      	; 0x1734 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	89 83       	std	Y+1, r24	; 0x01
    1732:	19 c0       	rjmp	.+50     	; 0x1766 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1734:	19 82       	std	Y+1, r1	; 0x01
    1736:	17 c0       	rjmp	.+46     	; 0x1766 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1738:	e0 e3       	ldi	r30, 0x30	; 48
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	8b 81       	ldd	r24, Y+3	; 0x03
    1744:	88 2f       	mov	r24, r24
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	a9 01       	movw	r20, r18
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <GPIO_readPin+0x10e>
    174c:	55 95       	asr	r21
    174e:	47 95       	ror	r20
    1750:	8a 95       	dec	r24
    1752:	e2 f7       	brpl	.-8      	; 0x174c <GPIO_readPin+0x10a>
    1754:	ca 01       	movw	r24, r20
    1756:	81 70       	andi	r24, 0x01	; 1
    1758:	90 70       	andi	r25, 0x00	; 0
    175a:	88 23       	and	r24, r24
    175c:	19 f0       	breq	.+6      	; 0x1764 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	89 83       	std	Y+1, r24	; 0x01
    1762:	01 c0       	rjmp	.+2      	; 0x1766 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1764:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1766:	89 81       	ldd	r24, Y+1	; 0x01
}
    1768:	0f 90       	pop	r0
    176a:	0f 90       	pop	r0
    176c:	0f 90       	pop	r0
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	cf 91       	pop	r28
    1774:	df 91       	pop	r29
    1776:	08 95       	ret

00001778 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1778:	df 93       	push	r29
    177a:	cf 93       	push	r28
    177c:	00 d0       	rcall	.+0      	; 0x177e <GPIO_setupPortDirection+0x6>
    177e:	00 d0       	rcall	.+0      	; 0x1780 <GPIO_setupPortDirection+0x8>
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    1784:	89 83       	std	Y+1, r24	; 0x01
    1786:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	84 30       	cpi	r24, 0x04	; 4
    178c:	90 f5       	brcc	.+100    	; 0x17f2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    178e:	89 81       	ldd	r24, Y+1	; 0x01
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	3c 83       	std	Y+4, r19	; 0x04
    1796:	2b 83       	std	Y+3, r18	; 0x03
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	9c 81       	ldd	r25, Y+4	; 0x04
    179c:	81 30       	cpi	r24, 0x01	; 1
    179e:	91 05       	cpc	r25, r1
    17a0:	d1 f0       	breq	.+52     	; 0x17d6 <GPIO_setupPortDirection+0x5e>
    17a2:	2b 81       	ldd	r18, Y+3	; 0x03
    17a4:	3c 81       	ldd	r19, Y+4	; 0x04
    17a6:	22 30       	cpi	r18, 0x02	; 2
    17a8:	31 05       	cpc	r19, r1
    17aa:	2c f4       	brge	.+10     	; 0x17b6 <GPIO_setupPortDirection+0x3e>
    17ac:	8b 81       	ldd	r24, Y+3	; 0x03
    17ae:	9c 81       	ldd	r25, Y+4	; 0x04
    17b0:	00 97       	sbiw	r24, 0x00	; 0
    17b2:	61 f0       	breq	.+24     	; 0x17cc <GPIO_setupPortDirection+0x54>
    17b4:	1e c0       	rjmp	.+60     	; 0x17f2 <GPIO_setupPortDirection+0x7a>
    17b6:	2b 81       	ldd	r18, Y+3	; 0x03
    17b8:	3c 81       	ldd	r19, Y+4	; 0x04
    17ba:	22 30       	cpi	r18, 0x02	; 2
    17bc:	31 05       	cpc	r19, r1
    17be:	81 f0       	breq	.+32     	; 0x17e0 <GPIO_setupPortDirection+0x68>
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	9c 81       	ldd	r25, Y+4	; 0x04
    17c4:	83 30       	cpi	r24, 0x03	; 3
    17c6:	91 05       	cpc	r25, r1
    17c8:	81 f0       	breq	.+32     	; 0x17ea <GPIO_setupPortDirection+0x72>
    17ca:	13 c0       	rjmp	.+38     	; 0x17f2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    17cc:	ea e3       	ldi	r30, 0x3A	; 58
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	80 83       	st	Z, r24
    17d4:	0e c0       	rjmp	.+28     	; 0x17f2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    17d6:	e7 e3       	ldi	r30, 0x37	; 55
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	8a 81       	ldd	r24, Y+2	; 0x02
    17dc:	80 83       	st	Z, r24
    17de:	09 c0       	rjmp	.+18     	; 0x17f2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    17e0:	e4 e3       	ldi	r30, 0x34	; 52
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
    17e6:	80 83       	st	Z, r24
    17e8:	04 c0       	rjmp	.+8      	; 0x17f2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    17ea:	e1 e3       	ldi	r30, 0x31	; 49
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	8a 81       	ldd	r24, Y+2	; 0x02
    17f0:	80 83       	st	Z, r24
			break;
		}
	}
}
    17f2:	0f 90       	pop	r0
    17f4:	0f 90       	pop	r0
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	cf 91       	pop	r28
    17fc:	df 91       	pop	r29
    17fe:	08 95       	ret

00001800 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1800:	df 93       	push	r29
    1802:	cf 93       	push	r28
    1804:	00 d0       	rcall	.+0      	; 0x1806 <GPIO_writePort+0x6>
    1806:	00 d0       	rcall	.+0      	; 0x1808 <GPIO_writePort+0x8>
    1808:	cd b7       	in	r28, 0x3d	; 61
    180a:	de b7       	in	r29, 0x3e	; 62
    180c:	89 83       	std	Y+1, r24	; 0x01
    180e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1810:	89 81       	ldd	r24, Y+1	; 0x01
    1812:	84 30       	cpi	r24, 0x04	; 4
    1814:	90 f5       	brcc	.+100    	; 0x187a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	28 2f       	mov	r18, r24
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	3c 83       	std	Y+4, r19	; 0x04
    181e:	2b 83       	std	Y+3, r18	; 0x03
    1820:	8b 81       	ldd	r24, Y+3	; 0x03
    1822:	9c 81       	ldd	r25, Y+4	; 0x04
    1824:	81 30       	cpi	r24, 0x01	; 1
    1826:	91 05       	cpc	r25, r1
    1828:	d1 f0       	breq	.+52     	; 0x185e <GPIO_writePort+0x5e>
    182a:	2b 81       	ldd	r18, Y+3	; 0x03
    182c:	3c 81       	ldd	r19, Y+4	; 0x04
    182e:	22 30       	cpi	r18, 0x02	; 2
    1830:	31 05       	cpc	r19, r1
    1832:	2c f4       	brge	.+10     	; 0x183e <GPIO_writePort+0x3e>
    1834:	8b 81       	ldd	r24, Y+3	; 0x03
    1836:	9c 81       	ldd	r25, Y+4	; 0x04
    1838:	00 97       	sbiw	r24, 0x00	; 0
    183a:	61 f0       	breq	.+24     	; 0x1854 <GPIO_writePort+0x54>
    183c:	1e c0       	rjmp	.+60     	; 0x187a <GPIO_writePort+0x7a>
    183e:	2b 81       	ldd	r18, Y+3	; 0x03
    1840:	3c 81       	ldd	r19, Y+4	; 0x04
    1842:	22 30       	cpi	r18, 0x02	; 2
    1844:	31 05       	cpc	r19, r1
    1846:	81 f0       	breq	.+32     	; 0x1868 <GPIO_writePort+0x68>
    1848:	8b 81       	ldd	r24, Y+3	; 0x03
    184a:	9c 81       	ldd	r25, Y+4	; 0x04
    184c:	83 30       	cpi	r24, 0x03	; 3
    184e:	91 05       	cpc	r25, r1
    1850:	81 f0       	breq	.+32     	; 0x1872 <GPIO_writePort+0x72>
    1852:	13 c0       	rjmp	.+38     	; 0x187a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1854:	eb e3       	ldi	r30, 0x3B	; 59
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	80 83       	st	Z, r24
    185c:	0e c0       	rjmp	.+28     	; 0x187a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    185e:	e8 e3       	ldi	r30, 0x38	; 56
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	8a 81       	ldd	r24, Y+2	; 0x02
    1864:	80 83       	st	Z, r24
    1866:	09 c0       	rjmp	.+18     	; 0x187a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1868:	e5 e3       	ldi	r30, 0x35	; 53
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	80 83       	st	Z, r24
    1870:	04 c0       	rjmp	.+8      	; 0x187a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1872:	e2 e3       	ldi	r30, 0x32	; 50
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	8a 81       	ldd	r24, Y+2	; 0x02
    1878:	80 83       	st	Z, r24
			break;
		}
	}
}
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	cf 91       	pop	r28
    1884:	df 91       	pop	r29
    1886:	08 95       	ret

00001888 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1888:	df 93       	push	r29
    188a:	cf 93       	push	r28
    188c:	00 d0       	rcall	.+0      	; 0x188e <GPIO_readPort+0x6>
    188e:	00 d0       	rcall	.+0      	; 0x1890 <GPIO_readPort+0x8>
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
    1894:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1896:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1898:	8a 81       	ldd	r24, Y+2	; 0x02
    189a:	84 30       	cpi	r24, 0x04	; 4
    189c:	90 f5       	brcc	.+100    	; 0x1902 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    189e:	8a 81       	ldd	r24, Y+2	; 0x02
    18a0:	28 2f       	mov	r18, r24
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	3c 83       	std	Y+4, r19	; 0x04
    18a6:	2b 83       	std	Y+3, r18	; 0x03
    18a8:	8b 81       	ldd	r24, Y+3	; 0x03
    18aa:	9c 81       	ldd	r25, Y+4	; 0x04
    18ac:	81 30       	cpi	r24, 0x01	; 1
    18ae:	91 05       	cpc	r25, r1
    18b0:	d1 f0       	breq	.+52     	; 0x18e6 <GPIO_readPort+0x5e>
    18b2:	2b 81       	ldd	r18, Y+3	; 0x03
    18b4:	3c 81       	ldd	r19, Y+4	; 0x04
    18b6:	22 30       	cpi	r18, 0x02	; 2
    18b8:	31 05       	cpc	r19, r1
    18ba:	2c f4       	brge	.+10     	; 0x18c6 <GPIO_readPort+0x3e>
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
    18be:	9c 81       	ldd	r25, Y+4	; 0x04
    18c0:	00 97       	sbiw	r24, 0x00	; 0
    18c2:	61 f0       	breq	.+24     	; 0x18dc <GPIO_readPort+0x54>
    18c4:	1e c0       	rjmp	.+60     	; 0x1902 <GPIO_readPort+0x7a>
    18c6:	2b 81       	ldd	r18, Y+3	; 0x03
    18c8:	3c 81       	ldd	r19, Y+4	; 0x04
    18ca:	22 30       	cpi	r18, 0x02	; 2
    18cc:	31 05       	cpc	r19, r1
    18ce:	81 f0       	breq	.+32     	; 0x18f0 <GPIO_readPort+0x68>
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	9c 81       	ldd	r25, Y+4	; 0x04
    18d4:	83 30       	cpi	r24, 0x03	; 3
    18d6:	91 05       	cpc	r25, r1
    18d8:	81 f0       	breq	.+32     	; 0x18fa <GPIO_readPort+0x72>
    18da:	13 c0       	rjmp	.+38     	; 0x1902 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    18dc:	e9 e3       	ldi	r30, 0x39	; 57
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	89 83       	std	Y+1, r24	; 0x01
    18e4:	0e c0       	rjmp	.+28     	; 0x1902 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    18e6:	e6 e3       	ldi	r30, 0x36	; 54
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	89 83       	std	Y+1, r24	; 0x01
    18ee:	09 c0       	rjmp	.+18     	; 0x1902 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    18f0:	e3 e3       	ldi	r30, 0x33	; 51
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	89 83       	std	Y+1, r24	; 0x01
    18f8:	04 c0       	rjmp	.+8      	; 0x1902 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    18fa:	e0 e3       	ldi	r30, 0x30	; 48
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1902:	89 81       	ldd	r24, Y+1	; 0x01
}
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	cf 91       	pop	r28
    190e:	df 91       	pop	r29
    1910:	08 95       	ret

00001912 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 8-bits.
 */
void LCD_init(void)
{
    1912:	df 93       	push	r29
    1914:	cf 93       	push	r28
    1916:	cd b7       	in	r28, 0x3d	; 61
    1918:	de b7       	in	r29, 0x3e	; 62
    191a:	2e 97       	sbiw	r28, 0x0e	; 14
    191c:	0f b6       	in	r0, 0x3f	; 63
    191e:	f8 94       	cli
    1920:	de bf       	out	0x3e, r29	; 62
    1922:	0f be       	out	0x3f, r0	; 63
    1924:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1926:	83 e0       	ldi	r24, 0x03	; 3
    1928:	60 e0       	ldi	r22, 0x00	; 0
    192a:	41 e0       	ldi	r20, 0x01	; 1
    192c:	0e 94 4b 09 	call	0x1296	; 0x1296 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1930:	83 e0       	ldi	r24, 0x03	; 3
    1932:	62 e0       	ldi	r22, 0x02	; 2
    1934:	41 e0       	ldi	r20, 0x01	; 1
    1936:	0e 94 4b 09 	call	0x1296	; 0x1296 <GPIO_setupPinDirection>

	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    193a:	82 e0       	ldi	r24, 0x02	; 2
    193c:	6f ef       	ldi	r22, 0xFF	; 255
    193e:	0e 94 bc 0b 	call	0x1778	; 0x1778 <GPIO_setupPortDirection>
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	a0 ea       	ldi	r26, 0xA0	; 160
    1948:	b1 e4       	ldi	r27, 0x41	; 65
    194a:	8b 87       	std	Y+11, r24	; 0x0b
    194c:	9c 87       	std	Y+12, r25	; 0x0c
    194e:	ad 87       	std	Y+13, r26	; 0x0d
    1950:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1952:	6b 85       	ldd	r22, Y+11	; 0x0b
    1954:	7c 85       	ldd	r23, Y+12	; 0x0c
    1956:	8d 85       	ldd	r24, Y+13	; 0x0d
    1958:	9e 85       	ldd	r25, Y+14	; 0x0e
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	4a e7       	ldi	r20, 0x7A	; 122
    1960:	53 e4       	ldi	r21, 0x43	; 67
    1962:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	8f 83       	std	Y+7, r24	; 0x07
    196c:	98 87       	std	Y+8, r25	; 0x08
    196e:	a9 87       	std	Y+9, r26	; 0x09
    1970:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1972:	6f 81       	ldd	r22, Y+7	; 0x07
    1974:	78 85       	ldd	r23, Y+8	; 0x08
    1976:	89 85       	ldd	r24, Y+9	; 0x09
    1978:	9a 85       	ldd	r25, Y+10	; 0x0a
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	40 e8       	ldi	r20, 0x80	; 128
    1980:	5f e3       	ldi	r21, 0x3F	; 63
    1982:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1986:	88 23       	and	r24, r24
    1988:	2c f4       	brge	.+10     	; 0x1994 <LCD_init+0x82>
		__ticks = 1;
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	9e 83       	std	Y+6, r25	; 0x06
    1990:	8d 83       	std	Y+5, r24	; 0x05
    1992:	3f c0       	rjmp	.+126    	; 0x1a12 <LCD_init+0x100>
	else if (__tmp > 65535)
    1994:	6f 81       	ldd	r22, Y+7	; 0x07
    1996:	78 85       	ldd	r23, Y+8	; 0x08
    1998:	89 85       	ldd	r24, Y+9	; 0x09
    199a:	9a 85       	ldd	r25, Y+10	; 0x0a
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	3f ef       	ldi	r19, 0xFF	; 255
    19a0:	4f e7       	ldi	r20, 0x7F	; 127
    19a2:	57 e4       	ldi	r21, 0x47	; 71
    19a4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19a8:	18 16       	cp	r1, r24
    19aa:	4c f5       	brge	.+82     	; 0x19fe <LCD_init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    19b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	40 e2       	ldi	r20, 0x20	; 32
    19ba:	51 e4       	ldi	r21, 0x41	; 65
    19bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	bc 01       	movw	r22, r24
    19c6:	cd 01       	movw	r24, r26
    19c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19cc:	dc 01       	movw	r26, r24
    19ce:	cb 01       	movw	r24, r22
    19d0:	9e 83       	std	Y+6, r25	; 0x06
    19d2:	8d 83       	std	Y+5, r24	; 0x05
    19d4:	0f c0       	rjmp	.+30     	; 0x19f4 <LCD_init+0xe2>
    19d6:	89 e1       	ldi	r24, 0x19	; 25
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	9c 83       	std	Y+4, r25	; 0x04
    19dc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19de:	8b 81       	ldd	r24, Y+3	; 0x03
    19e0:	9c 81       	ldd	r25, Y+4	; 0x04
    19e2:	01 97       	sbiw	r24, 0x01	; 1
    19e4:	f1 f7       	brne	.-4      	; 0x19e2 <LCD_init+0xd0>
    19e6:	9c 83       	std	Y+4, r25	; 0x04
    19e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ea:	8d 81       	ldd	r24, Y+5	; 0x05
    19ec:	9e 81       	ldd	r25, Y+6	; 0x06
    19ee:	01 97       	sbiw	r24, 0x01	; 1
    19f0:	9e 83       	std	Y+6, r25	; 0x06
    19f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f4:	8d 81       	ldd	r24, Y+5	; 0x05
    19f6:	9e 81       	ldd	r25, Y+6	; 0x06
    19f8:	00 97       	sbiw	r24, 0x00	; 0
    19fa:	69 f7       	brne	.-38     	; 0x19d6 <LCD_init+0xc4>
    19fc:	14 c0       	rjmp	.+40     	; 0x1a26 <LCD_init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1a00:	78 85       	ldd	r23, Y+8	; 0x08
    1a02:	89 85       	ldd	r24, Y+9	; 0x09
    1a04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	9e 83       	std	Y+6, r25	; 0x06
    1a10:	8d 83       	std	Y+5, r24	; 0x05
    1a12:	8d 81       	ldd	r24, Y+5	; 0x05
    1a14:	9e 81       	ldd	r25, Y+6	; 0x06
    1a16:	9a 83       	std	Y+2, r25	; 0x02
    1a18:	89 83       	std	Y+1, r24	; 0x01
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1e:	01 97       	sbiw	r24, 0x01	; 1
    1a20:	f1 f7       	brne	.-4      	; 0x1a1e <LCD_init+0x10c>
    1a22:	9a 83       	std	Y+2, r25	; 0x02
    1a24:	89 83       	std	Y+1, r24	; 0x01
	/* Setup the LCD connections ( RS , E and DATA ) */

	_delay_ms(20); /* LCD Power ON delay always > 15ms */

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1a26:	88 e3       	ldi	r24, 0x38	; 56
    1a28:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1a2c:	8c e0       	ldi	r24, 0x0C	; 12
    1a2e:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <LCD_sendCommand>
}
    1a38:	2e 96       	adiw	r28, 0x0e	; 14
    1a3a:	0f b6       	in	r0, 0x3f	; 63
    1a3c:	f8 94       	cli
    1a3e:	de bf       	out	0x3e, r29	; 62
    1a40:	0f be       	out	0x3f, r0	; 63
    1a42:	cd bf       	out	0x3d, r28	; 61
    1a44:	cf 91       	pop	r28
    1a46:	df 91       	pop	r29
    1a48:	08 95       	ret

00001a4a <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the LCD
 */
void LCD_sendCommand(uint8 command)
{
    1a4a:	df 93       	push	r29
    1a4c:	cf 93       	push	r28
    1a4e:	cd b7       	in	r28, 0x3d	; 61
    1a50:	de b7       	in	r29, 0x3e	; 62
    1a52:	e9 97       	sbiw	r28, 0x39	; 57
    1a54:	0f b6       	in	r0, 0x3f	; 63
    1a56:	f8 94       	cli
    1a58:	de bf       	out	0x3e, r29	; 62
    1a5a:	0f be       	out	0x3f, r0	; 63
    1a5c:	cd bf       	out	0x3d, r28	; 61
    1a5e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1a60:	83 e0       	ldi	r24, 0x03	; 3
    1a62:	60 e0       	ldi	r22, 0x00	; 0
    1a64:	40 e0       	ldi	r20, 0x00	; 0
    1a66:	0e 94 36 0a 	call	0x146c	; 0x146c <GPIO_writePin>
    1a6a:	80 e0       	ldi	r24, 0x00	; 0
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	a0 e8       	ldi	r26, 0x80	; 128
    1a70:	bf e3       	ldi	r27, 0x3F	; 63
    1a72:	8d ab       	std	Y+53, r24	; 0x35
    1a74:	9e ab       	std	Y+54, r25	; 0x36
    1a76:	af ab       	std	Y+55, r26	; 0x37
    1a78:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a7a:	6d a9       	ldd	r22, Y+53	; 0x35
    1a7c:	7e a9       	ldd	r23, Y+54	; 0x36
    1a7e:	8f a9       	ldd	r24, Y+55	; 0x37
    1a80:	98 ad       	ldd	r25, Y+56	; 0x38
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	4a e7       	ldi	r20, 0x7A	; 122
    1a88:	53 e4       	ldi	r21, 0x43	; 67
    1a8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	89 ab       	std	Y+49, r24	; 0x31
    1a94:	9a ab       	std	Y+50, r25	; 0x32
    1a96:	ab ab       	std	Y+51, r26	; 0x33
    1a98:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a9a:	69 a9       	ldd	r22, Y+49	; 0x31
    1a9c:	7a a9       	ldd	r23, Y+50	; 0x32
    1a9e:	8b a9       	ldd	r24, Y+51	; 0x33
    1aa0:	9c a9       	ldd	r25, Y+52	; 0x34
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	40 e8       	ldi	r20, 0x80	; 128
    1aa8:	5f e3       	ldi	r21, 0x3F	; 63
    1aaa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1aae:	88 23       	and	r24, r24
    1ab0:	2c f4       	brge	.+10     	; 0x1abc <LCD_sendCommand+0x72>
		__ticks = 1;
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	98 ab       	std	Y+48, r25	; 0x30
    1ab8:	8f a7       	std	Y+47, r24	; 0x2f
    1aba:	3f c0       	rjmp	.+126    	; 0x1b3a <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1abc:	69 a9       	ldd	r22, Y+49	; 0x31
    1abe:	7a a9       	ldd	r23, Y+50	; 0x32
    1ac0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ac2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	3f ef       	ldi	r19, 0xFF	; 255
    1ac8:	4f e7       	ldi	r20, 0x7F	; 127
    1aca:	57 e4       	ldi	r21, 0x47	; 71
    1acc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ad0:	18 16       	cp	r1, r24
    1ad2:	4c f5       	brge	.+82     	; 0x1b26 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad4:	6d a9       	ldd	r22, Y+53	; 0x35
    1ad6:	7e a9       	ldd	r23, Y+54	; 0x36
    1ad8:	8f a9       	ldd	r24, Y+55	; 0x37
    1ada:	98 ad       	ldd	r25, Y+56	; 0x38
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	40 e2       	ldi	r20, 0x20	; 32
    1ae2:	51 e4       	ldi	r21, 0x41	; 65
    1ae4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	bc 01       	movw	r22, r24
    1aee:	cd 01       	movw	r24, r26
    1af0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	98 ab       	std	Y+48, r25	; 0x30
    1afa:	8f a7       	std	Y+47, r24	; 0x2f
    1afc:	0f c0       	rjmp	.+30     	; 0x1b1c <LCD_sendCommand+0xd2>
    1afe:	89 e1       	ldi	r24, 0x19	; 25
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	9e a7       	std	Y+46, r25	; 0x2e
    1b04:	8d a7       	std	Y+45, r24	; 0x2d
    1b06:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b08:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b0a:	01 97       	sbiw	r24, 0x01	; 1
    1b0c:	f1 f7       	brne	.-4      	; 0x1b0a <LCD_sendCommand+0xc0>
    1b0e:	9e a7       	std	Y+46, r25	; 0x2e
    1b10:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b12:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b14:	98 a9       	ldd	r25, Y+48	; 0x30
    1b16:	01 97       	sbiw	r24, 0x01	; 1
    1b18:	98 ab       	std	Y+48, r25	; 0x30
    1b1a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b1e:	98 a9       	ldd	r25, Y+48	; 0x30
    1b20:	00 97       	sbiw	r24, 0x00	; 0
    1b22:	69 f7       	brne	.-38     	; 0x1afe <LCD_sendCommand+0xb4>
    1b24:	14 c0       	rjmp	.+40     	; 0x1b4e <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b26:	69 a9       	ldd	r22, Y+49	; 0x31
    1b28:	7a a9       	ldd	r23, Y+50	; 0x32
    1b2a:	8b a9       	ldd	r24, Y+51	; 0x33
    1b2c:	9c a9       	ldd	r25, Y+52	; 0x34
    1b2e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	98 ab       	std	Y+48, r25	; 0x30
    1b38:	8f a7       	std	Y+47, r24	; 0x2f
    1b3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b3c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b3e:	9c a7       	std	Y+44, r25	; 0x2c
    1b40:	8b a7       	std	Y+43, r24	; 0x2b
    1b42:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b44:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b46:	01 97       	sbiw	r24, 0x01	; 1
    1b48:	f1 f7       	brne	.-4      	; 0x1b46 <LCD_sendCommand+0xfc>
    1b4a:	9c a7       	std	Y+44, r25	; 0x2c
    1b4c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */

	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1b4e:	83 e0       	ldi	r24, 0x03	; 3
    1b50:	62 e0       	ldi	r22, 0x02	; 2
    1b52:	41 e0       	ldi	r20, 0x01	; 1
    1b54:	0e 94 36 0a 	call	0x146c	; 0x146c <GPIO_writePin>
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	a0 e8       	ldi	r26, 0x80	; 128
    1b5e:	bf e3       	ldi	r27, 0x3F	; 63
    1b60:	8f a3       	std	Y+39, r24	; 0x27
    1b62:	98 a7       	std	Y+40, r25	; 0x28
    1b64:	a9 a7       	std	Y+41, r26	; 0x29
    1b66:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b68:	6f a1       	ldd	r22, Y+39	; 0x27
    1b6a:	78 a5       	ldd	r23, Y+40	; 0x28
    1b6c:	89 a5       	ldd	r24, Y+41	; 0x29
    1b6e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	4a e7       	ldi	r20, 0x7A	; 122
    1b76:	53 e4       	ldi	r21, 0x43	; 67
    1b78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	8b a3       	std	Y+35, r24	; 0x23
    1b82:	9c a3       	std	Y+36, r25	; 0x24
    1b84:	ad a3       	std	Y+37, r26	; 0x25
    1b86:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b88:	6b a1       	ldd	r22, Y+35	; 0x23
    1b8a:	7c a1       	ldd	r23, Y+36	; 0x24
    1b8c:	8d a1       	ldd	r24, Y+37	; 0x25
    1b8e:	9e a1       	ldd	r25, Y+38	; 0x26
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	40 e8       	ldi	r20, 0x80	; 128
    1b96:	5f e3       	ldi	r21, 0x3F	; 63
    1b98:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b9c:	88 23       	and	r24, r24
    1b9e:	2c f4       	brge	.+10     	; 0x1baa <LCD_sendCommand+0x160>
		__ticks = 1;
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	9a a3       	std	Y+34, r25	; 0x22
    1ba6:	89 a3       	std	Y+33, r24	; 0x21
    1ba8:	3f c0       	rjmp	.+126    	; 0x1c28 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1baa:	6b a1       	ldd	r22, Y+35	; 0x23
    1bac:	7c a1       	ldd	r23, Y+36	; 0x24
    1bae:	8d a1       	ldd	r24, Y+37	; 0x25
    1bb0:	9e a1       	ldd	r25, Y+38	; 0x26
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	3f ef       	ldi	r19, 0xFF	; 255
    1bb6:	4f e7       	ldi	r20, 0x7F	; 127
    1bb8:	57 e4       	ldi	r21, 0x47	; 71
    1bba:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1bbe:	18 16       	cp	r1, r24
    1bc0:	4c f5       	brge	.+82     	; 0x1c14 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bc2:	6f a1       	ldd	r22, Y+39	; 0x27
    1bc4:	78 a5       	ldd	r23, Y+40	; 0x28
    1bc6:	89 a5       	ldd	r24, Y+41	; 0x29
    1bc8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	40 e2       	ldi	r20, 0x20	; 32
    1bd0:	51 e4       	ldi	r21, 0x41	; 65
    1bd2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	bc 01       	movw	r22, r24
    1bdc:	cd 01       	movw	r24, r26
    1bde:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	9a a3       	std	Y+34, r25	; 0x22
    1be8:	89 a3       	std	Y+33, r24	; 0x21
    1bea:	0f c0       	rjmp	.+30     	; 0x1c0a <LCD_sendCommand+0x1c0>
    1bec:	89 e1       	ldi	r24, 0x19	; 25
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	98 a3       	std	Y+32, r25	; 0x20
    1bf2:	8f 8f       	std	Y+31, r24	; 0x1f
    1bf4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bf6:	98 a1       	ldd	r25, Y+32	; 0x20
    1bf8:	01 97       	sbiw	r24, 0x01	; 1
    1bfa:	f1 f7       	brne	.-4      	; 0x1bf8 <LCD_sendCommand+0x1ae>
    1bfc:	98 a3       	std	Y+32, r25	; 0x20
    1bfe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c00:	89 a1       	ldd	r24, Y+33	; 0x21
    1c02:	9a a1       	ldd	r25, Y+34	; 0x22
    1c04:	01 97       	sbiw	r24, 0x01	; 1
    1c06:	9a a3       	std	Y+34, r25	; 0x22
    1c08:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c0a:	89 a1       	ldd	r24, Y+33	; 0x21
    1c0c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c0e:	00 97       	sbiw	r24, 0x00	; 0
    1c10:	69 f7       	brne	.-38     	; 0x1bec <LCD_sendCommand+0x1a2>
    1c12:	14 c0       	rjmp	.+40     	; 0x1c3c <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c14:	6b a1       	ldd	r22, Y+35	; 0x23
    1c16:	7c a1       	ldd	r23, Y+36	; 0x24
    1c18:	8d a1       	ldd	r24, Y+37	; 0x25
    1c1a:	9e a1       	ldd	r25, Y+38	; 0x26
    1c1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c20:	dc 01       	movw	r26, r24
    1c22:	cb 01       	movw	r24, r22
    1c24:	9a a3       	std	Y+34, r25	; 0x22
    1c26:	89 a3       	std	Y+33, r24	; 0x21
    1c28:	89 a1       	ldd	r24, Y+33	; 0x21
    1c2a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c2c:	9e 8f       	std	Y+30, r25	; 0x1e
    1c2e:	8d 8f       	std	Y+29, r24	; 0x1d
    1c30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c32:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c34:	01 97       	sbiw	r24, 0x01	; 1
    1c36:	f1 f7       	brne	.-4      	; 0x1c34 <LCD_sendCommand+0x1ea>
    1c38:	9e 8f       	std	Y+30, r25	; 0x1e
    1c3a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1c3c:	82 e0       	ldi	r24, 0x02	; 2
    1c3e:	69 ad       	ldd	r22, Y+57	; 0x39
    1c40:	0e 94 00 0c 	call	0x1800	; 0x1800 <GPIO_writePort>
    1c44:	80 e0       	ldi	r24, 0x00	; 0
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	a0 e8       	ldi	r26, 0x80	; 128
    1c4a:	bf e3       	ldi	r27, 0x3F	; 63
    1c4c:	89 8f       	std	Y+25, r24	; 0x19
    1c4e:	9a 8f       	std	Y+26, r25	; 0x1a
    1c50:	ab 8f       	std	Y+27, r26	; 0x1b
    1c52:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c54:	69 8d       	ldd	r22, Y+25	; 0x19
    1c56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	4a e7       	ldi	r20, 0x7A	; 122
    1c62:	53 e4       	ldi	r21, 0x43	; 67
    1c64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	8d 8b       	std	Y+21, r24	; 0x15
    1c6e:	9e 8b       	std	Y+22, r25	; 0x16
    1c70:	af 8b       	std	Y+23, r26	; 0x17
    1c72:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c74:	6d 89       	ldd	r22, Y+21	; 0x15
    1c76:	7e 89       	ldd	r23, Y+22	; 0x16
    1c78:	8f 89       	ldd	r24, Y+23	; 0x17
    1c7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	40 e8       	ldi	r20, 0x80	; 128
    1c82:	5f e3       	ldi	r21, 0x3F	; 63
    1c84:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c88:	88 23       	and	r24, r24
    1c8a:	2c f4       	brge	.+10     	; 0x1c96 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	9c 8b       	std	Y+20, r25	; 0x14
    1c92:	8b 8b       	std	Y+19, r24	; 0x13
    1c94:	3f c0       	rjmp	.+126    	; 0x1d14 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1c96:	6d 89       	ldd	r22, Y+21	; 0x15
    1c98:	7e 89       	ldd	r23, Y+22	; 0x16
    1c9a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c9c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	3f ef       	ldi	r19, 0xFF	; 255
    1ca2:	4f e7       	ldi	r20, 0x7F	; 127
    1ca4:	57 e4       	ldi	r21, 0x47	; 71
    1ca6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1caa:	18 16       	cp	r1, r24
    1cac:	4c f5       	brge	.+82     	; 0x1d00 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cae:	69 8d       	ldd	r22, Y+25	; 0x19
    1cb0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cb4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	40 e2       	ldi	r20, 0x20	; 32
    1cbc:	51 e4       	ldi	r21, 0x41	; 65
    1cbe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	bc 01       	movw	r22, r24
    1cc8:	cd 01       	movw	r24, r26
    1cca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	9c 8b       	std	Y+20, r25	; 0x14
    1cd4:	8b 8b       	std	Y+19, r24	; 0x13
    1cd6:	0f c0       	rjmp	.+30     	; 0x1cf6 <LCD_sendCommand+0x2ac>
    1cd8:	89 e1       	ldi	r24, 0x19	; 25
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	9a 8b       	std	Y+18, r25	; 0x12
    1cde:	89 8b       	std	Y+17, r24	; 0x11
    1ce0:	89 89       	ldd	r24, Y+17	; 0x11
    1ce2:	9a 89       	ldd	r25, Y+18	; 0x12
    1ce4:	01 97       	sbiw	r24, 0x01	; 1
    1ce6:	f1 f7       	brne	.-4      	; 0x1ce4 <LCD_sendCommand+0x29a>
    1ce8:	9a 8b       	std	Y+18, r25	; 0x12
    1cea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cec:	8b 89       	ldd	r24, Y+19	; 0x13
    1cee:	9c 89       	ldd	r25, Y+20	; 0x14
    1cf0:	01 97       	sbiw	r24, 0x01	; 1
    1cf2:	9c 8b       	std	Y+20, r25	; 0x14
    1cf4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf6:	8b 89       	ldd	r24, Y+19	; 0x13
    1cf8:	9c 89       	ldd	r25, Y+20	; 0x14
    1cfa:	00 97       	sbiw	r24, 0x00	; 0
    1cfc:	69 f7       	brne	.-38     	; 0x1cd8 <LCD_sendCommand+0x28e>
    1cfe:	14 c0       	rjmp	.+40     	; 0x1d28 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d00:	6d 89       	ldd	r22, Y+21	; 0x15
    1d02:	7e 89       	ldd	r23, Y+22	; 0x16
    1d04:	8f 89       	ldd	r24, Y+23	; 0x17
    1d06:	98 8d       	ldd	r25, Y+24	; 0x18
    1d08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	9c 8b       	std	Y+20, r25	; 0x14
    1d12:	8b 8b       	std	Y+19, r24	; 0x13
    1d14:	8b 89       	ldd	r24, Y+19	; 0x13
    1d16:	9c 89       	ldd	r25, Y+20	; 0x14
    1d18:	98 8b       	std	Y+16, r25	; 0x10
    1d1a:	8f 87       	std	Y+15, r24	; 0x0f
    1d1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d1e:	98 89       	ldd	r25, Y+16	; 0x10
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	f1 f7       	brne	.-4      	; 0x1d20 <LCD_sendCommand+0x2d6>
    1d24:	98 8b       	std	Y+16, r25	; 0x10
    1d26:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */

	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1d28:	83 e0       	ldi	r24, 0x03	; 3
    1d2a:	62 e0       	ldi	r22, 0x02	; 2
    1d2c:	40 e0       	ldi	r20, 0x00	; 0
    1d2e:	0e 94 36 0a 	call	0x146c	; 0x146c <GPIO_writePin>
    1d32:	80 e0       	ldi	r24, 0x00	; 0
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	a0 e8       	ldi	r26, 0x80	; 128
    1d38:	bf e3       	ldi	r27, 0x3F	; 63
    1d3a:	8b 87       	std	Y+11, r24	; 0x0b
    1d3c:	9c 87       	std	Y+12, r25	; 0x0c
    1d3e:	ad 87       	std	Y+13, r26	; 0x0d
    1d40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	4a e7       	ldi	r20, 0x7A	; 122
    1d50:	53 e4       	ldi	r21, 0x43	; 67
    1d52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	8f 83       	std	Y+7, r24	; 0x07
    1d5c:	98 87       	std	Y+8, r25	; 0x08
    1d5e:	a9 87       	std	Y+9, r26	; 0x09
    1d60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d62:	6f 81       	ldd	r22, Y+7	; 0x07
    1d64:	78 85       	ldd	r23, Y+8	; 0x08
    1d66:	89 85       	ldd	r24, Y+9	; 0x09
    1d68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	40 e8       	ldi	r20, 0x80	; 128
    1d70:	5f e3       	ldi	r21, 0x3F	; 63
    1d72:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d76:	88 23       	and	r24, r24
    1d78:	2c f4       	brge	.+10     	; 0x1d84 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	9e 83       	std	Y+6, r25	; 0x06
    1d80:	8d 83       	std	Y+5, r24	; 0x05
    1d82:	3f c0       	rjmp	.+126    	; 0x1e02 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1d84:	6f 81       	ldd	r22, Y+7	; 0x07
    1d86:	78 85       	ldd	r23, Y+8	; 0x08
    1d88:	89 85       	ldd	r24, Y+9	; 0x09
    1d8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	3f ef       	ldi	r19, 0xFF	; 255
    1d90:	4f e7       	ldi	r20, 0x7F	; 127
    1d92:	57 e4       	ldi	r21, 0x47	; 71
    1d94:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d98:	18 16       	cp	r1, r24
    1d9a:	4c f5       	brge	.+82     	; 0x1dee <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1da0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1da2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	40 e2       	ldi	r20, 0x20	; 32
    1daa:	51 e4       	ldi	r21, 0x41	; 65
    1dac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	bc 01       	movw	r22, r24
    1db6:	cd 01       	movw	r24, r26
    1db8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	9e 83       	std	Y+6, r25	; 0x06
    1dc2:	8d 83       	std	Y+5, r24	; 0x05
    1dc4:	0f c0       	rjmp	.+30     	; 0x1de4 <LCD_sendCommand+0x39a>
    1dc6:	89 e1       	ldi	r24, 0x19	; 25
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	9c 83       	std	Y+4, r25	; 0x04
    1dcc:	8b 83       	std	Y+3, r24	; 0x03
    1dce:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd2:	01 97       	sbiw	r24, 0x01	; 1
    1dd4:	f1 f7       	brne	.-4      	; 0x1dd2 <LCD_sendCommand+0x388>
    1dd6:	9c 83       	std	Y+4, r25	; 0x04
    1dd8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dda:	8d 81       	ldd	r24, Y+5	; 0x05
    1ddc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dde:	01 97       	sbiw	r24, 0x01	; 1
    1de0:	9e 83       	std	Y+6, r25	; 0x06
    1de2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de4:	8d 81       	ldd	r24, Y+5	; 0x05
    1de6:	9e 81       	ldd	r25, Y+6	; 0x06
    1de8:	00 97       	sbiw	r24, 0x00	; 0
    1dea:	69 f7       	brne	.-38     	; 0x1dc6 <LCD_sendCommand+0x37c>
    1dec:	14 c0       	rjmp	.+40     	; 0x1e16 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dee:	6f 81       	ldd	r22, Y+7	; 0x07
    1df0:	78 85       	ldd	r23, Y+8	; 0x08
    1df2:	89 85       	ldd	r24, Y+9	; 0x09
    1df4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	9e 83       	std	Y+6, r25	; 0x06
    1e00:	8d 83       	std	Y+5, r24	; 0x05
    1e02:	8d 81       	ldd	r24, Y+5	; 0x05
    1e04:	9e 81       	ldd	r25, Y+6	; 0x06
    1e06:	9a 83       	std	Y+2, r25	; 0x02
    1e08:	89 83       	std	Y+1, r24	; 0x01
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
    1e0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e0e:	01 97       	sbiw	r24, 0x01	; 1
    1e10:	f1 f7       	brne	.-4      	; 0x1e0e <LCD_sendCommand+0x3c4>
    1e12:	9a 83       	std	Y+2, r25	; 0x02
    1e14:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1e16:	e9 96       	adiw	r28, 0x39	; 57
    1e18:	0f b6       	in	r0, 0x3f	; 63
    1e1a:	f8 94       	cli
    1e1c:	de bf       	out	0x3e, r29	; 62
    1e1e:	0f be       	out	0x3f, r0	; 63
    1e20:	cd bf       	out	0x3d, r28	; 61
    1e22:	cf 91       	pop	r28
    1e24:	df 91       	pop	r29
    1e26:	08 95       	ret

00001e28 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1e28:	df 93       	push	r29
    1e2a:	cf 93       	push	r28
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
    1e30:	e9 97       	sbiw	r28, 0x39	; 57
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	f8 94       	cli
    1e36:	de bf       	out	0x3e, r29	; 62
    1e38:	0f be       	out	0x3f, r0	; 63
    1e3a:	cd bf       	out	0x3d, r28	; 61
    1e3c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1e3e:	83 e0       	ldi	r24, 0x03	; 3
    1e40:	60 e0       	ldi	r22, 0x00	; 0
    1e42:	41 e0       	ldi	r20, 0x01	; 1
    1e44:	0e 94 36 0a 	call	0x146c	; 0x146c <GPIO_writePin>
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	a0 e8       	ldi	r26, 0x80	; 128
    1e4e:	bf e3       	ldi	r27, 0x3F	; 63
    1e50:	8d ab       	std	Y+53, r24	; 0x35
    1e52:	9e ab       	std	Y+54, r25	; 0x36
    1e54:	af ab       	std	Y+55, r26	; 0x37
    1e56:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e58:	6d a9       	ldd	r22, Y+53	; 0x35
    1e5a:	7e a9       	ldd	r23, Y+54	; 0x36
    1e5c:	8f a9       	ldd	r24, Y+55	; 0x37
    1e5e:	98 ad       	ldd	r25, Y+56	; 0x38
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	4a e7       	ldi	r20, 0x7A	; 122
    1e66:	53 e4       	ldi	r21, 0x43	; 67
    1e68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	cb 01       	movw	r24, r22
    1e70:	89 ab       	std	Y+49, r24	; 0x31
    1e72:	9a ab       	std	Y+50, r25	; 0x32
    1e74:	ab ab       	std	Y+51, r26	; 0x33
    1e76:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e78:	69 a9       	ldd	r22, Y+49	; 0x31
    1e7a:	7a a9       	ldd	r23, Y+50	; 0x32
    1e7c:	8b a9       	ldd	r24, Y+51	; 0x33
    1e7e:	9c a9       	ldd	r25, Y+52	; 0x34
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	40 e8       	ldi	r20, 0x80	; 128
    1e86:	5f e3       	ldi	r21, 0x3F	; 63
    1e88:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e8c:	88 23       	and	r24, r24
    1e8e:	2c f4       	brge	.+10     	; 0x1e9a <LCD_displayCharacter+0x72>
		__ticks = 1;
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	98 ab       	std	Y+48, r25	; 0x30
    1e96:	8f a7       	std	Y+47, r24	; 0x2f
    1e98:	3f c0       	rjmp	.+126    	; 0x1f18 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1e9a:	69 a9       	ldd	r22, Y+49	; 0x31
    1e9c:	7a a9       	ldd	r23, Y+50	; 0x32
    1e9e:	8b a9       	ldd	r24, Y+51	; 0x33
    1ea0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ea2:	20 e0       	ldi	r18, 0x00	; 0
    1ea4:	3f ef       	ldi	r19, 0xFF	; 255
    1ea6:	4f e7       	ldi	r20, 0x7F	; 127
    1ea8:	57 e4       	ldi	r21, 0x47	; 71
    1eaa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1eae:	18 16       	cp	r1, r24
    1eb0:	4c f5       	brge	.+82     	; 0x1f04 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb2:	6d a9       	ldd	r22, Y+53	; 0x35
    1eb4:	7e a9       	ldd	r23, Y+54	; 0x36
    1eb6:	8f a9       	ldd	r24, Y+55	; 0x37
    1eb8:	98 ad       	ldd	r25, Y+56	; 0x38
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	40 e2       	ldi	r20, 0x20	; 32
    1ec0:	51 e4       	ldi	r21, 0x41	; 65
    1ec2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	bc 01       	movw	r22, r24
    1ecc:	cd 01       	movw	r24, r26
    1ece:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	98 ab       	std	Y+48, r25	; 0x30
    1ed8:	8f a7       	std	Y+47, r24	; 0x2f
    1eda:	0f c0       	rjmp	.+30     	; 0x1efa <LCD_displayCharacter+0xd2>
    1edc:	89 e1       	ldi	r24, 0x19	; 25
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	9e a7       	std	Y+46, r25	; 0x2e
    1ee2:	8d a7       	std	Y+45, r24	; 0x2d
    1ee4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ee6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	f1 f7       	brne	.-4      	; 0x1ee8 <LCD_displayCharacter+0xc0>
    1eec:	9e a7       	std	Y+46, r25	; 0x2e
    1eee:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ef2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ef4:	01 97       	sbiw	r24, 0x01	; 1
    1ef6:	98 ab       	std	Y+48, r25	; 0x30
    1ef8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1efa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1efc:	98 a9       	ldd	r25, Y+48	; 0x30
    1efe:	00 97       	sbiw	r24, 0x00	; 0
    1f00:	69 f7       	brne	.-38     	; 0x1edc <LCD_displayCharacter+0xb4>
    1f02:	14 c0       	rjmp	.+40     	; 0x1f2c <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f04:	69 a9       	ldd	r22, Y+49	; 0x31
    1f06:	7a a9       	ldd	r23, Y+50	; 0x32
    1f08:	8b a9       	ldd	r24, Y+51	; 0x33
    1f0a:	9c a9       	ldd	r25, Y+52	; 0x34
    1f0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	98 ab       	std	Y+48, r25	; 0x30
    1f16:	8f a7       	std	Y+47, r24	; 0x2f
    1f18:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f1a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f1c:	9c a7       	std	Y+44, r25	; 0x2c
    1f1e:	8b a7       	std	Y+43, r24	; 0x2b
    1f20:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f22:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f24:	01 97       	sbiw	r24, 0x01	; 1
    1f26:	f1 f7       	brne	.-4      	; 0x1f24 <LCD_displayCharacter+0xfc>
    1f28:	9c a7       	std	Y+44, r25	; 0x2c
    1f2a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */

	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1f2c:	83 e0       	ldi	r24, 0x03	; 3
    1f2e:	62 e0       	ldi	r22, 0x02	; 2
    1f30:	41 e0       	ldi	r20, 0x01	; 1
    1f32:	0e 94 36 0a 	call	0x146c	; 0x146c <GPIO_writePin>
    1f36:	80 e0       	ldi	r24, 0x00	; 0
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	a0 e8       	ldi	r26, 0x80	; 128
    1f3c:	bf e3       	ldi	r27, 0x3F	; 63
    1f3e:	8f a3       	std	Y+39, r24	; 0x27
    1f40:	98 a7       	std	Y+40, r25	; 0x28
    1f42:	a9 a7       	std	Y+41, r26	; 0x29
    1f44:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f46:	6f a1       	ldd	r22, Y+39	; 0x27
    1f48:	78 a5       	ldd	r23, Y+40	; 0x28
    1f4a:	89 a5       	ldd	r24, Y+41	; 0x29
    1f4c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	4a e7       	ldi	r20, 0x7A	; 122
    1f54:	53 e4       	ldi	r21, 0x43	; 67
    1f56:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	8b a3       	std	Y+35, r24	; 0x23
    1f60:	9c a3       	std	Y+36, r25	; 0x24
    1f62:	ad a3       	std	Y+37, r26	; 0x25
    1f64:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f66:	6b a1       	ldd	r22, Y+35	; 0x23
    1f68:	7c a1       	ldd	r23, Y+36	; 0x24
    1f6a:	8d a1       	ldd	r24, Y+37	; 0x25
    1f6c:	9e a1       	ldd	r25, Y+38	; 0x26
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	40 e8       	ldi	r20, 0x80	; 128
    1f74:	5f e3       	ldi	r21, 0x3F	; 63
    1f76:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f7a:	88 23       	and	r24, r24
    1f7c:	2c f4       	brge	.+10     	; 0x1f88 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	9a a3       	std	Y+34, r25	; 0x22
    1f84:	89 a3       	std	Y+33, r24	; 0x21
    1f86:	3f c0       	rjmp	.+126    	; 0x2006 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1f88:	6b a1       	ldd	r22, Y+35	; 0x23
    1f8a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f8c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f8e:	9e a1       	ldd	r25, Y+38	; 0x26
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	3f ef       	ldi	r19, 0xFF	; 255
    1f94:	4f e7       	ldi	r20, 0x7F	; 127
    1f96:	57 e4       	ldi	r21, 0x47	; 71
    1f98:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f9c:	18 16       	cp	r1, r24
    1f9e:	4c f5       	brge	.+82     	; 0x1ff2 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa0:	6f a1       	ldd	r22, Y+39	; 0x27
    1fa2:	78 a5       	ldd	r23, Y+40	; 0x28
    1fa4:	89 a5       	ldd	r24, Y+41	; 0x29
    1fa6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	40 e2       	ldi	r20, 0x20	; 32
    1fae:	51 e4       	ldi	r21, 0x41	; 65
    1fb0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	bc 01       	movw	r22, r24
    1fba:	cd 01       	movw	r24, r26
    1fbc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	9a a3       	std	Y+34, r25	; 0x22
    1fc6:	89 a3       	std	Y+33, r24	; 0x21
    1fc8:	0f c0       	rjmp	.+30     	; 0x1fe8 <LCD_displayCharacter+0x1c0>
    1fca:	89 e1       	ldi	r24, 0x19	; 25
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	98 a3       	std	Y+32, r25	; 0x20
    1fd0:	8f 8f       	std	Y+31, r24	; 0x1f
    1fd2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fd4:	98 a1       	ldd	r25, Y+32	; 0x20
    1fd6:	01 97       	sbiw	r24, 0x01	; 1
    1fd8:	f1 f7       	brne	.-4      	; 0x1fd6 <LCD_displayCharacter+0x1ae>
    1fda:	98 a3       	std	Y+32, r25	; 0x20
    1fdc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fde:	89 a1       	ldd	r24, Y+33	; 0x21
    1fe0:	9a a1       	ldd	r25, Y+34	; 0x22
    1fe2:	01 97       	sbiw	r24, 0x01	; 1
    1fe4:	9a a3       	std	Y+34, r25	; 0x22
    1fe6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe8:	89 a1       	ldd	r24, Y+33	; 0x21
    1fea:	9a a1       	ldd	r25, Y+34	; 0x22
    1fec:	00 97       	sbiw	r24, 0x00	; 0
    1fee:	69 f7       	brne	.-38     	; 0x1fca <LCD_displayCharacter+0x1a2>
    1ff0:	14 c0       	rjmp	.+40     	; 0x201a <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ff4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ff6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ff8:	9e a1       	ldd	r25, Y+38	; 0x26
    1ffa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ffe:	dc 01       	movw	r26, r24
    2000:	cb 01       	movw	r24, r22
    2002:	9a a3       	std	Y+34, r25	; 0x22
    2004:	89 a3       	std	Y+33, r24	; 0x21
    2006:	89 a1       	ldd	r24, Y+33	; 0x21
    2008:	9a a1       	ldd	r25, Y+34	; 0x22
    200a:	9e 8f       	std	Y+30, r25	; 0x1e
    200c:	8d 8f       	std	Y+29, r24	; 0x1d
    200e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2010:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2012:	01 97       	sbiw	r24, 0x01	; 1
    2014:	f1 f7       	brne	.-4      	; 0x2012 <LCD_displayCharacter+0x1ea>
    2016:	9e 8f       	std	Y+30, r25	; 0x1e
    2018:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    201a:	82 e0       	ldi	r24, 0x02	; 2
    201c:	69 ad       	ldd	r22, Y+57	; 0x39
    201e:	0e 94 00 0c 	call	0x1800	; 0x1800 <GPIO_writePort>
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	a0 e8       	ldi	r26, 0x80	; 128
    2028:	bf e3       	ldi	r27, 0x3F	; 63
    202a:	89 8f       	std	Y+25, r24	; 0x19
    202c:	9a 8f       	std	Y+26, r25	; 0x1a
    202e:	ab 8f       	std	Y+27, r26	; 0x1b
    2030:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2032:	69 8d       	ldd	r22, Y+25	; 0x19
    2034:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2036:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2038:	9c 8d       	ldd	r25, Y+28	; 0x1c
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	4a e7       	ldi	r20, 0x7A	; 122
    2040:	53 e4       	ldi	r21, 0x43	; 67
    2042:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	8d 8b       	std	Y+21, r24	; 0x15
    204c:	9e 8b       	std	Y+22, r25	; 0x16
    204e:	af 8b       	std	Y+23, r26	; 0x17
    2050:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2052:	6d 89       	ldd	r22, Y+21	; 0x15
    2054:	7e 89       	ldd	r23, Y+22	; 0x16
    2056:	8f 89       	ldd	r24, Y+23	; 0x17
    2058:	98 8d       	ldd	r25, Y+24	; 0x18
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	40 e8       	ldi	r20, 0x80	; 128
    2060:	5f e3       	ldi	r21, 0x3F	; 63
    2062:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2066:	88 23       	and	r24, r24
    2068:	2c f4       	brge	.+10     	; 0x2074 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	9c 8b       	std	Y+20, r25	; 0x14
    2070:	8b 8b       	std	Y+19, r24	; 0x13
    2072:	3f c0       	rjmp	.+126    	; 0x20f2 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2074:	6d 89       	ldd	r22, Y+21	; 0x15
    2076:	7e 89       	ldd	r23, Y+22	; 0x16
    2078:	8f 89       	ldd	r24, Y+23	; 0x17
    207a:	98 8d       	ldd	r25, Y+24	; 0x18
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	3f ef       	ldi	r19, 0xFF	; 255
    2080:	4f e7       	ldi	r20, 0x7F	; 127
    2082:	57 e4       	ldi	r21, 0x47	; 71
    2084:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2088:	18 16       	cp	r1, r24
    208a:	4c f5       	brge	.+82     	; 0x20de <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    208c:	69 8d       	ldd	r22, Y+25	; 0x19
    208e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2090:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2092:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	40 e2       	ldi	r20, 0x20	; 32
    209a:	51 e4       	ldi	r21, 0x41	; 65
    209c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	bc 01       	movw	r22, r24
    20a6:	cd 01       	movw	r24, r26
    20a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	9c 8b       	std	Y+20, r25	; 0x14
    20b2:	8b 8b       	std	Y+19, r24	; 0x13
    20b4:	0f c0       	rjmp	.+30     	; 0x20d4 <LCD_displayCharacter+0x2ac>
    20b6:	89 e1       	ldi	r24, 0x19	; 25
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	9a 8b       	std	Y+18, r25	; 0x12
    20bc:	89 8b       	std	Y+17, r24	; 0x11
    20be:	89 89       	ldd	r24, Y+17	; 0x11
    20c0:	9a 89       	ldd	r25, Y+18	; 0x12
    20c2:	01 97       	sbiw	r24, 0x01	; 1
    20c4:	f1 f7       	brne	.-4      	; 0x20c2 <LCD_displayCharacter+0x29a>
    20c6:	9a 8b       	std	Y+18, r25	; 0x12
    20c8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ca:	8b 89       	ldd	r24, Y+19	; 0x13
    20cc:	9c 89       	ldd	r25, Y+20	; 0x14
    20ce:	01 97       	sbiw	r24, 0x01	; 1
    20d0:	9c 8b       	std	Y+20, r25	; 0x14
    20d2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d4:	8b 89       	ldd	r24, Y+19	; 0x13
    20d6:	9c 89       	ldd	r25, Y+20	; 0x14
    20d8:	00 97       	sbiw	r24, 0x00	; 0
    20da:	69 f7       	brne	.-38     	; 0x20b6 <LCD_displayCharacter+0x28e>
    20dc:	14 c0       	rjmp	.+40     	; 0x2106 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20de:	6d 89       	ldd	r22, Y+21	; 0x15
    20e0:	7e 89       	ldd	r23, Y+22	; 0x16
    20e2:	8f 89       	ldd	r24, Y+23	; 0x17
    20e4:	98 8d       	ldd	r25, Y+24	; 0x18
    20e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	9c 8b       	std	Y+20, r25	; 0x14
    20f0:	8b 8b       	std	Y+19, r24	; 0x13
    20f2:	8b 89       	ldd	r24, Y+19	; 0x13
    20f4:	9c 89       	ldd	r25, Y+20	; 0x14
    20f6:	98 8b       	std	Y+16, r25	; 0x10
    20f8:	8f 87       	std	Y+15, r24	; 0x0f
    20fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    20fc:	98 89       	ldd	r25, Y+16	; 0x10
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	f1 f7       	brne	.-4      	; 0x20fe <LCD_displayCharacter+0x2d6>
    2102:	98 8b       	std	Y+16, r25	; 0x10
    2104:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */

	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2106:	83 e0       	ldi	r24, 0x03	; 3
    2108:	62 e0       	ldi	r22, 0x02	; 2
    210a:	40 e0       	ldi	r20, 0x00	; 0
    210c:	0e 94 36 0a 	call	0x146c	; 0x146c <GPIO_writePin>
    2110:	80 e0       	ldi	r24, 0x00	; 0
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	a0 e8       	ldi	r26, 0x80	; 128
    2116:	bf e3       	ldi	r27, 0x3F	; 63
    2118:	8b 87       	std	Y+11, r24	; 0x0b
    211a:	9c 87       	std	Y+12, r25	; 0x0c
    211c:	ad 87       	std	Y+13, r26	; 0x0d
    211e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2120:	6b 85       	ldd	r22, Y+11	; 0x0b
    2122:	7c 85       	ldd	r23, Y+12	; 0x0c
    2124:	8d 85       	ldd	r24, Y+13	; 0x0d
    2126:	9e 85       	ldd	r25, Y+14	; 0x0e
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	4a e7       	ldi	r20, 0x7A	; 122
    212e:	53 e4       	ldi	r21, 0x43	; 67
    2130:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	8f 83       	std	Y+7, r24	; 0x07
    213a:	98 87       	std	Y+8, r25	; 0x08
    213c:	a9 87       	std	Y+9, r26	; 0x09
    213e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2140:	6f 81       	ldd	r22, Y+7	; 0x07
    2142:	78 85       	ldd	r23, Y+8	; 0x08
    2144:	89 85       	ldd	r24, Y+9	; 0x09
    2146:	9a 85       	ldd	r25, Y+10	; 0x0a
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	40 e8       	ldi	r20, 0x80	; 128
    214e:	5f e3       	ldi	r21, 0x3F	; 63
    2150:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2154:	88 23       	and	r24, r24
    2156:	2c f4       	brge	.+10     	; 0x2162 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	9e 83       	std	Y+6, r25	; 0x06
    215e:	8d 83       	std	Y+5, r24	; 0x05
    2160:	3f c0       	rjmp	.+126    	; 0x21e0 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2162:	6f 81       	ldd	r22, Y+7	; 0x07
    2164:	78 85       	ldd	r23, Y+8	; 0x08
    2166:	89 85       	ldd	r24, Y+9	; 0x09
    2168:	9a 85       	ldd	r25, Y+10	; 0x0a
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	3f ef       	ldi	r19, 0xFF	; 255
    216e:	4f e7       	ldi	r20, 0x7F	; 127
    2170:	57 e4       	ldi	r21, 0x47	; 71
    2172:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2176:	18 16       	cp	r1, r24
    2178:	4c f5       	brge	.+82     	; 0x21cc <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    217a:	6b 85       	ldd	r22, Y+11	; 0x0b
    217c:	7c 85       	ldd	r23, Y+12	; 0x0c
    217e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2180:	9e 85       	ldd	r25, Y+14	; 0x0e
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	40 e2       	ldi	r20, 0x20	; 32
    2188:	51 e4       	ldi	r21, 0x41	; 65
    218a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    218e:	dc 01       	movw	r26, r24
    2190:	cb 01       	movw	r24, r22
    2192:	bc 01       	movw	r22, r24
    2194:	cd 01       	movw	r24, r26
    2196:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    219a:	dc 01       	movw	r26, r24
    219c:	cb 01       	movw	r24, r22
    219e:	9e 83       	std	Y+6, r25	; 0x06
    21a0:	8d 83       	std	Y+5, r24	; 0x05
    21a2:	0f c0       	rjmp	.+30     	; 0x21c2 <LCD_displayCharacter+0x39a>
    21a4:	89 e1       	ldi	r24, 0x19	; 25
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	9c 83       	std	Y+4, r25	; 0x04
    21aa:	8b 83       	std	Y+3, r24	; 0x03
    21ac:	8b 81       	ldd	r24, Y+3	; 0x03
    21ae:	9c 81       	ldd	r25, Y+4	; 0x04
    21b0:	01 97       	sbiw	r24, 0x01	; 1
    21b2:	f1 f7       	brne	.-4      	; 0x21b0 <LCD_displayCharacter+0x388>
    21b4:	9c 83       	std	Y+4, r25	; 0x04
    21b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21b8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ba:	9e 81       	ldd	r25, Y+6	; 0x06
    21bc:	01 97       	sbiw	r24, 0x01	; 1
    21be:	9e 83       	std	Y+6, r25	; 0x06
    21c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c2:	8d 81       	ldd	r24, Y+5	; 0x05
    21c4:	9e 81       	ldd	r25, Y+6	; 0x06
    21c6:	00 97       	sbiw	r24, 0x00	; 0
    21c8:	69 f7       	brne	.-38     	; 0x21a4 <LCD_displayCharacter+0x37c>
    21ca:	14 c0       	rjmp	.+40     	; 0x21f4 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21cc:	6f 81       	ldd	r22, Y+7	; 0x07
    21ce:	78 85       	ldd	r23, Y+8	; 0x08
    21d0:	89 85       	ldd	r24, Y+9	; 0x09
    21d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21d8:	dc 01       	movw	r26, r24
    21da:	cb 01       	movw	r24, r22
    21dc:	9e 83       	std	Y+6, r25	; 0x06
    21de:	8d 83       	std	Y+5, r24	; 0x05
    21e0:	8d 81       	ldd	r24, Y+5	; 0x05
    21e2:	9e 81       	ldd	r25, Y+6	; 0x06
    21e4:	9a 83       	std	Y+2, r25	; 0x02
    21e6:	89 83       	std	Y+1, r24	; 0x01
    21e8:	89 81       	ldd	r24, Y+1	; 0x01
    21ea:	9a 81       	ldd	r25, Y+2	; 0x02
    21ec:	01 97       	sbiw	r24, 0x01	; 1
    21ee:	f1 f7       	brne	.-4      	; 0x21ec <LCD_displayCharacter+0x3c4>
    21f0:	9a 83       	std	Y+2, r25	; 0x02
    21f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    21f4:	e9 96       	adiw	r28, 0x39	; 57
    21f6:	0f b6       	in	r0, 0x3f	; 63
    21f8:	f8 94       	cli
    21fa:	de bf       	out	0x3e, r29	; 62
    21fc:	0f be       	out	0x3f, r0	; 63
    21fe:	cd bf       	out	0x3d, r28	; 61
    2200:	cf 91       	pop	r28
    2202:	df 91       	pop	r29
    2204:	08 95       	ret

00002206 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2206:	df 93       	push	r29
    2208:	cf 93       	push	r28
    220a:	00 d0       	rcall	.+0      	; 0x220c <LCD_displayString+0x6>
    220c:	0f 92       	push	r0
    220e:	cd b7       	in	r28, 0x3d	; 61
    2210:	de b7       	in	r29, 0x3e	; 62
    2212:	9b 83       	std	Y+3, r25	; 0x03
    2214:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2216:	19 82       	std	Y+1, r1	; 0x01
    2218:	0e c0       	rjmp	.+28     	; 0x2236 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    221a:	89 81       	ldd	r24, Y+1	; 0x01
    221c:	28 2f       	mov	r18, r24
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	8a 81       	ldd	r24, Y+2	; 0x02
    2222:	9b 81       	ldd	r25, Y+3	; 0x03
    2224:	fc 01       	movw	r30, r24
    2226:	e2 0f       	add	r30, r18
    2228:	f3 1f       	adc	r31, r19
    222a:	80 81       	ld	r24, Z
    222c:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <LCD_displayCharacter>
		i++;
    2230:	89 81       	ldd	r24, Y+1	; 0x01
    2232:	8f 5f       	subi	r24, 0xFF	; 255
    2234:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2236:	89 81       	ldd	r24, Y+1	; 0x01
    2238:	28 2f       	mov	r18, r24
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	8a 81       	ldd	r24, Y+2	; 0x02
    223e:	9b 81       	ldd	r25, Y+3	; 0x03
    2240:	fc 01       	movw	r30, r24
    2242:	e2 0f       	add	r30, r18
    2244:	f3 1f       	adc	r31, r19
    2246:	80 81       	ld	r24, Z
    2248:	88 23       	and	r24, r24
    224a:	39 f7       	brne	.-50     	; 0x221a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    224c:	0f 90       	pop	r0
    224e:	0f 90       	pop	r0
    2250:	0f 90       	pop	r0
    2252:	cf 91       	pop	r28
    2254:	df 91       	pop	r29
    2256:	08 95       	ret

00002258 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2258:	df 93       	push	r29
    225a:	cf 93       	push	r28
    225c:	00 d0       	rcall	.+0      	; 0x225e <LCD_moveCursor+0x6>
    225e:	00 d0       	rcall	.+0      	; 0x2260 <LCD_moveCursor+0x8>
    2260:	0f 92       	push	r0
    2262:	cd b7       	in	r28, 0x3d	; 61
    2264:	de b7       	in	r29, 0x3e	; 62
    2266:	8a 83       	std	Y+2, r24	; 0x02
    2268:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    226a:	8a 81       	ldd	r24, Y+2	; 0x02
    226c:	28 2f       	mov	r18, r24
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	3d 83       	std	Y+5, r19	; 0x05
    2272:	2c 83       	std	Y+4, r18	; 0x04
    2274:	8c 81       	ldd	r24, Y+4	; 0x04
    2276:	9d 81       	ldd	r25, Y+5	; 0x05
    2278:	81 30       	cpi	r24, 0x01	; 1
    227a:	91 05       	cpc	r25, r1
    227c:	c1 f0       	breq	.+48     	; 0x22ae <LCD_moveCursor+0x56>
    227e:	2c 81       	ldd	r18, Y+4	; 0x04
    2280:	3d 81       	ldd	r19, Y+5	; 0x05
    2282:	22 30       	cpi	r18, 0x02	; 2
    2284:	31 05       	cpc	r19, r1
    2286:	2c f4       	brge	.+10     	; 0x2292 <LCD_moveCursor+0x3a>
    2288:	8c 81       	ldd	r24, Y+4	; 0x04
    228a:	9d 81       	ldd	r25, Y+5	; 0x05
    228c:	00 97       	sbiw	r24, 0x00	; 0
    228e:	61 f0       	breq	.+24     	; 0x22a8 <LCD_moveCursor+0x50>
    2290:	19 c0       	rjmp	.+50     	; 0x22c4 <LCD_moveCursor+0x6c>
    2292:	2c 81       	ldd	r18, Y+4	; 0x04
    2294:	3d 81       	ldd	r19, Y+5	; 0x05
    2296:	22 30       	cpi	r18, 0x02	; 2
    2298:	31 05       	cpc	r19, r1
    229a:	69 f0       	breq	.+26     	; 0x22b6 <LCD_moveCursor+0x5e>
    229c:	8c 81       	ldd	r24, Y+4	; 0x04
    229e:	9d 81       	ldd	r25, Y+5	; 0x05
    22a0:	83 30       	cpi	r24, 0x03	; 3
    22a2:	91 05       	cpc	r25, r1
    22a4:	61 f0       	breq	.+24     	; 0x22be <LCD_moveCursor+0x66>
    22a6:	0e c0       	rjmp	.+28     	; 0x22c4 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    22a8:	8b 81       	ldd	r24, Y+3	; 0x03
    22aa:	89 83       	std	Y+1, r24	; 0x01
    22ac:	0b c0       	rjmp	.+22     	; 0x22c4 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    22ae:	8b 81       	ldd	r24, Y+3	; 0x03
    22b0:	80 5c       	subi	r24, 0xC0	; 192
    22b2:	89 83       	std	Y+1, r24	; 0x01
    22b4:	07 c0       	rjmp	.+14     	; 0x22c4 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    22b6:	8b 81       	ldd	r24, Y+3	; 0x03
    22b8:	80 5f       	subi	r24, 0xF0	; 240
    22ba:	89 83       	std	Y+1, r24	; 0x01
    22bc:	03 c0       	rjmp	.+6      	; 0x22c4 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    22be:	8b 81       	ldd	r24, Y+3	; 0x03
    22c0:	80 5b       	subi	r24, 0xB0	; 176
    22c2:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    22c4:	89 81       	ldd	r24, Y+1	; 0x01
    22c6:	80 68       	ori	r24, 0x80	; 128
    22c8:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <LCD_sendCommand>
	/* ( 0x80 | address or 1000 0000 | address ) */
}
    22cc:	0f 90       	pop	r0
    22ce:	0f 90       	pop	r0
    22d0:	0f 90       	pop	r0
    22d2:	0f 90       	pop	r0
    22d4:	0f 90       	pop	r0
    22d6:	cf 91       	pop	r28
    22d8:	df 91       	pop	r29
    22da:	08 95       	ret

000022dc <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    22dc:	df 93       	push	r29
    22de:	cf 93       	push	r28
    22e0:	00 d0       	rcall	.+0      	; 0x22e2 <LCD_displayStringRowColumn+0x6>
    22e2:	00 d0       	rcall	.+0      	; 0x22e4 <LCD_displayStringRowColumn+0x8>
    22e4:	cd b7       	in	r28, 0x3d	; 61
    22e6:	de b7       	in	r29, 0x3e	; 62
    22e8:	89 83       	std	Y+1, r24	; 0x01
    22ea:	6a 83       	std	Y+2, r22	; 0x02
    22ec:	5c 83       	std	Y+4, r21	; 0x04
    22ee:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    22f0:	89 81       	ldd	r24, Y+1	; 0x01
    22f2:	6a 81       	ldd	r22, Y+2	; 0x02
    22f4:	0e 94 2c 11 	call	0x2258	; 0x2258 <LCD_moveCursor>

	LCD_displayString(Str); /* display the string */
    22f8:	8b 81       	ldd	r24, Y+3	; 0x03
    22fa:	9c 81       	ldd	r25, Y+4	; 0x04
    22fc:	0e 94 03 11 	call	0x2206	; 0x2206 <LCD_displayString>
}
    2300:	0f 90       	pop	r0
    2302:	0f 90       	pop	r0
    2304:	0f 90       	pop	r0
    2306:	0f 90       	pop	r0
    2308:	cf 91       	pop	r28
    230a:	df 91       	pop	r29
    230c:	08 95       	ret

0000230e <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    230e:	df 93       	push	r29
    2310:	cf 93       	push	r28
    2312:	cd b7       	in	r28, 0x3d	; 61
    2314:	de b7       	in	r29, 0x3e	; 62
    2316:	62 97       	sbiw	r28, 0x12	; 18
    2318:	0f b6       	in	r0, 0x3f	; 63
    231a:	f8 94       	cli
    231c:	de bf       	out	0x3e, r29	; 62
    231e:	0f be       	out	0x3f, r0	; 63
    2320:	cd bf       	out	0x3d, r28	; 61
    2322:	9a 8b       	std	Y+18, r25	; 0x12
    2324:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */

   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2326:	89 89       	ldd	r24, Y+17	; 0x11
    2328:	9a 89       	ldd	r25, Y+18	; 0x12
    232a:	9e 01       	movw	r18, r28
    232c:	2f 5f       	subi	r18, 0xFF	; 255
    232e:	3f 4f       	sbci	r19, 0xFF	; 255
    2330:	b9 01       	movw	r22, r18
    2332:	4a e0       	ldi	r20, 0x0A	; 10
    2334:	50 e0       	ldi	r21, 0x00	; 0
    2336:	0e 94 28 14 	call	0x2850	; 0x2850 <itoa>

   LCD_displayString(buff); /* Display the string */
    233a:	ce 01       	movw	r24, r28
    233c:	01 96       	adiw	r24, 0x01	; 1
    233e:	0e 94 03 11 	call	0x2206	; 0x2206 <LCD_displayString>
}
    2342:	62 96       	adiw	r28, 0x12	; 18
    2344:	0f b6       	in	r0, 0x3f	; 63
    2346:	f8 94       	cli
    2348:	de bf       	out	0x3e, r29	; 62
    234a:	0f be       	out	0x3f, r0	; 63
    234c:	cd bf       	out	0x3d, r28	; 61
    234e:	cf 91       	pop	r28
    2350:	df 91       	pop	r29
    2352:	08 95       	ret

00002354 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2354:	df 93       	push	r29
    2356:	cf 93       	push	r28
    2358:	cd b7       	in	r28, 0x3d	; 61
    235a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <LCD_sendCommand>
}
    2362:	cf 91       	pop	r28
    2364:	df 91       	pop	r29
    2366:	08 95       	ret

00002368 <LCD_intgerToStringRowColumn>:
 * Description :
 * Display the required decimal value in a specified row and column index on the screen
 */

void LCD_intgerToStringRowColumn(uint8 row,uint8 col,int data)
{
    2368:	df 93       	push	r29
    236a:	cf 93       	push	r28
    236c:	cd b7       	in	r28, 0x3d	; 61
    236e:	de b7       	in	r29, 0x3e	; 62
    2370:	64 97       	sbiw	r28, 0x14	; 20
    2372:	0f b6       	in	r0, 0x3f	; 63
    2374:	f8 94       	cli
    2376:	de bf       	out	0x3e, r29	; 62
    2378:	0f be       	out	0x3f, r0	; 63
    237a:	cd bf       	out	0x3d, r28	; 61
    237c:	89 8b       	std	Y+17, r24	; 0x11
    237e:	6a 8b       	std	Y+18, r22	; 0x12
    2380:	5c 8b       	std	Y+20, r21	; 0x14
    2382:	4b 8b       	std	Y+19, r20	; 0x13
   char buff[16]; /* String to hold the ascii result */

   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2384:	8b 89       	ldd	r24, Y+19	; 0x13
    2386:	9c 89       	ldd	r25, Y+20	; 0x14
    2388:	9e 01       	movw	r18, r28
    238a:	2f 5f       	subi	r18, 0xFF	; 255
    238c:	3f 4f       	sbci	r19, 0xFF	; 255
    238e:	b9 01       	movw	r22, r18
    2390:	4a e0       	ldi	r20, 0x0A	; 10
    2392:	50 e0       	ldi	r21, 0x00	; 0
    2394:	0e 94 28 14 	call	0x2850	; 0x2850 <itoa>

   LCD_moveCursor(row,col); /* go to to the required LCD position */
    2398:	89 89       	ldd	r24, Y+17	; 0x11
    239a:	6a 89       	ldd	r22, Y+18	; 0x12
    239c:	0e 94 2c 11 	call	0x2258	; 0x2258 <LCD_moveCursor>

   LCD_displayString(buff); /* Display the string */
    23a0:	ce 01       	movw	r24, r28
    23a2:	01 96       	adiw	r24, 0x01	; 1
    23a4:	0e 94 03 11 	call	0x2206	; 0x2206 <LCD_displayString>
}
    23a8:	64 96       	adiw	r28, 0x14	; 20
    23aa:	0f b6       	in	r0, 0x3f	; 63
    23ac:	f8 94       	cli
    23ae:	de bf       	out	0x3e, r29	; 62
    23b0:	0f be       	out	0x3f, r0	; 63
    23b2:	cd bf       	out	0x3d, r28	; 61
    23b4:	cf 91       	pop	r28
    23b6:	df 91       	pop	r29
    23b8:	08 95       	ret

000023ba <LCD_displayCharacterRowColumn>:
/*
 * Description :
 * Display the required character in a specified row and column index on the screen
 */
void LCD_displayCharacterRowColumn(uint8 row,uint8 col,uint8 data)
{
    23ba:	df 93       	push	r29
    23bc:	cf 93       	push	r28
    23be:	cd b7       	in	r28, 0x3d	; 61
    23c0:	de b7       	in	r29, 0x3e	; 62
    23c2:	eb 97       	sbiw	r28, 0x3b	; 59
    23c4:	0f b6       	in	r0, 0x3f	; 63
    23c6:	f8 94       	cli
    23c8:	de bf       	out	0x3e, r29	; 62
    23ca:	0f be       	out	0x3f, r0	; 63
    23cc:	cd bf       	out	0x3d, r28	; 61
    23ce:	89 af       	std	Y+57, r24	; 0x39
    23d0:	6a af       	std	Y+58, r22	; 0x3a
    23d2:	4b af       	std	Y+59, r20	; 0x3b
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    23d4:	89 ad       	ldd	r24, Y+57	; 0x39
    23d6:	6a ad       	ldd	r22, Y+58	; 0x3a
    23d8:	0e 94 2c 11 	call	0x2258	; 0x2258 <LCD_moveCursor>

	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    23dc:	83 e0       	ldi	r24, 0x03	; 3
    23de:	60 e0       	ldi	r22, 0x00	; 0
    23e0:	41 e0       	ldi	r20, 0x01	; 1
    23e2:	0e 94 36 0a 	call	0x146c	; 0x146c <GPIO_writePin>
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	a0 e8       	ldi	r26, 0x80	; 128
    23ec:	bf e3       	ldi	r27, 0x3F	; 63
    23ee:	8d ab       	std	Y+53, r24	; 0x35
    23f0:	9e ab       	std	Y+54, r25	; 0x36
    23f2:	af ab       	std	Y+55, r26	; 0x37
    23f4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23f6:	6d a9       	ldd	r22, Y+53	; 0x35
    23f8:	7e a9       	ldd	r23, Y+54	; 0x36
    23fa:	8f a9       	ldd	r24, Y+55	; 0x37
    23fc:	98 ad       	ldd	r25, Y+56	; 0x38
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	4a e7       	ldi	r20, 0x7A	; 122
    2404:	53 e4       	ldi	r21, 0x43	; 67
    2406:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	89 ab       	std	Y+49, r24	; 0x31
    2410:	9a ab       	std	Y+50, r25	; 0x32
    2412:	ab ab       	std	Y+51, r26	; 0x33
    2414:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2416:	69 a9       	ldd	r22, Y+49	; 0x31
    2418:	7a a9       	ldd	r23, Y+50	; 0x32
    241a:	8b a9       	ldd	r24, Y+51	; 0x33
    241c:	9c a9       	ldd	r25, Y+52	; 0x34
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	40 e8       	ldi	r20, 0x80	; 128
    2424:	5f e3       	ldi	r21, 0x3F	; 63
    2426:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    242a:	88 23       	and	r24, r24
    242c:	2c f4       	brge	.+10     	; 0x2438 <LCD_displayCharacterRowColumn+0x7e>
		__ticks = 1;
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	98 ab       	std	Y+48, r25	; 0x30
    2434:	8f a7       	std	Y+47, r24	; 0x2f
    2436:	3f c0       	rjmp	.+126    	; 0x24b6 <LCD_displayCharacterRowColumn+0xfc>
	else if (__tmp > 65535)
    2438:	69 a9       	ldd	r22, Y+49	; 0x31
    243a:	7a a9       	ldd	r23, Y+50	; 0x32
    243c:	8b a9       	ldd	r24, Y+51	; 0x33
    243e:	9c a9       	ldd	r25, Y+52	; 0x34
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	3f ef       	ldi	r19, 0xFF	; 255
    2444:	4f e7       	ldi	r20, 0x7F	; 127
    2446:	57 e4       	ldi	r21, 0x47	; 71
    2448:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    244c:	18 16       	cp	r1, r24
    244e:	4c f5       	brge	.+82     	; 0x24a2 <LCD_displayCharacterRowColumn+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2450:	6d a9       	ldd	r22, Y+53	; 0x35
    2452:	7e a9       	ldd	r23, Y+54	; 0x36
    2454:	8f a9       	ldd	r24, Y+55	; 0x37
    2456:	98 ad       	ldd	r25, Y+56	; 0x38
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	40 e2       	ldi	r20, 0x20	; 32
    245e:	51 e4       	ldi	r21, 0x41	; 65
    2460:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2464:	dc 01       	movw	r26, r24
    2466:	cb 01       	movw	r24, r22
    2468:	bc 01       	movw	r22, r24
    246a:	cd 01       	movw	r24, r26
    246c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	98 ab       	std	Y+48, r25	; 0x30
    2476:	8f a7       	std	Y+47, r24	; 0x2f
    2478:	0f c0       	rjmp	.+30     	; 0x2498 <LCD_displayCharacterRowColumn+0xde>
    247a:	89 e1       	ldi	r24, 0x19	; 25
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	9e a7       	std	Y+46, r25	; 0x2e
    2480:	8d a7       	std	Y+45, r24	; 0x2d
    2482:	8d a5       	ldd	r24, Y+45	; 0x2d
    2484:	9e a5       	ldd	r25, Y+46	; 0x2e
    2486:	01 97       	sbiw	r24, 0x01	; 1
    2488:	f1 f7       	brne	.-4      	; 0x2486 <LCD_displayCharacterRowColumn+0xcc>
    248a:	9e a7       	std	Y+46, r25	; 0x2e
    248c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    248e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2490:	98 a9       	ldd	r25, Y+48	; 0x30
    2492:	01 97       	sbiw	r24, 0x01	; 1
    2494:	98 ab       	std	Y+48, r25	; 0x30
    2496:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2498:	8f a5       	ldd	r24, Y+47	; 0x2f
    249a:	98 a9       	ldd	r25, Y+48	; 0x30
    249c:	00 97       	sbiw	r24, 0x00	; 0
    249e:	69 f7       	brne	.-38     	; 0x247a <LCD_displayCharacterRowColumn+0xc0>
    24a0:	14 c0       	rjmp	.+40     	; 0x24ca <LCD_displayCharacterRowColumn+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24a2:	69 a9       	ldd	r22, Y+49	; 0x31
    24a4:	7a a9       	ldd	r23, Y+50	; 0x32
    24a6:	8b a9       	ldd	r24, Y+51	; 0x33
    24a8:	9c a9       	ldd	r25, Y+52	; 0x34
    24aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	98 ab       	std	Y+48, r25	; 0x30
    24b4:	8f a7       	std	Y+47, r24	; 0x2f
    24b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    24b8:	98 a9       	ldd	r25, Y+48	; 0x30
    24ba:	9c a7       	std	Y+44, r25	; 0x2c
    24bc:	8b a7       	std	Y+43, r24	; 0x2b
    24be:	8b a5       	ldd	r24, Y+43	; 0x2b
    24c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    24c2:	01 97       	sbiw	r24, 0x01	; 1
    24c4:	f1 f7       	brne	.-4      	; 0x24c2 <LCD_displayCharacterRowColumn+0x108>
    24c6:	9c a7       	std	Y+44, r25	; 0x2c
    24c8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */

	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    24ca:	83 e0       	ldi	r24, 0x03	; 3
    24cc:	62 e0       	ldi	r22, 0x02	; 2
    24ce:	41 e0       	ldi	r20, 0x01	; 1
    24d0:	0e 94 36 0a 	call	0x146c	; 0x146c <GPIO_writePin>
    24d4:	80 e0       	ldi	r24, 0x00	; 0
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	a0 e8       	ldi	r26, 0x80	; 128
    24da:	bf e3       	ldi	r27, 0x3F	; 63
    24dc:	8f a3       	std	Y+39, r24	; 0x27
    24de:	98 a7       	std	Y+40, r25	; 0x28
    24e0:	a9 a7       	std	Y+41, r26	; 0x29
    24e2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e4:	6f a1       	ldd	r22, Y+39	; 0x27
    24e6:	78 a5       	ldd	r23, Y+40	; 0x28
    24e8:	89 a5       	ldd	r24, Y+41	; 0x29
    24ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	4a e7       	ldi	r20, 0x7A	; 122
    24f2:	53 e4       	ldi	r21, 0x43	; 67
    24f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24f8:	dc 01       	movw	r26, r24
    24fa:	cb 01       	movw	r24, r22
    24fc:	8b a3       	std	Y+35, r24	; 0x23
    24fe:	9c a3       	std	Y+36, r25	; 0x24
    2500:	ad a3       	std	Y+37, r26	; 0x25
    2502:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2504:	6b a1       	ldd	r22, Y+35	; 0x23
    2506:	7c a1       	ldd	r23, Y+36	; 0x24
    2508:	8d a1       	ldd	r24, Y+37	; 0x25
    250a:	9e a1       	ldd	r25, Y+38	; 0x26
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	40 e8       	ldi	r20, 0x80	; 128
    2512:	5f e3       	ldi	r21, 0x3F	; 63
    2514:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2518:	88 23       	and	r24, r24
    251a:	2c f4       	brge	.+10     	; 0x2526 <LCD_displayCharacterRowColumn+0x16c>
		__ticks = 1;
    251c:	81 e0       	ldi	r24, 0x01	; 1
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	9a a3       	std	Y+34, r25	; 0x22
    2522:	89 a3       	std	Y+33, r24	; 0x21
    2524:	3f c0       	rjmp	.+126    	; 0x25a4 <LCD_displayCharacterRowColumn+0x1ea>
	else if (__tmp > 65535)
    2526:	6b a1       	ldd	r22, Y+35	; 0x23
    2528:	7c a1       	ldd	r23, Y+36	; 0x24
    252a:	8d a1       	ldd	r24, Y+37	; 0x25
    252c:	9e a1       	ldd	r25, Y+38	; 0x26
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	3f ef       	ldi	r19, 0xFF	; 255
    2532:	4f e7       	ldi	r20, 0x7F	; 127
    2534:	57 e4       	ldi	r21, 0x47	; 71
    2536:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    253a:	18 16       	cp	r1, r24
    253c:	4c f5       	brge	.+82     	; 0x2590 <LCD_displayCharacterRowColumn+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    253e:	6f a1       	ldd	r22, Y+39	; 0x27
    2540:	78 a5       	ldd	r23, Y+40	; 0x28
    2542:	89 a5       	ldd	r24, Y+41	; 0x29
    2544:	9a a5       	ldd	r25, Y+42	; 0x2a
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	40 e2       	ldi	r20, 0x20	; 32
    254c:	51 e4       	ldi	r21, 0x41	; 65
    254e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	bc 01       	movw	r22, r24
    2558:	cd 01       	movw	r24, r26
    255a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	9a a3       	std	Y+34, r25	; 0x22
    2564:	89 a3       	std	Y+33, r24	; 0x21
    2566:	0f c0       	rjmp	.+30     	; 0x2586 <LCD_displayCharacterRowColumn+0x1cc>
    2568:	89 e1       	ldi	r24, 0x19	; 25
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	98 a3       	std	Y+32, r25	; 0x20
    256e:	8f 8f       	std	Y+31, r24	; 0x1f
    2570:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2572:	98 a1       	ldd	r25, Y+32	; 0x20
    2574:	01 97       	sbiw	r24, 0x01	; 1
    2576:	f1 f7       	brne	.-4      	; 0x2574 <LCD_displayCharacterRowColumn+0x1ba>
    2578:	98 a3       	std	Y+32, r25	; 0x20
    257a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    257c:	89 a1       	ldd	r24, Y+33	; 0x21
    257e:	9a a1       	ldd	r25, Y+34	; 0x22
    2580:	01 97       	sbiw	r24, 0x01	; 1
    2582:	9a a3       	std	Y+34, r25	; 0x22
    2584:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2586:	89 a1       	ldd	r24, Y+33	; 0x21
    2588:	9a a1       	ldd	r25, Y+34	; 0x22
    258a:	00 97       	sbiw	r24, 0x00	; 0
    258c:	69 f7       	brne	.-38     	; 0x2568 <LCD_displayCharacterRowColumn+0x1ae>
    258e:	14 c0       	rjmp	.+40     	; 0x25b8 <LCD_displayCharacterRowColumn+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2590:	6b a1       	ldd	r22, Y+35	; 0x23
    2592:	7c a1       	ldd	r23, Y+36	; 0x24
    2594:	8d a1       	ldd	r24, Y+37	; 0x25
    2596:	9e a1       	ldd	r25, Y+38	; 0x26
    2598:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	9a a3       	std	Y+34, r25	; 0x22
    25a2:	89 a3       	std	Y+33, r24	; 0x21
    25a4:	89 a1       	ldd	r24, Y+33	; 0x21
    25a6:	9a a1       	ldd	r25, Y+34	; 0x22
    25a8:	9e 8f       	std	Y+30, r25	; 0x1e
    25aa:	8d 8f       	std	Y+29, r24	; 0x1d
    25ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25b0:	01 97       	sbiw	r24, 0x01	; 1
    25b2:	f1 f7       	brne	.-4      	; 0x25b0 <LCD_displayCharacterRowColumn+0x1f6>
    25b4:	9e 8f       	std	Y+30, r25	; 0x1e
    25b6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    25b8:	82 e0       	ldi	r24, 0x02	; 2
    25ba:	6b ad       	ldd	r22, Y+59	; 0x3b
    25bc:	0e 94 00 0c 	call	0x1800	; 0x1800 <GPIO_writePort>
    25c0:	80 e0       	ldi	r24, 0x00	; 0
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	a0 e8       	ldi	r26, 0x80	; 128
    25c6:	bf e3       	ldi	r27, 0x3F	; 63
    25c8:	89 8f       	std	Y+25, r24	; 0x19
    25ca:	9a 8f       	std	Y+26, r25	; 0x1a
    25cc:	ab 8f       	std	Y+27, r26	; 0x1b
    25ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d0:	69 8d       	ldd	r22, Y+25	; 0x19
    25d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25d8:	20 e0       	ldi	r18, 0x00	; 0
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	4a e7       	ldi	r20, 0x7A	; 122
    25de:	53 e4       	ldi	r21, 0x43	; 67
    25e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25e4:	dc 01       	movw	r26, r24
    25e6:	cb 01       	movw	r24, r22
    25e8:	8d 8b       	std	Y+21, r24	; 0x15
    25ea:	9e 8b       	std	Y+22, r25	; 0x16
    25ec:	af 8b       	std	Y+23, r26	; 0x17
    25ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25f0:	6d 89       	ldd	r22, Y+21	; 0x15
    25f2:	7e 89       	ldd	r23, Y+22	; 0x16
    25f4:	8f 89       	ldd	r24, Y+23	; 0x17
    25f6:	98 8d       	ldd	r25, Y+24	; 0x18
    25f8:	20 e0       	ldi	r18, 0x00	; 0
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	40 e8       	ldi	r20, 0x80	; 128
    25fe:	5f e3       	ldi	r21, 0x3F	; 63
    2600:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2604:	88 23       	and	r24, r24
    2606:	2c f4       	brge	.+10     	; 0x2612 <LCD_displayCharacterRowColumn+0x258>
		__ticks = 1;
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	9c 8b       	std	Y+20, r25	; 0x14
    260e:	8b 8b       	std	Y+19, r24	; 0x13
    2610:	3f c0       	rjmp	.+126    	; 0x2690 <LCD_displayCharacterRowColumn+0x2d6>
	else if (__tmp > 65535)
    2612:	6d 89       	ldd	r22, Y+21	; 0x15
    2614:	7e 89       	ldd	r23, Y+22	; 0x16
    2616:	8f 89       	ldd	r24, Y+23	; 0x17
    2618:	98 8d       	ldd	r25, Y+24	; 0x18
    261a:	20 e0       	ldi	r18, 0x00	; 0
    261c:	3f ef       	ldi	r19, 0xFF	; 255
    261e:	4f e7       	ldi	r20, 0x7F	; 127
    2620:	57 e4       	ldi	r21, 0x47	; 71
    2622:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2626:	18 16       	cp	r1, r24
    2628:	4c f5       	brge	.+82     	; 0x267c <LCD_displayCharacterRowColumn+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    262a:	69 8d       	ldd	r22, Y+25	; 0x19
    262c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    262e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2630:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2632:	20 e0       	ldi	r18, 0x00	; 0
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	40 e2       	ldi	r20, 0x20	; 32
    2638:	51 e4       	ldi	r21, 0x41	; 65
    263a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    263e:	dc 01       	movw	r26, r24
    2640:	cb 01       	movw	r24, r22
    2642:	bc 01       	movw	r22, r24
    2644:	cd 01       	movw	r24, r26
    2646:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    264a:	dc 01       	movw	r26, r24
    264c:	cb 01       	movw	r24, r22
    264e:	9c 8b       	std	Y+20, r25	; 0x14
    2650:	8b 8b       	std	Y+19, r24	; 0x13
    2652:	0f c0       	rjmp	.+30     	; 0x2672 <LCD_displayCharacterRowColumn+0x2b8>
    2654:	89 e1       	ldi	r24, 0x19	; 25
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	9a 8b       	std	Y+18, r25	; 0x12
    265a:	89 8b       	std	Y+17, r24	; 0x11
    265c:	89 89       	ldd	r24, Y+17	; 0x11
    265e:	9a 89       	ldd	r25, Y+18	; 0x12
    2660:	01 97       	sbiw	r24, 0x01	; 1
    2662:	f1 f7       	brne	.-4      	; 0x2660 <LCD_displayCharacterRowColumn+0x2a6>
    2664:	9a 8b       	std	Y+18, r25	; 0x12
    2666:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2668:	8b 89       	ldd	r24, Y+19	; 0x13
    266a:	9c 89       	ldd	r25, Y+20	; 0x14
    266c:	01 97       	sbiw	r24, 0x01	; 1
    266e:	9c 8b       	std	Y+20, r25	; 0x14
    2670:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2672:	8b 89       	ldd	r24, Y+19	; 0x13
    2674:	9c 89       	ldd	r25, Y+20	; 0x14
    2676:	00 97       	sbiw	r24, 0x00	; 0
    2678:	69 f7       	brne	.-38     	; 0x2654 <LCD_displayCharacterRowColumn+0x29a>
    267a:	14 c0       	rjmp	.+40     	; 0x26a4 <LCD_displayCharacterRowColumn+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    267c:	6d 89       	ldd	r22, Y+21	; 0x15
    267e:	7e 89       	ldd	r23, Y+22	; 0x16
    2680:	8f 89       	ldd	r24, Y+23	; 0x17
    2682:	98 8d       	ldd	r25, Y+24	; 0x18
    2684:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2688:	dc 01       	movw	r26, r24
    268a:	cb 01       	movw	r24, r22
    268c:	9c 8b       	std	Y+20, r25	; 0x14
    268e:	8b 8b       	std	Y+19, r24	; 0x13
    2690:	8b 89       	ldd	r24, Y+19	; 0x13
    2692:	9c 89       	ldd	r25, Y+20	; 0x14
    2694:	98 8b       	std	Y+16, r25	; 0x10
    2696:	8f 87       	std	Y+15, r24	; 0x0f
    2698:	8f 85       	ldd	r24, Y+15	; 0x0f
    269a:	98 89       	ldd	r25, Y+16	; 0x10
    269c:	01 97       	sbiw	r24, 0x01	; 1
    269e:	f1 f7       	brne	.-4      	; 0x269c <LCD_displayCharacterRowColumn+0x2e2>
    26a0:	98 8b       	std	Y+16, r25	; 0x10
    26a2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */

	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    26a4:	83 e0       	ldi	r24, 0x03	; 3
    26a6:	62 e0       	ldi	r22, 0x02	; 2
    26a8:	40 e0       	ldi	r20, 0x00	; 0
    26aa:	0e 94 36 0a 	call	0x146c	; 0x146c <GPIO_writePin>
    26ae:	80 e0       	ldi	r24, 0x00	; 0
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	a0 e8       	ldi	r26, 0x80	; 128
    26b4:	bf e3       	ldi	r27, 0x3F	; 63
    26b6:	8b 87       	std	Y+11, r24	; 0x0b
    26b8:	9c 87       	std	Y+12, r25	; 0x0c
    26ba:	ad 87       	std	Y+13, r26	; 0x0d
    26bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26be:	6b 85       	ldd	r22, Y+11	; 0x0b
    26c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    26c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    26c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	4a e7       	ldi	r20, 0x7A	; 122
    26cc:	53 e4       	ldi	r21, 0x43	; 67
    26ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26d2:	dc 01       	movw	r26, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	8f 83       	std	Y+7, r24	; 0x07
    26d8:	98 87       	std	Y+8, r25	; 0x08
    26da:	a9 87       	std	Y+9, r26	; 0x09
    26dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26de:	6f 81       	ldd	r22, Y+7	; 0x07
    26e0:	78 85       	ldd	r23, Y+8	; 0x08
    26e2:	89 85       	ldd	r24, Y+9	; 0x09
    26e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e6:	20 e0       	ldi	r18, 0x00	; 0
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	40 e8       	ldi	r20, 0x80	; 128
    26ec:	5f e3       	ldi	r21, 0x3F	; 63
    26ee:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    26f2:	88 23       	and	r24, r24
    26f4:	2c f4       	brge	.+10     	; 0x2700 <LCD_displayCharacterRowColumn+0x346>
		__ticks = 1;
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	9e 83       	std	Y+6, r25	; 0x06
    26fc:	8d 83       	std	Y+5, r24	; 0x05
    26fe:	3f c0       	rjmp	.+126    	; 0x277e <LCD_displayCharacterRowColumn+0x3c4>
	else if (__tmp > 65535)
    2700:	6f 81       	ldd	r22, Y+7	; 0x07
    2702:	78 85       	ldd	r23, Y+8	; 0x08
    2704:	89 85       	ldd	r24, Y+9	; 0x09
    2706:	9a 85       	ldd	r25, Y+10	; 0x0a
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	3f ef       	ldi	r19, 0xFF	; 255
    270c:	4f e7       	ldi	r20, 0x7F	; 127
    270e:	57 e4       	ldi	r21, 0x47	; 71
    2710:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2714:	18 16       	cp	r1, r24
    2716:	4c f5       	brge	.+82     	; 0x276a <LCD_displayCharacterRowColumn+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2718:	6b 85       	ldd	r22, Y+11	; 0x0b
    271a:	7c 85       	ldd	r23, Y+12	; 0x0c
    271c:	8d 85       	ldd	r24, Y+13	; 0x0d
    271e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	40 e2       	ldi	r20, 0x20	; 32
    2726:	51 e4       	ldi	r21, 0x41	; 65
    2728:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    272c:	dc 01       	movw	r26, r24
    272e:	cb 01       	movw	r24, r22
    2730:	bc 01       	movw	r22, r24
    2732:	cd 01       	movw	r24, r26
    2734:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2738:	dc 01       	movw	r26, r24
    273a:	cb 01       	movw	r24, r22
    273c:	9e 83       	std	Y+6, r25	; 0x06
    273e:	8d 83       	std	Y+5, r24	; 0x05
    2740:	0f c0       	rjmp	.+30     	; 0x2760 <LCD_displayCharacterRowColumn+0x3a6>
    2742:	89 e1       	ldi	r24, 0x19	; 25
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	9c 83       	std	Y+4, r25	; 0x04
    2748:	8b 83       	std	Y+3, r24	; 0x03
    274a:	8b 81       	ldd	r24, Y+3	; 0x03
    274c:	9c 81       	ldd	r25, Y+4	; 0x04
    274e:	01 97       	sbiw	r24, 0x01	; 1
    2750:	f1 f7       	brne	.-4      	; 0x274e <LCD_displayCharacterRowColumn+0x394>
    2752:	9c 83       	std	Y+4, r25	; 0x04
    2754:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2756:	8d 81       	ldd	r24, Y+5	; 0x05
    2758:	9e 81       	ldd	r25, Y+6	; 0x06
    275a:	01 97       	sbiw	r24, 0x01	; 1
    275c:	9e 83       	std	Y+6, r25	; 0x06
    275e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2760:	8d 81       	ldd	r24, Y+5	; 0x05
    2762:	9e 81       	ldd	r25, Y+6	; 0x06
    2764:	00 97       	sbiw	r24, 0x00	; 0
    2766:	69 f7       	brne	.-38     	; 0x2742 <LCD_displayCharacterRowColumn+0x388>
    2768:	14 c0       	rjmp	.+40     	; 0x2792 <LCD_displayCharacterRowColumn+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    276a:	6f 81       	ldd	r22, Y+7	; 0x07
    276c:	78 85       	ldd	r23, Y+8	; 0x08
    276e:	89 85       	ldd	r24, Y+9	; 0x09
    2770:	9a 85       	ldd	r25, Y+10	; 0x0a
    2772:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	9e 83       	std	Y+6, r25	; 0x06
    277c:	8d 83       	std	Y+5, r24	; 0x05
    277e:	8d 81       	ldd	r24, Y+5	; 0x05
    2780:	9e 81       	ldd	r25, Y+6	; 0x06
    2782:	9a 83       	std	Y+2, r25	; 0x02
    2784:	89 83       	std	Y+1, r24	; 0x01
    2786:	89 81       	ldd	r24, Y+1	; 0x01
    2788:	9a 81       	ldd	r25, Y+2	; 0x02
    278a:	01 97       	sbiw	r24, 0x01	; 1
    278c:	f1 f7       	brne	.-4      	; 0x278a <LCD_displayCharacterRowColumn+0x3d0>
    278e:	9a 83       	std	Y+2, r25	; 0x02
    2790:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2792:	eb 96       	adiw	r28, 0x3b	; 59
    2794:	0f b6       	in	r0, 0x3f	; 63
    2796:	f8 94       	cli
    2798:	de bf       	out	0x3e, r29	; 62
    279a:	0f be       	out	0x3f, r0	; 63
    279c:	cd bf       	out	0x3d, r28	; 61
    279e:	cf 91       	pop	r28
    27a0:	df 91       	pop	r29
    27a2:	08 95       	ret

000027a4 <__mulsi3>:
    27a4:	62 9f       	mul	r22, r18
    27a6:	d0 01       	movw	r26, r0
    27a8:	73 9f       	mul	r23, r19
    27aa:	f0 01       	movw	r30, r0
    27ac:	82 9f       	mul	r24, r18
    27ae:	e0 0d       	add	r30, r0
    27b0:	f1 1d       	adc	r31, r1
    27b2:	64 9f       	mul	r22, r20
    27b4:	e0 0d       	add	r30, r0
    27b6:	f1 1d       	adc	r31, r1
    27b8:	92 9f       	mul	r25, r18
    27ba:	f0 0d       	add	r31, r0
    27bc:	83 9f       	mul	r24, r19
    27be:	f0 0d       	add	r31, r0
    27c0:	74 9f       	mul	r23, r20
    27c2:	f0 0d       	add	r31, r0
    27c4:	65 9f       	mul	r22, r21
    27c6:	f0 0d       	add	r31, r0
    27c8:	99 27       	eor	r25, r25
    27ca:	72 9f       	mul	r23, r18
    27cc:	b0 0d       	add	r27, r0
    27ce:	e1 1d       	adc	r30, r1
    27d0:	f9 1f       	adc	r31, r25
    27d2:	63 9f       	mul	r22, r19
    27d4:	b0 0d       	add	r27, r0
    27d6:	e1 1d       	adc	r30, r1
    27d8:	f9 1f       	adc	r31, r25
    27da:	bd 01       	movw	r22, r26
    27dc:	cf 01       	movw	r24, r30
    27de:	11 24       	eor	r1, r1
    27e0:	08 95       	ret

000027e2 <__prologue_saves__>:
    27e2:	2f 92       	push	r2
    27e4:	3f 92       	push	r3
    27e6:	4f 92       	push	r4
    27e8:	5f 92       	push	r5
    27ea:	6f 92       	push	r6
    27ec:	7f 92       	push	r7
    27ee:	8f 92       	push	r8
    27f0:	9f 92       	push	r9
    27f2:	af 92       	push	r10
    27f4:	bf 92       	push	r11
    27f6:	cf 92       	push	r12
    27f8:	df 92       	push	r13
    27fa:	ef 92       	push	r14
    27fc:	ff 92       	push	r15
    27fe:	0f 93       	push	r16
    2800:	1f 93       	push	r17
    2802:	cf 93       	push	r28
    2804:	df 93       	push	r29
    2806:	cd b7       	in	r28, 0x3d	; 61
    2808:	de b7       	in	r29, 0x3e	; 62
    280a:	ca 1b       	sub	r28, r26
    280c:	db 0b       	sbc	r29, r27
    280e:	0f b6       	in	r0, 0x3f	; 63
    2810:	f8 94       	cli
    2812:	de bf       	out	0x3e, r29	; 62
    2814:	0f be       	out	0x3f, r0	; 63
    2816:	cd bf       	out	0x3d, r28	; 61
    2818:	09 94       	ijmp

0000281a <__epilogue_restores__>:
    281a:	2a 88       	ldd	r2, Y+18	; 0x12
    281c:	39 88       	ldd	r3, Y+17	; 0x11
    281e:	48 88       	ldd	r4, Y+16	; 0x10
    2820:	5f 84       	ldd	r5, Y+15	; 0x0f
    2822:	6e 84       	ldd	r6, Y+14	; 0x0e
    2824:	7d 84       	ldd	r7, Y+13	; 0x0d
    2826:	8c 84       	ldd	r8, Y+12	; 0x0c
    2828:	9b 84       	ldd	r9, Y+11	; 0x0b
    282a:	aa 84       	ldd	r10, Y+10	; 0x0a
    282c:	b9 84       	ldd	r11, Y+9	; 0x09
    282e:	c8 84       	ldd	r12, Y+8	; 0x08
    2830:	df 80       	ldd	r13, Y+7	; 0x07
    2832:	ee 80       	ldd	r14, Y+6	; 0x06
    2834:	fd 80       	ldd	r15, Y+5	; 0x05
    2836:	0c 81       	ldd	r16, Y+4	; 0x04
    2838:	1b 81       	ldd	r17, Y+3	; 0x03
    283a:	aa 81       	ldd	r26, Y+2	; 0x02
    283c:	b9 81       	ldd	r27, Y+1	; 0x01
    283e:	ce 0f       	add	r28, r30
    2840:	d1 1d       	adc	r29, r1
    2842:	0f b6       	in	r0, 0x3f	; 63
    2844:	f8 94       	cli
    2846:	de bf       	out	0x3e, r29	; 62
    2848:	0f be       	out	0x3f, r0	; 63
    284a:	cd bf       	out	0x3d, r28	; 61
    284c:	ed 01       	movw	r28, r26
    284e:	08 95       	ret

00002850 <itoa>:
    2850:	fb 01       	movw	r30, r22
    2852:	9f 01       	movw	r18, r30
    2854:	e8 94       	clt
    2856:	42 30       	cpi	r20, 0x02	; 2
    2858:	c4 f0       	brlt	.+48     	; 0x288a <itoa+0x3a>
    285a:	45 32       	cpi	r20, 0x25	; 37
    285c:	b4 f4       	brge	.+44     	; 0x288a <itoa+0x3a>
    285e:	4a 30       	cpi	r20, 0x0A	; 10
    2860:	29 f4       	brne	.+10     	; 0x286c <itoa+0x1c>
    2862:	97 fb       	bst	r25, 7
    2864:	1e f4       	brtc	.+6      	; 0x286c <itoa+0x1c>
    2866:	90 95       	com	r25
    2868:	81 95       	neg	r24
    286a:	9f 4f       	sbci	r25, 0xFF	; 255
    286c:	64 2f       	mov	r22, r20
    286e:	77 27       	eor	r23, r23
    2870:	0e 94 59 14 	call	0x28b2	; 0x28b2 <__udivmodhi4>
    2874:	80 5d       	subi	r24, 0xD0	; 208
    2876:	8a 33       	cpi	r24, 0x3A	; 58
    2878:	0c f0       	brlt	.+2      	; 0x287c <itoa+0x2c>
    287a:	89 5d       	subi	r24, 0xD9	; 217
    287c:	81 93       	st	Z+, r24
    287e:	cb 01       	movw	r24, r22
    2880:	00 97       	sbiw	r24, 0x00	; 0
    2882:	a1 f7       	brne	.-24     	; 0x286c <itoa+0x1c>
    2884:	16 f4       	brtc	.+4      	; 0x288a <itoa+0x3a>
    2886:	5d e2       	ldi	r21, 0x2D	; 45
    2888:	51 93       	st	Z+, r21
    288a:	10 82       	st	Z, r1
    288c:	c9 01       	movw	r24, r18
    288e:	0c 94 49 14 	jmp	0x2892	; 0x2892 <strrev>

00002892 <strrev>:
    2892:	dc 01       	movw	r26, r24
    2894:	fc 01       	movw	r30, r24
    2896:	67 2f       	mov	r22, r23
    2898:	71 91       	ld	r23, Z+
    289a:	77 23       	and	r23, r23
    289c:	e1 f7       	brne	.-8      	; 0x2896 <strrev+0x4>
    289e:	32 97       	sbiw	r30, 0x02	; 2
    28a0:	04 c0       	rjmp	.+8      	; 0x28aa <strrev+0x18>
    28a2:	7c 91       	ld	r23, X
    28a4:	6d 93       	st	X+, r22
    28a6:	70 83       	st	Z, r23
    28a8:	62 91       	ld	r22, -Z
    28aa:	ae 17       	cp	r26, r30
    28ac:	bf 07       	cpc	r27, r31
    28ae:	c8 f3       	brcs	.-14     	; 0x28a2 <strrev+0x10>
    28b0:	08 95       	ret

000028b2 <__udivmodhi4>:
    28b2:	aa 1b       	sub	r26, r26
    28b4:	bb 1b       	sub	r27, r27
    28b6:	51 e1       	ldi	r21, 0x11	; 17
    28b8:	07 c0       	rjmp	.+14     	; 0x28c8 <__udivmodhi4_ep>

000028ba <__udivmodhi4_loop>:
    28ba:	aa 1f       	adc	r26, r26
    28bc:	bb 1f       	adc	r27, r27
    28be:	a6 17       	cp	r26, r22
    28c0:	b7 07       	cpc	r27, r23
    28c2:	10 f0       	brcs	.+4      	; 0x28c8 <__udivmodhi4_ep>
    28c4:	a6 1b       	sub	r26, r22
    28c6:	b7 0b       	sbc	r27, r23

000028c8 <__udivmodhi4_ep>:
    28c8:	88 1f       	adc	r24, r24
    28ca:	99 1f       	adc	r25, r25
    28cc:	5a 95       	dec	r21
    28ce:	a9 f7       	brne	.-22     	; 0x28ba <__udivmodhi4_loop>
    28d0:	80 95       	com	r24
    28d2:	90 95       	com	r25
    28d4:	bc 01       	movw	r22, r24
    28d6:	cd 01       	movw	r24, r26
    28d8:	08 95       	ret

000028da <_exit>:
    28da:	f8 94       	cli

000028dc <__stop_program>:
    28dc:	ff cf       	rjmp	.-2      	; 0x28dc <__stop_program>
