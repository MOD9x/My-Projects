
Final_HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003072  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e2  00800060  00003072  00003106  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800142  00800142  000031e8  2**0
                  ALLOC
  3 .stab         00002c58  00000000  00000000  000031e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012f2  00000000  00000000  00005e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007132  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007272  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000073e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000902b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009f16  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000acc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ae24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b0b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b87f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 2c 12 	jmp	0x2458	; 0x2458 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 5f 12 	jmp	0x24be	; 0x24be <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e7       	ldi	r30, 0x72	; 114
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 34       	cpi	r26, 0x42	; 66
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e4       	ldi	r26, 0x42	; 66
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 34       	cpi	r26, 0x45	; 69
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 55 08 	call	0x10aa	; 0x10aa <main>
      8a:	0c 94 37 18 	jmp	0x306e	; 0x306e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bb 17 	jmp	0x2f76	; 0x2f76 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e3       	ldi	r26, 0x34	; 52
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d7 17 	jmp	0x2fae	; 0x2fae <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c7 17 	jmp	0x2f8e	; 0x2f8e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e3 17 	jmp	0x2fc6	; 0x2fc6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c7 17 	jmp	0x2f8e	; 0x2f8e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e3 17 	jmp	0x2fc6	; 0x2fc6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bb 17 	jmp	0x2f76	; 0x2f76 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e3       	ldi	r24, 0x34	; 52
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d7 17 	jmp	0x2fae	; 0x2fae <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c7 17 	jmp	0x2f8e	; 0x2f8e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e3 17 	jmp	0x2fc6	; 0x2fc6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c7 17 	jmp	0x2f8e	; 0x2f8e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e3 17 	jmp	0x2fc6	; 0x2fc6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c7 17 	jmp	0x2f8e	; 0x2f8e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e3 17 	jmp	0x2fc6	; 0x2fc6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 cb 17 	jmp	0x2f96	; 0x2f96 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e7 17 	jmp	0x2fce	; 0x2fce <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Read_password>:
/*
 * Description : function for reading password from user
 * and save that password in a_array passed then prints '*' .
 */
void Read_password( uint8 * a_array ,uint8 a_size , uint8 row , uint8 col)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	a2 97       	sbiw	r28, 0x22	; 34
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	de bf       	out	0x3e, r29	; 62
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	cd bf       	out	0x3d, r28	; 61
     b5e:	9f 8f       	std	Y+31, r25	; 0x1f
     b60:	8e 8f       	std	Y+30, r24	; 0x1e
     b62:	68 a3       	std	Y+32, r22	; 0x20
     b64:	49 a3       	std	Y+33, r20	; 0x21
     b66:	2a a3       	std	Y+34, r18	; 0x22
	uint8 read_counter = 0 ;
     b68:	1d 8e       	std	Y+29, r1	; 0x1d
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	aa e7       	ldi	r26, 0x7A	; 122
     b70:	b3 e4       	ldi	r27, 0x43	; 67
     b72:	89 8f       	std	Y+25, r24	; 0x19
     b74:	9a 8f       	std	Y+26, r25	; 0x1a
     b76:	ab 8f       	std	Y+27, r26	; 0x1b
     b78:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b7a:	69 8d       	ldd	r22, Y+25	; 0x19
     b7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b80:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	4a ef       	ldi	r20, 0xFA	; 250
     b88:	54 e4       	ldi	r21, 0x44	; 68
     b8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b8e:	dc 01       	movw	r26, r24
     b90:	cb 01       	movw	r24, r22
     b92:	8d 8b       	std	Y+21, r24	; 0x15
     b94:	9e 8b       	std	Y+22, r25	; 0x16
     b96:	af 8b       	std	Y+23, r26	; 0x17
     b98:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     b9a:	6d 89       	ldd	r22, Y+21	; 0x15
     b9c:	7e 89       	ldd	r23, Y+22	; 0x16
     b9e:	8f 89       	ldd	r24, Y+23	; 0x17
     ba0:	98 8d       	ldd	r25, Y+24	; 0x18
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	40 e8       	ldi	r20, 0x80	; 128
     ba8:	5f e3       	ldi	r21, 0x3F	; 63
     baa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bae:	88 23       	and	r24, r24
     bb0:	2c f4       	brge	.+10     	; 0xbbc <Read_password+0x76>
		__ticks = 1;
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	9c 8b       	std	Y+20, r25	; 0x14
     bb8:	8b 8b       	std	Y+19, r24	; 0x13
     bba:	3f c0       	rjmp	.+126    	; 0xc3a <Read_password+0xf4>
	else if (__tmp > 65535)
     bbc:	6d 89       	ldd	r22, Y+21	; 0x15
     bbe:	7e 89       	ldd	r23, Y+22	; 0x16
     bc0:	8f 89       	ldd	r24, Y+23	; 0x17
     bc2:	98 8d       	ldd	r25, Y+24	; 0x18
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	3f ef       	ldi	r19, 0xFF	; 255
     bc8:	4f e7       	ldi	r20, 0x7F	; 127
     bca:	57 e4       	ldi	r21, 0x47	; 71
     bcc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bd0:	18 16       	cp	r1, r24
     bd2:	4c f5       	brge	.+82     	; 0xc26 <Read_password+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bd4:	69 8d       	ldd	r22, Y+25	; 0x19
     bd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bda:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	40 e2       	ldi	r20, 0x20	; 32
     be2:	51 e4       	ldi	r21, 0x41	; 65
     be4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     be8:	dc 01       	movw	r26, r24
     bea:	cb 01       	movw	r24, r22
     bec:	bc 01       	movw	r22, r24
     bee:	cd 01       	movw	r24, r26
     bf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     bf4:	dc 01       	movw	r26, r24
     bf6:	cb 01       	movw	r24, r22
     bf8:	9c 8b       	std	Y+20, r25	; 0x14
     bfa:	8b 8b       	std	Y+19, r24	; 0x13
     bfc:	0f c0       	rjmp	.+30     	; 0xc1c <Read_password+0xd6>
     bfe:	88 ec       	ldi	r24, 0xC8	; 200
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	9a 8b       	std	Y+18, r25	; 0x12
     c04:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c06:	89 89       	ldd	r24, Y+17	; 0x11
     c08:	9a 89       	ldd	r25, Y+18	; 0x12
     c0a:	01 97       	sbiw	r24, 0x01	; 1
     c0c:	f1 f7       	brne	.-4      	; 0xc0a <Read_password+0xc4>
     c0e:	9a 8b       	std	Y+18, r25	; 0x12
     c10:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c12:	8b 89       	ldd	r24, Y+19	; 0x13
     c14:	9c 89       	ldd	r25, Y+20	; 0x14
     c16:	01 97       	sbiw	r24, 0x01	; 1
     c18:	9c 8b       	std	Y+20, r25	; 0x14
     c1a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c1c:	8b 89       	ldd	r24, Y+19	; 0x13
     c1e:	9c 89       	ldd	r25, Y+20	; 0x14
     c20:	00 97       	sbiw	r24, 0x00	; 0
     c22:	69 f7       	brne	.-38     	; 0xbfe <Read_password+0xb8>
     c24:	b2 c0       	rjmp	.+356    	; 0xd8a <Read_password+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c26:	6d 89       	ldd	r22, Y+21	; 0x15
     c28:	7e 89       	ldd	r23, Y+22	; 0x16
     c2a:	8f 89       	ldd	r24, Y+23	; 0x17
     c2c:	98 8d       	ldd	r25, Y+24	; 0x18
     c2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c32:	dc 01       	movw	r26, r24
     c34:	cb 01       	movw	r24, r22
     c36:	9c 8b       	std	Y+20, r25	; 0x14
     c38:	8b 8b       	std	Y+19, r24	; 0x13
     c3a:	8b 89       	ldd	r24, Y+19	; 0x13
     c3c:	9c 89       	ldd	r25, Y+20	; 0x14
     c3e:	98 8b       	std	Y+16, r25	; 0x10
     c40:	8f 87       	std	Y+15, r24	; 0x0f
     c42:	8f 85       	ldd	r24, Y+15	; 0x0f
     c44:	98 89       	ldd	r25, Y+16	; 0x10
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	f1 f7       	brne	.-4      	; 0xc46 <Read_password+0x100>
     c4a:	98 8b       	std	Y+16, r25	; 0x10
     c4c:	8f 87       	std	Y+15, r24	; 0x0f
     c4e:	9d c0       	rjmp	.+314    	; 0xd8a <Read_password+0x244>

	/* Looping on the password to save it in the array */
	while( read_counter < a_size )
	{

		a_array[read_counter] = KEYPAD_getPressedKey();
     c50:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c52:	28 2f       	mov	r18, r24
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c58:	9f 8d       	ldd	r25, Y+31	; 0x1f
     c5a:	8c 01       	movw	r16, r24
     c5c:	02 0f       	add	r16, r18
     c5e:	13 1f       	adc	r17, r19
     c60:	0e 94 52 09 	call	0x12a4	; 0x12a4 <KEYPAD_getPressedKey>
     c64:	f8 01       	movw	r30, r16
     c66:	80 83       	st	Z, r24

		LCD_displayCharacterRowColumn( row , col+read_counter , ( a_array[read_counter] + 48 ) );
     c68:	9a a1       	ldd	r25, Y+34	; 0x22
     c6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c6c:	49 2f       	mov	r20, r25
     c6e:	48 0f       	add	r20, r24
     c70:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c78:	9f 8d       	ldd	r25, Y+31	; 0x1f
     c7a:	fc 01       	movw	r30, r24
     c7c:	e2 0f       	add	r30, r18
     c7e:	f3 1f       	adc	r31, r19
     c80:	80 81       	ld	r24, Z
     c82:	98 2f       	mov	r25, r24
     c84:	90 5d       	subi	r25, 0xD0	; 208
     c86:	89 a1       	ldd	r24, Y+33	; 0x21
     c88:	64 2f       	mov	r22, r20
     c8a:	49 2f       	mov	r20, r25
     c8c:	0e 94 37 10 	call	0x206e	; 0x206e <LCD_displayCharacterRowColumn>
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	aa e7       	ldi	r26, 0x7A	; 122
     c96:	b3 e4       	ldi	r27, 0x43	; 67
     c98:	8b 87       	std	Y+11, r24	; 0x0b
     c9a:	9c 87       	std	Y+12, r25	; 0x0c
     c9c:	ad 87       	std	Y+13, r26	; 0x0d
     c9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ca0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ca2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ca4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ca6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	4a ef       	ldi	r20, 0xFA	; 250
     cae:	54 e4       	ldi	r21, 0x44	; 68
     cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cb4:	dc 01       	movw	r26, r24
     cb6:	cb 01       	movw	r24, r22
     cb8:	8f 83       	std	Y+7, r24	; 0x07
     cba:	98 87       	std	Y+8, r25	; 0x08
     cbc:	a9 87       	std	Y+9, r26	; 0x09
     cbe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cc0:	6f 81       	ldd	r22, Y+7	; 0x07
     cc2:	78 85       	ldd	r23, Y+8	; 0x08
     cc4:	89 85       	ldd	r24, Y+9	; 0x09
     cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
     cc8:	20 e0       	ldi	r18, 0x00	; 0
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	40 e8       	ldi	r20, 0x80	; 128
     cce:	5f e3       	ldi	r21, 0x3F	; 63
     cd0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cd4:	88 23       	and	r24, r24
     cd6:	2c f4       	brge	.+10     	; 0xce2 <Read_password+0x19c>
		__ticks = 1;
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	9e 83       	std	Y+6, r25	; 0x06
     cde:	8d 83       	std	Y+5, r24	; 0x05
     ce0:	3f c0       	rjmp	.+126    	; 0xd60 <Read_password+0x21a>
	else if (__tmp > 65535)
     ce2:	6f 81       	ldd	r22, Y+7	; 0x07
     ce4:	78 85       	ldd	r23, Y+8	; 0x08
     ce6:	89 85       	ldd	r24, Y+9	; 0x09
     ce8:	9a 85       	ldd	r25, Y+10	; 0x0a
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	3f ef       	ldi	r19, 0xFF	; 255
     cee:	4f e7       	ldi	r20, 0x7F	; 127
     cf0:	57 e4       	ldi	r21, 0x47	; 71
     cf2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cf6:	18 16       	cp	r1, r24
     cf8:	4c f5       	brge	.+82     	; 0xd4c <Read_password+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cfa:	6b 85       	ldd	r22, Y+11	; 0x0b
     cfc:	7c 85       	ldd	r23, Y+12	; 0x0c
     cfe:	8d 85       	ldd	r24, Y+13	; 0x0d
     d00:	9e 85       	ldd	r25, Y+14	; 0x0e
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	40 e2       	ldi	r20, 0x20	; 32
     d08:	51 e4       	ldi	r21, 0x41	; 65
     d0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d0e:	dc 01       	movw	r26, r24
     d10:	cb 01       	movw	r24, r22
     d12:	bc 01       	movw	r22, r24
     d14:	cd 01       	movw	r24, r26
     d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d1a:	dc 01       	movw	r26, r24
     d1c:	cb 01       	movw	r24, r22
     d1e:	9e 83       	std	Y+6, r25	; 0x06
     d20:	8d 83       	std	Y+5, r24	; 0x05
     d22:	0f c0       	rjmp	.+30     	; 0xd42 <Read_password+0x1fc>
     d24:	88 ec       	ldi	r24, 0xC8	; 200
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	9c 83       	std	Y+4, r25	; 0x04
     d2a:	8b 83       	std	Y+3, r24	; 0x03
     d2c:	8b 81       	ldd	r24, Y+3	; 0x03
     d2e:	9c 81       	ldd	r25, Y+4	; 0x04
     d30:	01 97       	sbiw	r24, 0x01	; 1
     d32:	f1 f7       	brne	.-4      	; 0xd30 <Read_password+0x1ea>
     d34:	9c 83       	std	Y+4, r25	; 0x04
     d36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d38:	8d 81       	ldd	r24, Y+5	; 0x05
     d3a:	9e 81       	ldd	r25, Y+6	; 0x06
     d3c:	01 97       	sbiw	r24, 0x01	; 1
     d3e:	9e 83       	std	Y+6, r25	; 0x06
     d40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d42:	8d 81       	ldd	r24, Y+5	; 0x05
     d44:	9e 81       	ldd	r25, Y+6	; 0x06
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	69 f7       	brne	.-38     	; 0xd24 <Read_password+0x1de>
     d4a:	14 c0       	rjmp	.+40     	; 0xd74 <Read_password+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d4c:	6f 81       	ldd	r22, Y+7	; 0x07
     d4e:	78 85       	ldd	r23, Y+8	; 0x08
     d50:	89 85       	ldd	r24, Y+9	; 0x09
     d52:	9a 85       	ldd	r25, Y+10	; 0x0a
     d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d58:	dc 01       	movw	r26, r24
     d5a:	cb 01       	movw	r24, r22
     d5c:	9e 83       	std	Y+6, r25	; 0x06
     d5e:	8d 83       	std	Y+5, r24	; 0x05
     d60:	8d 81       	ldd	r24, Y+5	; 0x05
     d62:	9e 81       	ldd	r25, Y+6	; 0x06
     d64:	9a 83       	std	Y+2, r25	; 0x02
     d66:	89 83       	std	Y+1, r24	; 0x01
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	9a 81       	ldd	r25, Y+2	; 0x02
     d6c:	01 97       	sbiw	r24, 0x01	; 1
     d6e:	f1 f7       	brne	.-4      	; 0xd6c <Read_password+0x226>
     d70:	9a 83       	std	Y+2, r25	; 0x02
     d72:	89 83       	std	Y+1, r24	; 0x01
		/* number + 48 = ASKII of the number */

		_delay_ms(250);
		/* delay for make sure key pressed once */

		LCD_displayCharacterRowColumn( row , col+read_counter , '*');
     d74:	9a a1       	ldd	r25, Y+34	; 0x22
     d76:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d78:	98 0f       	add	r25, r24
     d7a:	89 a1       	ldd	r24, Y+33	; 0x21
     d7c:	69 2f       	mov	r22, r25
     d7e:	4a e2       	ldi	r20, 0x2A	; 42
     d80:	0e 94 37 10 	call	0x206e	; 0x206e <LCD_displayCharacterRowColumn>
		/* password masking for safety */

		read_counter++;
     d84:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d86:	8f 5f       	subi	r24, 0xFF	; 255
     d88:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(250);
	/* delay for make sure key pressed once */

	/* Looping on the password to save it in the array */
	while( read_counter < a_size )
     d8a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     d8c:	88 a1       	ldd	r24, Y+32	; 0x20
     d8e:	98 17       	cp	r25, r24
     d90:	08 f4       	brcc	.+2      	; 0xd94 <Read_password+0x24e>
     d92:	5e cf       	rjmp	.-324    	; 0xc50 <Read_password+0x10a>
		/* password masking for safety */

		read_counter++;
	}

	while( KEYPAD_getPressedKey() != '=')
     d94:	0e 94 52 09 	call	0x12a4	; 0x12a4 <KEYPAD_getPressedKey>
     d98:	8d 33       	cpi	r24, 0x3D	; 61
     d9a:	e1 f7       	brne	.-8      	; 0xd94 <Read_password+0x24e>
	{
		/* polling until enter key '=' be pressed . */
	}

}
     d9c:	a2 96       	adiw	r28, 0x22	; 34
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	f8 94       	cli
     da2:	de bf       	out	0x3e, r29	; 62
     da4:	0f be       	out	0x3f, r0	; 63
     da6:	cd bf       	out	0x3d, r28	; 61
     da8:	cf 91       	pop	r28
     daa:	df 91       	pop	r29
     dac:	1f 91       	pop	r17
     dae:	0f 91       	pop	r16
     db0:	08 95       	ret

00000db2 <Creat_password>:

/*
 * Description : function for creating password .
 */
uint8 Creat_password(uint8 * a_array ,uint8 a_size)
{
     db2:	df 93       	push	r29
     db4:	cf 93       	push	r28
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
     dba:	a0 97       	sbiw	r28, 0x20	; 32
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	f8 94       	cli
     dc0:	de bf       	out	0x3e, r29	; 62
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	cd bf       	out	0x3d, r28	; 61
     dc6:	9e 8f       	std	Y+30, r25	; 0x1e
     dc8:	8d 8f       	std	Y+29, r24	; 0x1d
     dca:	6f 8f       	std	Y+31, r22	; 0x1f
		LCD_clearScreen();
     dcc:	0e 94 04 10 	call	0x2008	; 0x2008 <LCD_clearScreen>

		LCD_displayString("plz enter pass :");
     dd0:	80 e6       	ldi	r24, 0x60	; 96
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_displayString>

		Read_password( a_array,a_size,1,0 );
     dd8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dda:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ddc:	6f 8d       	ldd	r22, Y+31	; 0x1f
     dde:	41 e0       	ldi	r20, 0x01	; 1
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	0e 94 a3 05 	call	0xb46	; 0xb46 <Read_password>

		UART_sendByte(HMI_READY);
     de6:	80 ef       	ldi	r24, 0xF0	; 240
     de8:	0e 94 76 13 	call	0x26ec	; 0x26ec <UART_sendByte>

		UART_sendArray( a_array , a_size);
     dec:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dee:	9e 8d       	ldd	r25, Y+30	; 0x1e
     df0:	6f 8d       	ldd	r22, Y+31	; 0x1f
     df2:	0e 94 05 14 	call	0x280a	; 0x280a <UART_sendArray>

		/******************** first password reading and sending by UART ************/

		LCD_displayStringRowColumn(0,0,"plz re-enter the");
     df6:	21 e7       	ldi	r18, 0x71	; 113
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	60 e0       	ldi	r22, 0x00	; 0
     dfe:	a9 01       	movw	r20, r18
     e00:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"same pass :");
     e04:	22 e8       	ldi	r18, 0x82	; 130
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	60 e0       	ldi	r22, 0x00	; 0
     e0c:	a9 01       	movw	r20, r18
     e0e:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <LCD_displayStringRowColumn>

		Read_password( a_array,a_size,1,11);
     e12:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e14:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e16:	6f 8d       	ldd	r22, Y+31	; 0x1f
     e18:	41 e0       	ldi	r20, 0x01	; 1
     e1a:	2b e0       	ldi	r18, 0x0B	; 11
     e1c:	0e 94 a3 05 	call	0xb46	; 0xb46 <Read_password>

		UART_sendByte(HMI_READY);
     e20:	80 ef       	ldi	r24, 0xF0	; 240
     e22:	0e 94 76 13 	call	0x26ec	; 0x26ec <UART_sendByte>

		UART_sendArray( a_array , a_size);
     e26:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e28:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e2a:	6f 8d       	ldd	r22, Y+31	; 0x1f
     e2c:	0e 94 05 14 	call	0x280a	; 0x280a <UART_sendArray>

		/******************** second password reading and sending by UART ************/

		if( UART_receiveByte() == MATCHED_PASSWORDS)
     e30:	0e 94 8d 13 	call	0x271a	; 0x271a <UART_receiveByte>
     e34:	8a 30       	cpi	r24, 0x0A	; 10
     e36:	09 f0       	breq	.+2      	; 0xe3a <Creat_password+0x88>
     e38:	7b c0       	rjmp	.+246    	; 0xf30 <Creat_password+0x17e>
		{
			LCD_clearScreen();
     e3a:	0e 94 04 10 	call	0x2008	; 0x2008 <LCD_clearScreen>
			LCD_displayString("password created");
     e3e:	8e e8       	ldi	r24, 0x8E	; 142
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_displayString>
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	aa e7       	ldi	r26, 0x7A	; 122
     e4c:	b4 e4       	ldi	r27, 0x44	; 68
     e4e:	89 8f       	std	Y+25, r24	; 0x19
     e50:	9a 8f       	std	Y+26, r25	; 0x1a
     e52:	ab 8f       	std	Y+27, r26	; 0x1b
     e54:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e56:	69 8d       	ldd	r22, Y+25	; 0x19
     e58:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	4a ef       	ldi	r20, 0xFA	; 250
     e64:	54 e4       	ldi	r21, 0x44	; 68
     e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e6a:	dc 01       	movw	r26, r24
     e6c:	cb 01       	movw	r24, r22
     e6e:	8d 8b       	std	Y+21, r24	; 0x15
     e70:	9e 8b       	std	Y+22, r25	; 0x16
     e72:	af 8b       	std	Y+23, r26	; 0x17
     e74:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e76:	6d 89       	ldd	r22, Y+21	; 0x15
     e78:	7e 89       	ldd	r23, Y+22	; 0x16
     e7a:	8f 89       	ldd	r24, Y+23	; 0x17
     e7c:	98 8d       	ldd	r25, Y+24	; 0x18
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	40 e8       	ldi	r20, 0x80	; 128
     e84:	5f e3       	ldi	r21, 0x3F	; 63
     e86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e8a:	88 23       	and	r24, r24
     e8c:	2c f4       	brge	.+10     	; 0xe98 <Creat_password+0xe6>
		__ticks = 1;
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	9c 8b       	std	Y+20, r25	; 0x14
     e94:	8b 8b       	std	Y+19, r24	; 0x13
     e96:	3f c0       	rjmp	.+126    	; 0xf16 <Creat_password+0x164>
	else if (__tmp > 65535)
     e98:	6d 89       	ldd	r22, Y+21	; 0x15
     e9a:	7e 89       	ldd	r23, Y+22	; 0x16
     e9c:	8f 89       	ldd	r24, Y+23	; 0x17
     e9e:	98 8d       	ldd	r25, Y+24	; 0x18
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	3f ef       	ldi	r19, 0xFF	; 255
     ea4:	4f e7       	ldi	r20, 0x7F	; 127
     ea6:	57 e4       	ldi	r21, 0x47	; 71
     ea8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     eac:	18 16       	cp	r1, r24
     eae:	4c f5       	brge	.+82     	; 0xf02 <Creat_password+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eb0:	69 8d       	ldd	r22, Y+25	; 0x19
     eb2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     eb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     eb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	40 e2       	ldi	r20, 0x20	; 32
     ebe:	51 e4       	ldi	r21, 0x41	; 65
     ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ec4:	dc 01       	movw	r26, r24
     ec6:	cb 01       	movw	r24, r22
     ec8:	bc 01       	movw	r22, r24
     eca:	cd 01       	movw	r24, r26
     ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ed0:	dc 01       	movw	r26, r24
     ed2:	cb 01       	movw	r24, r22
     ed4:	9c 8b       	std	Y+20, r25	; 0x14
     ed6:	8b 8b       	std	Y+19, r24	; 0x13
     ed8:	0f c0       	rjmp	.+30     	; 0xef8 <Creat_password+0x146>
     eda:	88 ec       	ldi	r24, 0xC8	; 200
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	9a 8b       	std	Y+18, r25	; 0x12
     ee0:	89 8b       	std	Y+17, r24	; 0x11
     ee2:	89 89       	ldd	r24, Y+17	; 0x11
     ee4:	9a 89       	ldd	r25, Y+18	; 0x12
     ee6:	01 97       	sbiw	r24, 0x01	; 1
     ee8:	f1 f7       	brne	.-4      	; 0xee6 <Creat_password+0x134>
     eea:	9a 8b       	std	Y+18, r25	; 0x12
     eec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eee:	8b 89       	ldd	r24, Y+19	; 0x13
     ef0:	9c 89       	ldd	r25, Y+20	; 0x14
     ef2:	01 97       	sbiw	r24, 0x01	; 1
     ef4:	9c 8b       	std	Y+20, r25	; 0x14
     ef6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ef8:	8b 89       	ldd	r24, Y+19	; 0x13
     efa:	9c 89       	ldd	r25, Y+20	; 0x14
     efc:	00 97       	sbiw	r24, 0x00	; 0
     efe:	69 f7       	brne	.-38     	; 0xeda <Creat_password+0x128>
     f00:	14 c0       	rjmp	.+40     	; 0xf2a <Creat_password+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f02:	6d 89       	ldd	r22, Y+21	; 0x15
     f04:	7e 89       	ldd	r23, Y+22	; 0x16
     f06:	8f 89       	ldd	r24, Y+23	; 0x17
     f08:	98 8d       	ldd	r25, Y+24	; 0x18
     f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f0e:	dc 01       	movw	r26, r24
     f10:	cb 01       	movw	r24, r22
     f12:	9c 8b       	std	Y+20, r25	; 0x14
     f14:	8b 8b       	std	Y+19, r24	; 0x13
     f16:	8b 89       	ldd	r24, Y+19	; 0x13
     f18:	9c 89       	ldd	r25, Y+20	; 0x14
     f1a:	98 8b       	std	Y+16, r25	; 0x10
     f1c:	8f 87       	std	Y+15, r24	; 0x0f
     f1e:	8f 85       	ldd	r24, Y+15	; 0x0f
     f20:	98 89       	ldd	r25, Y+16	; 0x10
     f22:	01 97       	sbiw	r24, 0x01	; 1
     f24:	f1 f7       	brne	.-4      	; 0xf22 <Creat_password+0x170>
     f26:	98 8b       	std	Y+16, r25	; 0x10
     f28:	8f 87       	std	Y+15, r24	; 0x0f
			return UNMATCHED_PASSWORDS;
		}
		/* if the function returned ( matched = True = 0x0A ) program will reply matched
		 * if returned ( unmatched = False = 0 )  program will reply unmatched .
		 */
		return MATCHED_PASSWORDS;
     f2a:	8a e0       	ldi	r24, 0x0A	; 10
     f2c:	88 a3       	std	Y+32, r24	; 0x20
     f2e:	79 c0       	rjmp	.+242    	; 0x1022 <Creat_password+0x270>
			_delay_ms(1000);
		}

		else
		{
			LCD_clearScreen();
     f30:	0e 94 04 10 	call	0x2008	; 0x2008 <LCD_clearScreen>
			LCD_displayString("not matched");
     f34:	8f e9       	ldi	r24, 0x9F	; 159
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_displayString>
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	aa e7       	ldi	r26, 0x7A	; 122
     f42:	b4 e4       	ldi	r27, 0x44	; 68
     f44:	8b 87       	std	Y+11, r24	; 0x0b
     f46:	9c 87       	std	Y+12, r25	; 0x0c
     f48:	ad 87       	std	Y+13, r26	; 0x0d
     f4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f4c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f4e:	7c 85       	ldd	r23, Y+12	; 0x0c
     f50:	8d 85       	ldd	r24, Y+13	; 0x0d
     f52:	9e 85       	ldd	r25, Y+14	; 0x0e
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	4a ef       	ldi	r20, 0xFA	; 250
     f5a:	54 e4       	ldi	r21, 0x44	; 68
     f5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f60:	dc 01       	movw	r26, r24
     f62:	cb 01       	movw	r24, r22
     f64:	8f 83       	std	Y+7, r24	; 0x07
     f66:	98 87       	std	Y+8, r25	; 0x08
     f68:	a9 87       	std	Y+9, r26	; 0x09
     f6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f6c:	6f 81       	ldd	r22, Y+7	; 0x07
     f6e:	78 85       	ldd	r23, Y+8	; 0x08
     f70:	89 85       	ldd	r24, Y+9	; 0x09
     f72:	9a 85       	ldd	r25, Y+10	; 0x0a
     f74:	20 e0       	ldi	r18, 0x00	; 0
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	40 e8       	ldi	r20, 0x80	; 128
     f7a:	5f e3       	ldi	r21, 0x3F	; 63
     f7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f80:	88 23       	and	r24, r24
     f82:	2c f4       	brge	.+10     	; 0xf8e <Creat_password+0x1dc>
		__ticks = 1;
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	9e 83       	std	Y+6, r25	; 0x06
     f8a:	8d 83       	std	Y+5, r24	; 0x05
     f8c:	3f c0       	rjmp	.+126    	; 0x100c <Creat_password+0x25a>
	else if (__tmp > 65535)
     f8e:	6f 81       	ldd	r22, Y+7	; 0x07
     f90:	78 85       	ldd	r23, Y+8	; 0x08
     f92:	89 85       	ldd	r24, Y+9	; 0x09
     f94:	9a 85       	ldd	r25, Y+10	; 0x0a
     f96:	20 e0       	ldi	r18, 0x00	; 0
     f98:	3f ef       	ldi	r19, 0xFF	; 255
     f9a:	4f e7       	ldi	r20, 0x7F	; 127
     f9c:	57 e4       	ldi	r21, 0x47	; 71
     f9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fa2:	18 16       	cp	r1, r24
     fa4:	4c f5       	brge	.+82     	; 0xff8 <Creat_password+0x246>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fa6:	6b 85       	ldd	r22, Y+11	; 0x0b
     fa8:	7c 85       	ldd	r23, Y+12	; 0x0c
     faa:	8d 85       	ldd	r24, Y+13	; 0x0d
     fac:	9e 85       	ldd	r25, Y+14	; 0x0e
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	40 e2       	ldi	r20, 0x20	; 32
     fb4:	51 e4       	ldi	r21, 0x41	; 65
     fb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fba:	dc 01       	movw	r26, r24
     fbc:	cb 01       	movw	r24, r22
     fbe:	bc 01       	movw	r22, r24
     fc0:	cd 01       	movw	r24, r26
     fc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fc6:	dc 01       	movw	r26, r24
     fc8:	cb 01       	movw	r24, r22
     fca:	9e 83       	std	Y+6, r25	; 0x06
     fcc:	8d 83       	std	Y+5, r24	; 0x05
     fce:	0f c0       	rjmp	.+30     	; 0xfee <Creat_password+0x23c>
     fd0:	88 ec       	ldi	r24, 0xC8	; 200
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	9c 83       	std	Y+4, r25	; 0x04
     fd6:	8b 83       	std	Y+3, r24	; 0x03
     fd8:	8b 81       	ldd	r24, Y+3	; 0x03
     fda:	9c 81       	ldd	r25, Y+4	; 0x04
     fdc:	01 97       	sbiw	r24, 0x01	; 1
     fde:	f1 f7       	brne	.-4      	; 0xfdc <Creat_password+0x22a>
     fe0:	9c 83       	std	Y+4, r25	; 0x04
     fe2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fe4:	8d 81       	ldd	r24, Y+5	; 0x05
     fe6:	9e 81       	ldd	r25, Y+6	; 0x06
     fe8:	01 97       	sbiw	r24, 0x01	; 1
     fea:	9e 83       	std	Y+6, r25	; 0x06
     fec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fee:	8d 81       	ldd	r24, Y+5	; 0x05
     ff0:	9e 81       	ldd	r25, Y+6	; 0x06
     ff2:	00 97       	sbiw	r24, 0x00	; 0
     ff4:	69 f7       	brne	.-38     	; 0xfd0 <Creat_password+0x21e>
     ff6:	14 c0       	rjmp	.+40     	; 0x1020 <Creat_password+0x26e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ff8:	6f 81       	ldd	r22, Y+7	; 0x07
     ffa:	78 85       	ldd	r23, Y+8	; 0x08
     ffc:	89 85       	ldd	r24, Y+9	; 0x09
     ffe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	9e 83       	std	Y+6, r25	; 0x06
    100a:	8d 83       	std	Y+5, r24	; 0x05
    100c:	8d 81       	ldd	r24, Y+5	; 0x05
    100e:	9e 81       	ldd	r25, Y+6	; 0x06
    1010:	9a 83       	std	Y+2, r25	; 0x02
    1012:	89 83       	std	Y+1, r24	; 0x01
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	9a 81       	ldd	r25, Y+2	; 0x02
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	f1 f7       	brne	.-4      	; 0x1018 <Creat_password+0x266>
    101c:	9a 83       	std	Y+2, r25	; 0x02
    101e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			return UNMATCHED_PASSWORDS;
    1020:	18 a2       	std	Y+32, r1	; 0x20
    1022:	88 a1       	ldd	r24, Y+32	; 0x20
		 * if returned ( unmatched = False = 0 )  program will reply unmatched .
		 */
		return MATCHED_PASSWORDS;

		/******************** passwords checking  ************/
}
    1024:	a0 96       	adiw	r28, 0x20	; 32
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	f8 94       	cli
    102a:	de bf       	out	0x3e, r29	; 62
    102c:	0f be       	out	0x3f, r0	; 63
    102e:	cd bf       	out	0x3d, r28	; 61
    1030:	cf 91       	pop	r28
    1032:	df 91       	pop	r29
    1034:	08 95       	ret

00001036 <Passward_login>:

/*
 * Description : function for checking the password received by UART .
 */
uint8 Passward_login(uint8 * a_array ,uint8 a_size)
{
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	00 d0       	rcall	.+0      	; 0x103c <Passward_login+0x6>
    103c:	00 d0       	rcall	.+0      	; 0x103e <Passward_login+0x8>
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	9a 83       	std	Y+2, r25	; 0x02
    1044:	89 83       	std	Y+1, r24	; 0x01
    1046:	6b 83       	std	Y+3, r22	; 0x03

	LCD_clearScreen();
    1048:	0e 94 04 10 	call	0x2008	; 0x2008 <LCD_clearScreen>

	LCD_displayString("plz enter pass :");
    104c:	80 e6       	ldi	r24, 0x60	; 96
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_displayString>

	Read_password( a_array,a_size,1,0 );
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	9a 81       	ldd	r25, Y+2	; 0x02
    1058:	6b 81       	ldd	r22, Y+3	; 0x03
    105a:	41 e0       	ldi	r20, 0x01	; 1
    105c:	20 e0       	ldi	r18, 0x00	; 0
    105e:	0e 94 a3 05 	call	0xb46	; 0xb46 <Read_password>

	UART_sendByte(HMI_READY);
    1062:	80 ef       	ldi	r24, 0xF0	; 240
    1064:	0e 94 76 13 	call	0x26ec	; 0x26ec <UART_sendByte>

	UART_sendArray( a_array , a_size);
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	9a 81       	ldd	r25, Y+2	; 0x02
    106c:	6b 81       	ldd	r22, Y+3	; 0x03
    106e:	0e 94 05 14 	call	0x280a	; 0x280a <UART_sendArray>

	/******************** password reading and sending by UART ************/

	if(UART_receiveByte() == MATCHED_PASSWORDS)
    1072:	0e 94 8d 13 	call	0x271a	; 0x271a <UART_receiveByte>
    1076:	8a 30       	cpi	r24, 0x0A	; 10
    1078:	11 f0       	breq	.+4      	; 0x107e <Passward_login+0x48>
	{
	}
	else
	{
		return UNMATCHED_PASSWORDS ;
    107a:	1c 82       	std	Y+4, r1	; 0x04
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <Passward_login+0x4c>
	}
	/* if the function returned ( matched = True = 0x0A ) program will reply matched
	 * if returned ( unmatched = False = 0 )  program will reply unmatched .
	 */
	return MATCHED_PASSWORDS;
    107e:	8a e0       	ldi	r24, 0x0A	; 10
    1080:	8c 83       	std	Y+4, r24	; 0x04
    1082:	8c 81       	ldd	r24, Y+4	; 0x04

	/******************** passwords checking  ************/
}
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	cf 91       	pop	r28
    108e:	df 91       	pop	r29
    1090:	08 95       	ret

00001092 <TIMER_counter>:

void TIMER_counter(void)
{
    1092:	df 93       	push	r29
    1094:	cf 93       	push	r28
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
    109a:	80 91 42 01 	lds	r24, 0x0142
    109e:	8f 5f       	subi	r24, 0xFF	; 255
    10a0:	80 93 42 01 	sts	0x0142, r24
}
    10a4:	cf 91       	pop	r28
    10a6:	df 91       	pop	r29
    10a8:	08 95       	ret

000010aa <main>:

int main()
{
    10aa:	df 93       	push	r29
    10ac:	cf 93       	push	r28
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
    10b2:	66 97       	sbiw	r28, 0x16	; 22
    10b4:	0f b6       	in	r0, 0x3f	; 63
    10b6:	f8 94       	cli
    10b8:	de bf       	out	0x3e, r29	; 62
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	cd bf       	out	0x3d, r28	; 61
	uint8 Arr1[SIZE] ,key=0 , counter=0;;
    10be:	1a 82       	std	Y+2, r1	; 0x02
    10c0:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Array 1 : is the password .
]	 */

	Timer1_ConfigType Timer1_configs = { 0 , 8000 , TIMER1_1024_PRESCALER , TIMER1_CTC_MODE };
    10c2:	ae 01       	movw	r20, r28
    10c4:	48 5f       	subi	r20, 0xF8	; 248
    10c6:	5f 4f       	sbci	r21, 0xFF	; 255
    10c8:	5b 8b       	std	Y+19, r21	; 0x13
    10ca:	4a 8b       	std	Y+18, r20	; 0x12
    10cc:	8c e3       	ldi	r24, 0x3C	; 60
    10ce:	91 e0       	ldi	r25, 0x01	; 1
    10d0:	9d 8b       	std	Y+21, r25	; 0x15
    10d2:	8c 8b       	std	Y+20, r24	; 0x14
    10d4:	96 e0       	ldi	r25, 0x06	; 6
    10d6:	9e 8b       	std	Y+22, r25	; 0x16
    10d8:	ec 89       	ldd	r30, Y+20	; 0x14
    10da:	fd 89       	ldd	r31, Y+21	; 0x15
    10dc:	00 80       	ld	r0, Z
    10de:	4c 89       	ldd	r20, Y+20	; 0x14
    10e0:	5d 89       	ldd	r21, Y+21	; 0x15
    10e2:	4f 5f       	subi	r20, 0xFF	; 255
    10e4:	5f 4f       	sbci	r21, 0xFF	; 255
    10e6:	5d 8b       	std	Y+21, r21	; 0x15
    10e8:	4c 8b       	std	Y+20, r20	; 0x14
    10ea:	ea 89       	ldd	r30, Y+18	; 0x12
    10ec:	fb 89       	ldd	r31, Y+19	; 0x13
    10ee:	00 82       	st	Z, r0
    10f0:	4a 89       	ldd	r20, Y+18	; 0x12
    10f2:	5b 89       	ldd	r21, Y+19	; 0x13
    10f4:	4f 5f       	subi	r20, 0xFF	; 255
    10f6:	5f 4f       	sbci	r21, 0xFF	; 255
    10f8:	5b 8b       	std	Y+19, r21	; 0x13
    10fa:	4a 8b       	std	Y+18, r20	; 0x12
    10fc:	5e 89       	ldd	r21, Y+22	; 0x16
    10fe:	51 50       	subi	r21, 0x01	; 1
    1100:	5e 8b       	std	Y+22, r21	; 0x16
    1102:	8e 89       	ldd	r24, Y+22	; 0x16
    1104:	88 23       	and	r24, r24
    1106:	41 f7       	brne	.-48     	; 0x10d8 <main+0x2e>
	/* timer1 configurations : initial value , compare value , pre-scaler , timer mode */

	UART_ConfigType UART_Configs = {UART_8bits,UART_parityEven,UART_1StopBit,9600};
    1108:	83 e0       	ldi	r24, 0x03	; 3
    110a:	8e 87       	std	Y+14, r24	; 0x0e
    110c:	82 e0       	ldi	r24, 0x02	; 2
    110e:	8f 87       	std	Y+15, r24	; 0x0f
    1110:	18 8a       	std	Y+16, r1	; 0x10
    1112:	80 e8       	ldi	r24, 0x80	; 128
    1114:	89 8b       	std	Y+17, r24	; 0x11
	/* UART configurations : number of bits , parity bit , stop bit , baud rate . */

	UART_init(&UART_Configs);
    1116:	ce 01       	movw	r24, r28
    1118:	0e 96       	adiw	r24, 0x0e	; 14
    111a:	0e 94 07 13 	call	0x260e	; 0x260e <UART_init>
	/* UART initialization */

	LCD_init();
    111e:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <LCD_init>

	Timer1_init( &Timer1_configs );
    1122:	ce 01       	movw	r24, r28
    1124:	08 96       	adiw	r24, 0x08	; 8
    1126:	0e 94 92 12 	call	0x2524	; 0x2524 <Timer1_init>
	/* Timer 1 initialization */

	Timer1_setCallBack(TIMER_counter);
    112a:	89 e4       	ldi	r24, 0x49	; 73
    112c:	98 e0       	ldi	r25, 0x08	; 8
    112e:	0e 94 f5 12 	call	0x25ea	; 0x25ea <Timer1_setCallBack>
	/* Timer 1 callback setting which used in timer 1 ISR */

	SREG |= (1<<7);
    1132:	af e5       	ldi	r26, 0x5F	; 95
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	ef e5       	ldi	r30, 0x5F	; 95
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	80 68       	ori	r24, 0x80	; 128
    113e:	8c 93       	st	X, r24
	/*  I-bit enabled */

	while(  Creat_password( Arr1 ,SIZE ) != MATCHED_PASSWORDS );
    1140:	ce 01       	movw	r24, r28
    1142:	03 96       	adiw	r24, 0x03	; 3
    1144:	65 e0       	ldi	r22, 0x05	; 5
    1146:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <Creat_password>
    114a:	8a 30       	cpi	r24, 0x0A	; 10
    114c:	c9 f7       	brne	.-14     	; 0x1140 <main+0x96>
	 * if returned ( unmatched = False = 0 )  program will ask again .
	 */

	while(1)
	{
		counter = 3;
    114e:	83 e0       	ldi	r24, 0x03	; 3
    1150:	89 83       	std	Y+1, r24	; 0x01
		/* number of chance to lock the system */

		LCD_displayStringRowColumn(0,0,"+ : open door   ");
    1152:	2b ea       	ldi	r18, 0xAB	; 171
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	60 e0       	ldi	r22, 0x00	; 0
    115a:	a9 01       	movw	r20, r18
    115c:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"- : change pass ");
    1160:	2c eb       	ldi	r18, 0xBC	; 188
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	60 e0       	ldi	r22, 0x00	; 0
    1168:	a9 01       	movw	r20, r18
    116a:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <LCD_displayStringRowColumn>

		key = KEYPAD_getPressedKey();
    116e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <KEYPAD_getPressedKey>
    1172:	8a 83       	std	Y+2, r24	; 0x02
		/****************** main options ******************************************/

		UART_sendByte(key);
    1174:	8a 81       	ldd	r24, Y+2	; 0x02
    1176:	0e 94 76 13 	call	0x26ec	; 0x26ec <UART_sendByte>

		if( key != '+' && key !='-' )
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	8b 32       	cpi	r24, 0x2B	; 43
    117e:	09 f4       	brne	.+2      	; 0x1182 <main+0xd8>
    1180:	54 c0       	rjmp	.+168    	; 0x122a <main+0x180>
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	8d 32       	cpi	r24, 0x2D	; 45
    1186:	19 f7       	brne	.-58     	; 0x114e <main+0xa4>
    1188:	50 c0       	rjmp	.+160    	; 0x122a <main+0x180>
		 * else program will do nothing .
		 */

		while ( Passward_login(Arr1,SIZE) != MATCHED_PASSWORDS)
		{
			counter--;
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	81 50       	subi	r24, 0x01	; 1
    118e:	89 83       	std	Y+1, r24	; 0x01

			g_ticks=0;
    1190:	10 92 42 01 	sts	0x0142, r1

			if( counter == 0 )
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	88 23       	and	r24, r24
    1198:	61 f5       	brne	.+88     	; 0x11f2 <main+0x148>
			{
				LCD_displayStringRowColumn(0,0,"wrong pass try  ");
    119a:	2d ec       	ldi	r18, 0xCD	; 205
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	60 e0       	ldi	r22, 0x00	; 0
    11a2:	a9 01       	movw	r20, r18
    11a4:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1,0,"again in    sec ");
    11a8:	2e ed       	ldi	r18, 0xDE	; 222
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	60 e0       	ldi	r22, 0x00	; 0
    11b0:	a9 01       	movw	r20, r18
    11b2:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <LCD_displayStringRowColumn>
    11b6:	18 c0       	rjmp	.+48     	; 0x11e8 <main+0x13e>

				while( g_ticks != 60)
				{
					LCD_intgerToStringRowColumn(1,9, ( 60 - g_ticks ) );
    11b8:	80 91 42 01 	lds	r24, 0x0142
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	8c e3       	ldi	r24, 0x3C	; 60
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	fc 01       	movw	r30, r24
    11c6:	e2 1b       	sub	r30, r18
    11c8:	f3 0b       	sbc	r31, r19
    11ca:	9f 01       	movw	r18, r30
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	69 e0       	ldi	r22, 0x09	; 9
    11d0:	a9 01       	movw	r20, r18
    11d2:	0e 94 0e 10 	call	0x201c	; 0x201c <LCD_intgerToStringRowColumn>

					if( g_ticks == 51 )
    11d6:	80 91 42 01 	lds	r24, 0x0142
    11da:	83 33       	cpi	r24, 0x33	; 51
    11dc:	29 f4       	brne	.+10     	; 0x11e8 <main+0x13e>
					{
						LCD_displayCharacterRowColumn(1,10,' ');
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	6a e0       	ldi	r22, 0x0A	; 10
    11e2:	40 e2       	ldi	r20, 0x20	; 32
    11e4:	0e 94 37 10 	call	0x206e	; 0x206e <LCD_displayCharacterRowColumn>
			if( counter == 0 )
			{
				LCD_displayStringRowColumn(0,0,"wrong pass try  ");
				LCD_displayStringRowColumn(1,0,"again in    sec ");

				while( g_ticks != 60)
    11e8:	80 91 42 01 	lds	r24, 0x0142
    11ec:	8c 33       	cpi	r24, 0x3C	; 60
    11ee:	21 f7       	brne	.-56     	; 0x11b8 <main+0x10e>
    11f0:	24 c0       	rjmp	.+72     	; 0x123a <main+0x190>
			}
			/* HMI locked after 3 consecutive wrong passwords for 60 seconds using timer . */

			else
			{
				LCD_clearScreen();
    11f2:	0e 94 04 10 	call	0x2008	; 0x2008 <LCD_clearScreen>
				LCD_displayStringRowColumn(0,0,"wrong pass you  ");
    11f6:	2f ee       	ldi	r18, 0xEF	; 239
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	60 e0       	ldi	r22, 0x00	; 0
    11fe:	a9 01       	movw	r20, r18
    1200:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1,0,"have   chance   ");
    1204:	20 e0       	ldi	r18, 0x00	; 0
    1206:	31 e0       	ldi	r19, 0x01	; 1
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	60 e0       	ldi	r22, 0x00	; 0
    120c:	a9 01       	movw	r20, r18
    120e:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <LCD_displayStringRowColumn>
				LCD_intgerToStringRowColumn(1,5, counter );
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	65 e0       	ldi	r22, 0x05	; 5
    121c:	a9 01       	movw	r20, r18
    121e:	0e 94 0e 10 	call	0x201c	; 0x201c <LCD_intgerToStringRowColumn>

				while( g_ticks != 3);
    1222:	80 91 42 01 	lds	r24, 0x0142
    1226:	83 30       	cpi	r24, 0x03	; 3
    1228:	e1 f7       	brne	.-8      	; 0x1222 <main+0x178>
		}
		/* to make sure key is '-' or '+' only
		 * else program will do nothing .
		 */

		while ( Passward_login(Arr1,SIZE) != MATCHED_PASSWORDS)
    122a:	ce 01       	movw	r24, r28
    122c:	03 96       	adiw	r24, 0x03	; 3
    122e:	65 e0       	ldi	r22, 0x05	; 5
    1230:	0e 94 1b 08 	call	0x1036	; 0x1036 <Passward_login>
    1234:	8a 30       	cpi	r24, 0x0A	; 10
    1236:	09 f0       	breq	.+2      	; 0x123a <main+0x190>
    1238:	a8 cf       	rjmp	.-176    	; 0x118a <main+0xe0>
		}
		/* if the function returned ( matched = True = 0x0A ) program will continue
		 * if returned ( unmatched = False = 0 )  program will ask again 2 more times .
		 */

		if( counter == 0 )
    123a:	89 81       	ldd	r24, Y+1	; 0x01
    123c:	88 23       	and	r24, r24
    123e:	09 f4       	brne	.+2      	; 0x1242 <main+0x198>
    1240:	86 cf       	rjmp	.-244    	; 0x114e <main+0xa4>
		{
			continue;
		}
		/* to go back to main options*/

		if( key == '+' )
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	8b 32       	cpi	r24, 0x2B	; 43
    1246:	31 f5       	brne	.+76     	; 0x1294 <main+0x1ea>
		{
			g_ticks=0;
    1248:	10 92 42 01 	sts	0x0142, r1

			LCD_clearScreen();
    124c:	0e 94 04 10 	call	0x2008	; 0x2008 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"door is opening ");
    1250:	21 e1       	ldi	r18, 0x11	; 17
    1252:	31 e0       	ldi	r19, 0x01	; 1
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	60 e0       	ldi	r22, 0x00	; 0
    1258:	a9 01       	movw	r20, r18
    125a:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <LCD_displayStringRowColumn>

			while( g_ticks != 15);
    125e:	80 91 42 01 	lds	r24, 0x0142
    1262:	8f 30       	cpi	r24, 0x0F	; 15
    1264:	e1 f7       	brne	.-8      	; 0x125e <main+0x1b4>
			/* delay for 15 sec */

			LCD_displayStringRowColumn(0,8,"opened ");
    1266:	22 e2       	ldi	r18, 0x22	; 34
    1268:	31 e0       	ldi	r19, 0x01	; 1
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	68 e0       	ldi	r22, 0x08	; 8
    126e:	a9 01       	movw	r20, r18
    1270:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <LCD_displayStringRowColumn>

			while( g_ticks != 18);
    1274:	80 91 42 01 	lds	r24, 0x0142
    1278:	82 31       	cpi	r24, 0x12	; 18
    127a:	e1 f7       	brne	.-8      	; 0x1274 <main+0x1ca>
			/* delay for 3 sec */

			LCD_displayStringRowColumn(0,8,"closing  ");
    127c:	2a e2       	ldi	r18, 0x2A	; 42
    127e:	31 e0       	ldi	r19, 0x01	; 1
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	68 e0       	ldi	r22, 0x08	; 8
    1284:	a9 01       	movw	r20, r18
    1286:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <LCD_displayStringRowColumn>

			while( g_ticks != 33);
    128a:	80 91 42 01 	lds	r24, 0x0142
    128e:	81 32       	cpi	r24, 0x21	; 33
    1290:	e1 f7       	brne	.-8      	; 0x128a <main+0x1e0>
    1292:	5d cf       	rjmp	.-326    	; 0x114e <main+0xa4>
			/* delay for 15 sec */
		}

		else
		{
			while(  Creat_password( Arr1 ,SIZE ) != MATCHED_PASSWORDS );
    1294:	ce 01       	movw	r24, r28
    1296:	03 96       	adiw	r24, 0x03	; 3
    1298:	65 e0       	ldi	r22, 0x05	; 5
    129a:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <Creat_password>
    129e:	8a 30       	cpi	r24, 0x0A	; 10
    12a0:	c9 f7       	brne	.-14     	; 0x1294 <main+0x1ea>
    12a2:	55 cf       	rjmp	.-342    	; 0x114e <main+0xa4>

000012a4 <KEYPAD_getPressedKey>:

/*****************************  Functions Prototypes  ****************************************************************/


uint8 KEYPAD_getPressedKey(void)
{
    12a4:	df 93       	push	r29
    12a6:	cf 93       	push	r28
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	60 97       	sbiw	r28, 0x10	; 16
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	f8 94       	cli
    12b2:	de bf       	out	0x3e, r29	; 62
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	64 e0       	ldi	r22, 0x04	; 4
    12bc:	40 e0       	ldi	r20, 0x00	; 0
    12be:	0e 94 52 14 	call	0x28a4	; 0x28a4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	65 e0       	ldi	r22, 0x05	; 5
    12c6:	40 e0       	ldi	r20, 0x00	; 0
    12c8:	0e 94 52 14 	call	0x28a4	; 0x28a4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	66 e0       	ldi	r22, 0x06	; 6
    12d0:	40 e0       	ldi	r20, 0x00	; 0
    12d2:	0e 94 52 14 	call	0x28a4	; 0x28a4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	67 e0       	ldi	r22, 0x07	; 7
    12da:	40 e0       	ldi	r20, 0x00	; 0
    12dc:	0e 94 52 14 	call	0x28a4	; 0x28a4 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	60 e0       	ldi	r22, 0x00	; 0
    12e4:	40 e0       	ldi	r20, 0x00	; 0
    12e6:	0e 94 52 14 	call	0x28a4	; 0x28a4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	61 e0       	ldi	r22, 0x01	; 1
    12ee:	40 e0       	ldi	r20, 0x00	; 0
    12f0:	0e 94 52 14 	call	0x28a4	; 0x28a4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	62 e0       	ldi	r22, 0x02	; 2
    12f8:	40 e0       	ldi	r20, 0x00	; 0
    12fa:	0e 94 52 14 	call	0x28a4	; 0x28a4 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	63 e0       	ldi	r22, 0x03	; 3
    1302:	40 e0       	ldi	r20, 0x00	; 0
    1304:	0e 94 52 14 	call	0x28a4	; 0x28a4 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1308:	1f 86       	std	Y+15, r1	; 0x0f
    130a:	b1 c0       	rjmp	.+354    	; 0x146e <KEYPAD_getPressedKey+0x1ca>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    130c:	8f 85       	ldd	r24, Y+15	; 0x0f
    130e:	98 2f       	mov	r25, r24
    1310:	9c 5f       	subi	r25, 0xFC	; 252
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	69 2f       	mov	r22, r25
    1316:	41 e0       	ldi	r20, 0x01	; 1
    1318:	0e 94 52 14 	call	0x28a4	; 0x28a4 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    131c:	8f 85       	ldd	r24, Y+15	; 0x0f
    131e:	98 2f       	mov	r25, r24
    1320:	9c 5f       	subi	r25, 0xFC	; 252
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	69 2f       	mov	r22, r25
    1326:	40 e0       	ldi	r20, 0x00	; 0
    1328:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    132c:	18 8a       	std	Y+16, r1	; 0x10
    132e:	1f c0       	rjmp	.+62     	; 0x136e <KEYPAD_getPressedKey+0xca>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	68 89       	ldd	r22, Y+16	; 0x10
    1334:	0e 94 28 16 	call	0x2c50	; 0x2c50 <GPIO_readPin>
    1338:	88 23       	and	r24, r24
    133a:	b1 f4       	brne	.+44     	; 0x1368 <KEYPAD_getPressedKey+0xc4>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    133c:	8f 85       	ldd	r24, Y+15	; 0x0f
    133e:	88 2f       	mov	r24, r24
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	88 0f       	add	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	98 2f       	mov	r25, r24
    134c:	88 89       	ldd	r24, Y+16	; 0x10
    134e:	89 0f       	add	r24, r25
    1350:	8f 5f       	subi	r24, 0xFF	; 255
    1352:	0e 94 3c 0a 	call	0x1478	; 0x1478 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}
}
    1356:	60 96       	adiw	r28, 0x10	; 16
    1358:	0f b6       	in	r0, 0x3f	; 63
    135a:	f8 94       	cli
    135c:	de bf       	out	0x3e, r29	; 62
    135e:	0f be       	out	0x3f, r0	; 63
    1360:	cd bf       	out	0x3d, r28	; 61
    1362:	cf 91       	pop	r28
    1364:	df 91       	pop	r29
    1366:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1368:	88 89       	ldd	r24, Y+16	; 0x10
    136a:	8f 5f       	subi	r24, 0xFF	; 255
    136c:	88 8b       	std	Y+16, r24	; 0x10
    136e:	88 89       	ldd	r24, Y+16	; 0x10
    1370:	84 30       	cpi	r24, 0x04	; 4
    1372:	f0 f2       	brcs	.-68     	; 0x1330 <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1374:	8f 85       	ldd	r24, Y+15	; 0x0f
    1376:	98 2f       	mov	r25, r24
    1378:	9c 5f       	subi	r25, 0xFC	; 252
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	69 2f       	mov	r22, r25
    137e:	40 e0       	ldi	r20, 0x00	; 0
    1380:	0e 94 52 14 	call	0x28a4	; 0x28a4 <GPIO_setupPinDirection>
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	a0 ea       	ldi	r26, 0xA0	; 160
    138a:	b0 e4       	ldi	r27, 0x40	; 64
    138c:	8b 87       	std	Y+11, r24	; 0x0b
    138e:	9c 87       	std	Y+12, r25	; 0x0c
    1390:	ad 87       	std	Y+13, r26	; 0x0d
    1392:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1394:	6b 85       	ldd	r22, Y+11	; 0x0b
    1396:	7c 85       	ldd	r23, Y+12	; 0x0c
    1398:	8d 85       	ldd	r24, Y+13	; 0x0d
    139a:	9e 85       	ldd	r25, Y+14	; 0x0e
    139c:	20 e0       	ldi	r18, 0x00	; 0
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	4a ef       	ldi	r20, 0xFA	; 250
    13a2:	54 e4       	ldi	r21, 0x44	; 68
    13a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a8:	dc 01       	movw	r26, r24
    13aa:	cb 01       	movw	r24, r22
    13ac:	8f 83       	std	Y+7, r24	; 0x07
    13ae:	98 87       	std	Y+8, r25	; 0x08
    13b0:	a9 87       	std	Y+9, r26	; 0x09
    13b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13b4:	6f 81       	ldd	r22, Y+7	; 0x07
    13b6:	78 85       	ldd	r23, Y+8	; 0x08
    13b8:	89 85       	ldd	r24, Y+9	; 0x09
    13ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	40 e8       	ldi	r20, 0x80	; 128
    13c2:	5f e3       	ldi	r21, 0x3F	; 63
    13c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13c8:	88 23       	and	r24, r24
    13ca:	2c f4       	brge	.+10     	; 0x13d6 <KEYPAD_getPressedKey+0x132>
		__ticks = 1;
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	9e 83       	std	Y+6, r25	; 0x06
    13d2:	8d 83       	std	Y+5, r24	; 0x05
    13d4:	3f c0       	rjmp	.+126    	; 0x1454 <KEYPAD_getPressedKey+0x1b0>
	else if (__tmp > 65535)
    13d6:	6f 81       	ldd	r22, Y+7	; 0x07
    13d8:	78 85       	ldd	r23, Y+8	; 0x08
    13da:	89 85       	ldd	r24, Y+9	; 0x09
    13dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	3f ef       	ldi	r19, 0xFF	; 255
    13e2:	4f e7       	ldi	r20, 0x7F	; 127
    13e4:	57 e4       	ldi	r21, 0x47	; 71
    13e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13ea:	18 16       	cp	r1, r24
    13ec:	4c f5       	brge	.+82     	; 0x1440 <KEYPAD_getPressedKey+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    13f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    13f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    13f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	40 e2       	ldi	r20, 0x20	; 32
    13fc:	51 e4       	ldi	r21, 0x41	; 65
    13fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1402:	dc 01       	movw	r26, r24
    1404:	cb 01       	movw	r24, r22
    1406:	bc 01       	movw	r22, r24
    1408:	cd 01       	movw	r24, r26
    140a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    140e:	dc 01       	movw	r26, r24
    1410:	cb 01       	movw	r24, r22
    1412:	9e 83       	std	Y+6, r25	; 0x06
    1414:	8d 83       	std	Y+5, r24	; 0x05
    1416:	0f c0       	rjmp	.+30     	; 0x1436 <KEYPAD_getPressedKey+0x192>
    1418:	88 ec       	ldi	r24, 0xC8	; 200
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	9c 83       	std	Y+4, r25	; 0x04
    141e:	8b 83       	std	Y+3, r24	; 0x03
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	9c 81       	ldd	r25, Y+4	; 0x04
    1424:	01 97       	sbiw	r24, 0x01	; 1
    1426:	f1 f7       	brne	.-4      	; 0x1424 <KEYPAD_getPressedKey+0x180>
    1428:	9c 83       	std	Y+4, r25	; 0x04
    142a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    142c:	8d 81       	ldd	r24, Y+5	; 0x05
    142e:	9e 81       	ldd	r25, Y+6	; 0x06
    1430:	01 97       	sbiw	r24, 0x01	; 1
    1432:	9e 83       	std	Y+6, r25	; 0x06
    1434:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1436:	8d 81       	ldd	r24, Y+5	; 0x05
    1438:	9e 81       	ldd	r25, Y+6	; 0x06
    143a:	00 97       	sbiw	r24, 0x00	; 0
    143c:	69 f7       	brne	.-38     	; 0x1418 <KEYPAD_getPressedKey+0x174>
    143e:	14 c0       	rjmp	.+40     	; 0x1468 <KEYPAD_getPressedKey+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1440:	6f 81       	ldd	r22, Y+7	; 0x07
    1442:	78 85       	ldd	r23, Y+8	; 0x08
    1444:	89 85       	ldd	r24, Y+9	; 0x09
    1446:	9a 85       	ldd	r25, Y+10	; 0x0a
    1448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    144c:	dc 01       	movw	r26, r24
    144e:	cb 01       	movw	r24, r22
    1450:	9e 83       	std	Y+6, r25	; 0x06
    1452:	8d 83       	std	Y+5, r24	; 0x05
    1454:	8d 81       	ldd	r24, Y+5	; 0x05
    1456:	9e 81       	ldd	r25, Y+6	; 0x06
    1458:	9a 83       	std	Y+2, r25	; 0x02
    145a:	89 83       	std	Y+1, r24	; 0x01
    145c:	89 81       	ldd	r24, Y+1	; 0x01
    145e:	9a 81       	ldd	r25, Y+2	; 0x02
    1460:	01 97       	sbiw	r24, 0x01	; 1
    1462:	f1 f7       	brne	.-4      	; 0x1460 <KEYPAD_getPressedKey+0x1bc>
    1464:	9a 83       	std	Y+2, r25	; 0x02
    1466:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1468:	8f 85       	ldd	r24, Y+15	; 0x0f
    146a:	8f 5f       	subi	r24, 0xFF	; 255
    146c:	8f 87       	std	Y+15, r24	; 0x0f
    146e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1470:	84 30       	cpi	r24, 0x04	; 4
    1472:	08 f4       	brcc	.+2      	; 0x1476 <KEYPAD_getPressedKey+0x1d2>
    1474:	4b cf       	rjmp	.-362    	; 0x130c <KEYPAD_getPressedKey+0x68>
    1476:	48 cf       	rjmp	.-368    	; 0x1308 <KEYPAD_getPressedKey+0x64>

00001478 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1478:	df 93       	push	r29
    147a:	cf 93       	push	r28
    147c:	00 d0       	rcall	.+0      	; 0x147e <KEYPAD_4x4_adjustKeyNumber+0x6>
    147e:	00 d0       	rcall	.+0      	; 0x1480 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1486:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1488:	8a 81       	ldd	r24, Y+2	; 0x02
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	3c 83       	std	Y+4, r19	; 0x04
    1490:	2b 83       	std	Y+3, r18	; 0x03
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	9c 81       	ldd	r25, Y+4	; 0x04
    1496:	88 30       	cpi	r24, 0x08	; 8
    1498:	91 05       	cpc	r25, r1
    149a:	09 f4       	brne	.+2      	; 0x149e <KEYPAD_4x4_adjustKeyNumber+0x26>
    149c:	70 c0       	rjmp	.+224    	; 0x157e <KEYPAD_4x4_adjustKeyNumber+0x106>
    149e:	2b 81       	ldd	r18, Y+3	; 0x03
    14a0:	3c 81       	ldd	r19, Y+4	; 0x04
    14a2:	29 30       	cpi	r18, 0x09	; 9
    14a4:	31 05       	cpc	r19, r1
    14a6:	5c f5       	brge	.+86     	; 0x14fe <KEYPAD_4x4_adjustKeyNumber+0x86>
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	9c 81       	ldd	r25, Y+4	; 0x04
    14ac:	84 30       	cpi	r24, 0x04	; 4
    14ae:	91 05       	cpc	r25, r1
    14b0:	09 f4       	brne	.+2      	; 0x14b4 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    14b2:	59 c0       	rjmp	.+178    	; 0x1566 <KEYPAD_4x4_adjustKeyNumber+0xee>
    14b4:	2b 81       	ldd	r18, Y+3	; 0x03
    14b6:	3c 81       	ldd	r19, Y+4	; 0x04
    14b8:	25 30       	cpi	r18, 0x05	; 5
    14ba:	31 05       	cpc	r19, r1
    14bc:	9c f4       	brge	.+38     	; 0x14e4 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	9c 81       	ldd	r25, Y+4	; 0x04
    14c2:	82 30       	cpi	r24, 0x02	; 2
    14c4:	91 05       	cpc	r25, r1
    14c6:	09 f4       	brne	.+2      	; 0x14ca <KEYPAD_4x4_adjustKeyNumber+0x52>
    14c8:	48 c0       	rjmp	.+144    	; 0x155a <KEYPAD_4x4_adjustKeyNumber+0xe2>
    14ca:	2b 81       	ldd	r18, Y+3	; 0x03
    14cc:	3c 81       	ldd	r19, Y+4	; 0x04
    14ce:	23 30       	cpi	r18, 0x03	; 3
    14d0:	31 05       	cpc	r19, r1
    14d2:	0c f0       	brlt	.+2      	; 0x14d6 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    14d4:	45 c0       	rjmp	.+138    	; 0x1560 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	9c 81       	ldd	r25, Y+4	; 0x04
    14da:	81 30       	cpi	r24, 0x01	; 1
    14dc:	91 05       	cpc	r25, r1
    14de:	09 f4       	brne	.+2      	; 0x14e2 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    14e0:	39 c0       	rjmp	.+114    	; 0x1554 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    14e2:	67 c0       	rjmp	.+206    	; 0x15b2 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    14e4:	2b 81       	ldd	r18, Y+3	; 0x03
    14e6:	3c 81       	ldd	r19, Y+4	; 0x04
    14e8:	26 30       	cpi	r18, 0x06	; 6
    14ea:	31 05       	cpc	r19, r1
    14ec:	09 f4       	brne	.+2      	; 0x14f0 <KEYPAD_4x4_adjustKeyNumber+0x78>
    14ee:	41 c0       	rjmp	.+130    	; 0x1572 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	9c 81       	ldd	r25, Y+4	; 0x04
    14f4:	87 30       	cpi	r24, 0x07	; 7
    14f6:	91 05       	cpc	r25, r1
    14f8:	0c f0       	brlt	.+2      	; 0x14fc <KEYPAD_4x4_adjustKeyNumber+0x84>
    14fa:	3e c0       	rjmp	.+124    	; 0x1578 <KEYPAD_4x4_adjustKeyNumber+0x100>
    14fc:	37 c0       	rjmp	.+110    	; 0x156c <KEYPAD_4x4_adjustKeyNumber+0xf4>
    14fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1500:	3c 81       	ldd	r19, Y+4	; 0x04
    1502:	2c 30       	cpi	r18, 0x0C	; 12
    1504:	31 05       	cpc	r19, r1
    1506:	09 f4       	brne	.+2      	; 0x150a <KEYPAD_4x4_adjustKeyNumber+0x92>
    1508:	46 c0       	rjmp	.+140    	; 0x1596 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	9c 81       	ldd	r25, Y+4	; 0x04
    150e:	8d 30       	cpi	r24, 0x0D	; 13
    1510:	91 05       	cpc	r25, r1
    1512:	5c f4       	brge	.+22     	; 0x152a <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1514:	2b 81       	ldd	r18, Y+3	; 0x03
    1516:	3c 81       	ldd	r19, Y+4	; 0x04
    1518:	2a 30       	cpi	r18, 0x0A	; 10
    151a:	31 05       	cpc	r19, r1
    151c:	b1 f1       	breq	.+108    	; 0x158a <KEYPAD_4x4_adjustKeyNumber+0x112>
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	9c 81       	ldd	r25, Y+4	; 0x04
    1522:	8b 30       	cpi	r24, 0x0B	; 11
    1524:	91 05       	cpc	r25, r1
    1526:	a4 f5       	brge	.+104    	; 0x1590 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1528:	2d c0       	rjmp	.+90     	; 0x1584 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    152a:	2b 81       	ldd	r18, Y+3	; 0x03
    152c:	3c 81       	ldd	r19, Y+4	; 0x04
    152e:	2e 30       	cpi	r18, 0x0E	; 14
    1530:	31 05       	cpc	r19, r1
    1532:	b9 f1       	breq	.+110    	; 0x15a2 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1534:	8b 81       	ldd	r24, Y+3	; 0x03
    1536:	9c 81       	ldd	r25, Y+4	; 0x04
    1538:	8e 30       	cpi	r24, 0x0E	; 14
    153a:	91 05       	cpc	r25, r1
    153c:	7c f1       	brlt	.+94     	; 0x159c <KEYPAD_4x4_adjustKeyNumber+0x124>
    153e:	2b 81       	ldd	r18, Y+3	; 0x03
    1540:	3c 81       	ldd	r19, Y+4	; 0x04
    1542:	2f 30       	cpi	r18, 0x0F	; 15
    1544:	31 05       	cpc	r19, r1
    1546:	79 f1       	breq	.+94     	; 0x15a6 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	9c 81       	ldd	r25, Y+4	; 0x04
    154c:	80 31       	cpi	r24, 0x10	; 16
    154e:	91 05       	cpc	r25, r1
    1550:	69 f1       	breq	.+90     	; 0x15ac <KEYPAD_4x4_adjustKeyNumber+0x134>
    1552:	2f c0       	rjmp	.+94     	; 0x15b2 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1554:	87 e0       	ldi	r24, 0x07	; 7
    1556:	89 83       	std	Y+1, r24	; 0x01
    1558:	2e c0       	rjmp	.+92     	; 0x15b6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    155a:	88 e0       	ldi	r24, 0x08	; 8
    155c:	89 83       	std	Y+1, r24	; 0x01
    155e:	2b c0       	rjmp	.+86     	; 0x15b6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1560:	89 e0       	ldi	r24, 0x09	; 9
    1562:	89 83       	std	Y+1, r24	; 0x01
    1564:	28 c0       	rjmp	.+80     	; 0x15b6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1566:	85 e2       	ldi	r24, 0x25	; 37
    1568:	89 83       	std	Y+1, r24	; 0x01
    156a:	25 c0       	rjmp	.+74     	; 0x15b6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    156c:	84 e0       	ldi	r24, 0x04	; 4
    156e:	89 83       	std	Y+1, r24	; 0x01
    1570:	22 c0       	rjmp	.+68     	; 0x15b6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1572:	85 e0       	ldi	r24, 0x05	; 5
    1574:	89 83       	std	Y+1, r24	; 0x01
    1576:	1f c0       	rjmp	.+62     	; 0x15b6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1578:	86 e0       	ldi	r24, 0x06	; 6
    157a:	89 83       	std	Y+1, r24	; 0x01
    157c:	1c c0       	rjmp	.+56     	; 0x15b6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    157e:	8a e2       	ldi	r24, 0x2A	; 42
    1580:	89 83       	std	Y+1, r24	; 0x01
    1582:	19 c0       	rjmp	.+50     	; 0x15b6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	89 83       	std	Y+1, r24	; 0x01
    1588:	16 c0       	rjmp	.+44     	; 0x15b6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    158a:	82 e0       	ldi	r24, 0x02	; 2
    158c:	89 83       	std	Y+1, r24	; 0x01
    158e:	13 c0       	rjmp	.+38     	; 0x15b6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1590:	83 e0       	ldi	r24, 0x03	; 3
    1592:	89 83       	std	Y+1, r24	; 0x01
    1594:	10 c0       	rjmp	.+32     	; 0x15b6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1596:	8d e2       	ldi	r24, 0x2D	; 45
    1598:	89 83       	std	Y+1, r24	; 0x01
    159a:	0d c0       	rjmp	.+26     	; 0x15b6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    159c:	8d e0       	ldi	r24, 0x0D	; 13
    159e:	89 83       	std	Y+1, r24	; 0x01
    15a0:	0a c0       	rjmp	.+20     	; 0x15b6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    15a2:	19 82       	std	Y+1, r1	; 0x01
    15a4:	08 c0       	rjmp	.+16     	; 0x15b6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    15a6:	8d e3       	ldi	r24, 0x3D	; 61
    15a8:	89 83       	std	Y+1, r24	; 0x01
    15aa:	05 c0       	rjmp	.+10     	; 0x15b6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    15ac:	8b e2       	ldi	r24, 0x2B	; 43
    15ae:	89 83       	std	Y+1, r24	; 0x01
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    15b2:	8a 81       	ldd	r24, Y+2	; 0x02
    15b4:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    15b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    15b8:	0f 90       	pop	r0
    15ba:	0f 90       	pop	r0
    15bc:	0f 90       	pop	r0
    15be:	0f 90       	pop	r0
    15c0:	cf 91       	pop	r28
    15c2:	df 91       	pop	r29
    15c4:	08 95       	ret

000015c6 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 8-bits.
 */
void LCD_init(void)
{
    15c6:	df 93       	push	r29
    15c8:	cf 93       	push	r28
    15ca:	cd b7       	in	r28, 0x3d	; 61
    15cc:	de b7       	in	r29, 0x3e	; 62
    15ce:	2e 97       	sbiw	r28, 0x0e	; 14
    15d0:	0f b6       	in	r0, 0x3f	; 63
    15d2:	f8 94       	cli
    15d4:	de bf       	out	0x3e, r29	; 62
    15d6:	0f be       	out	0x3f, r0	; 63
    15d8:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    15da:	83 e0       	ldi	r24, 0x03	; 3
    15dc:	66 e0       	ldi	r22, 0x06	; 6
    15de:	41 e0       	ldi	r20, 0x01	; 1
    15e0:	0e 94 52 14 	call	0x28a4	; 0x28a4 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    15e4:	83 e0       	ldi	r24, 0x03	; 3
    15e6:	67 e0       	ldi	r22, 0x07	; 7
    15e8:	41 e0       	ldi	r20, 0x01	; 1
    15ea:	0e 94 52 14 	call	0x28a4	; 0x28a4 <GPIO_setupPinDirection>

	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    15ee:	82 e0       	ldi	r24, 0x02	; 2
    15f0:	6f ef       	ldi	r22, 0xFF	; 255
    15f2:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <GPIO_setupPortDirection>
    15f6:	80 e0       	ldi	r24, 0x00	; 0
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	a0 ea       	ldi	r26, 0xA0	; 160
    15fc:	b1 e4       	ldi	r27, 0x41	; 65
    15fe:	8b 87       	std	Y+11, r24	; 0x0b
    1600:	9c 87       	std	Y+12, r25	; 0x0c
    1602:	ad 87       	std	Y+13, r26	; 0x0d
    1604:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1606:	6b 85       	ldd	r22, Y+11	; 0x0b
    1608:	7c 85       	ldd	r23, Y+12	; 0x0c
    160a:	8d 85       	ldd	r24, Y+13	; 0x0d
    160c:	9e 85       	ldd	r25, Y+14	; 0x0e
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	4a ef       	ldi	r20, 0xFA	; 250
    1614:	54 e4       	ldi	r21, 0x44	; 68
    1616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	8f 83       	std	Y+7, r24	; 0x07
    1620:	98 87       	std	Y+8, r25	; 0x08
    1622:	a9 87       	std	Y+9, r26	; 0x09
    1624:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1626:	6f 81       	ldd	r22, Y+7	; 0x07
    1628:	78 85       	ldd	r23, Y+8	; 0x08
    162a:	89 85       	ldd	r24, Y+9	; 0x09
    162c:	9a 85       	ldd	r25, Y+10	; 0x0a
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	40 e8       	ldi	r20, 0x80	; 128
    1634:	5f e3       	ldi	r21, 0x3F	; 63
    1636:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    163a:	88 23       	and	r24, r24
    163c:	2c f4       	brge	.+10     	; 0x1648 <LCD_init+0x82>
		__ticks = 1;
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	9e 83       	std	Y+6, r25	; 0x06
    1644:	8d 83       	std	Y+5, r24	; 0x05
    1646:	3f c0       	rjmp	.+126    	; 0x16c6 <LCD_init+0x100>
	else if (__tmp > 65535)
    1648:	6f 81       	ldd	r22, Y+7	; 0x07
    164a:	78 85       	ldd	r23, Y+8	; 0x08
    164c:	89 85       	ldd	r24, Y+9	; 0x09
    164e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	3f ef       	ldi	r19, 0xFF	; 255
    1654:	4f e7       	ldi	r20, 0x7F	; 127
    1656:	57 e4       	ldi	r21, 0x47	; 71
    1658:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    165c:	18 16       	cp	r1, r24
    165e:	4c f5       	brge	.+82     	; 0x16b2 <LCD_init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1660:	6b 85       	ldd	r22, Y+11	; 0x0b
    1662:	7c 85       	ldd	r23, Y+12	; 0x0c
    1664:	8d 85       	ldd	r24, Y+13	; 0x0d
    1666:	9e 85       	ldd	r25, Y+14	; 0x0e
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	40 e2       	ldi	r20, 0x20	; 32
    166e:	51 e4       	ldi	r21, 0x41	; 65
    1670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	bc 01       	movw	r22, r24
    167a:	cd 01       	movw	r24, r26
    167c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1680:	dc 01       	movw	r26, r24
    1682:	cb 01       	movw	r24, r22
    1684:	9e 83       	std	Y+6, r25	; 0x06
    1686:	8d 83       	std	Y+5, r24	; 0x05
    1688:	0f c0       	rjmp	.+30     	; 0x16a8 <LCD_init+0xe2>
    168a:	88 ec       	ldi	r24, 0xC8	; 200
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	9c 83       	std	Y+4, r25	; 0x04
    1690:	8b 83       	std	Y+3, r24	; 0x03
    1692:	8b 81       	ldd	r24, Y+3	; 0x03
    1694:	9c 81       	ldd	r25, Y+4	; 0x04
    1696:	01 97       	sbiw	r24, 0x01	; 1
    1698:	f1 f7       	brne	.-4      	; 0x1696 <LCD_init+0xd0>
    169a:	9c 83       	std	Y+4, r25	; 0x04
    169c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    169e:	8d 81       	ldd	r24, Y+5	; 0x05
    16a0:	9e 81       	ldd	r25, Y+6	; 0x06
    16a2:	01 97       	sbiw	r24, 0x01	; 1
    16a4:	9e 83       	std	Y+6, r25	; 0x06
    16a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a8:	8d 81       	ldd	r24, Y+5	; 0x05
    16aa:	9e 81       	ldd	r25, Y+6	; 0x06
    16ac:	00 97       	sbiw	r24, 0x00	; 0
    16ae:	69 f7       	brne	.-38     	; 0x168a <LCD_init+0xc4>
    16b0:	14 c0       	rjmp	.+40     	; 0x16da <LCD_init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16b2:	6f 81       	ldd	r22, Y+7	; 0x07
    16b4:	78 85       	ldd	r23, Y+8	; 0x08
    16b6:	89 85       	ldd	r24, Y+9	; 0x09
    16b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	9e 83       	std	Y+6, r25	; 0x06
    16c4:	8d 83       	std	Y+5, r24	; 0x05
    16c6:	8d 81       	ldd	r24, Y+5	; 0x05
    16c8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ca:	9a 83       	std	Y+2, r25	; 0x02
    16cc:	89 83       	std	Y+1, r24	; 0x01
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
    16d0:	9a 81       	ldd	r25, Y+2	; 0x02
    16d2:	01 97       	sbiw	r24, 0x01	; 1
    16d4:	f1 f7       	brne	.-4      	; 0x16d2 <LCD_init+0x10c>
    16d6:	9a 83       	std	Y+2, r25	; 0x02
    16d8:	89 83       	std	Y+1, r24	; 0x01
	/* Setup the LCD connections ( RS , E and DATA ) */

	_delay_ms(20); /* LCD Power ON delay always > 15ms */

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    16da:	88 e3       	ldi	r24, 0x38	; 56
    16dc:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    16e0:	8c e0       	ldi	r24, 0x0C	; 12
    16e2:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <LCD_sendCommand>
}
    16ec:	2e 96       	adiw	r28, 0x0e	; 14
    16ee:	0f b6       	in	r0, 0x3f	; 63
    16f0:	f8 94       	cli
    16f2:	de bf       	out	0x3e, r29	; 62
    16f4:	0f be       	out	0x3f, r0	; 63
    16f6:	cd bf       	out	0x3d, r28	; 61
    16f8:	cf 91       	pop	r28
    16fa:	df 91       	pop	r29
    16fc:	08 95       	ret

000016fe <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the LCD
 */
void LCD_sendCommand(uint8 command)
{
    16fe:	df 93       	push	r29
    1700:	cf 93       	push	r28
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    1706:	e9 97       	sbiw	r28, 0x39	; 57
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	f8 94       	cli
    170c:	de bf       	out	0x3e, r29	; 62
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	cd bf       	out	0x3d, r28	; 61
    1712:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1714:	83 e0       	ldi	r24, 0x03	; 3
    1716:	66 e0       	ldi	r22, 0x06	; 6
    1718:	40 e0       	ldi	r20, 0x00	; 0
    171a:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <GPIO_writePin>
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	a0 e8       	ldi	r26, 0x80	; 128
    1724:	bf e3       	ldi	r27, 0x3F	; 63
    1726:	8d ab       	std	Y+53, r24	; 0x35
    1728:	9e ab       	std	Y+54, r25	; 0x36
    172a:	af ab       	std	Y+55, r26	; 0x37
    172c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    172e:	6d a9       	ldd	r22, Y+53	; 0x35
    1730:	7e a9       	ldd	r23, Y+54	; 0x36
    1732:	8f a9       	ldd	r24, Y+55	; 0x37
    1734:	98 ad       	ldd	r25, Y+56	; 0x38
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	4a ef       	ldi	r20, 0xFA	; 250
    173c:	54 e4       	ldi	r21, 0x44	; 68
    173e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1742:	dc 01       	movw	r26, r24
    1744:	cb 01       	movw	r24, r22
    1746:	89 ab       	std	Y+49, r24	; 0x31
    1748:	9a ab       	std	Y+50, r25	; 0x32
    174a:	ab ab       	std	Y+51, r26	; 0x33
    174c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    174e:	69 a9       	ldd	r22, Y+49	; 0x31
    1750:	7a a9       	ldd	r23, Y+50	; 0x32
    1752:	8b a9       	ldd	r24, Y+51	; 0x33
    1754:	9c a9       	ldd	r25, Y+52	; 0x34
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	40 e8       	ldi	r20, 0x80	; 128
    175c:	5f e3       	ldi	r21, 0x3F	; 63
    175e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1762:	88 23       	and	r24, r24
    1764:	2c f4       	brge	.+10     	; 0x1770 <LCD_sendCommand+0x72>
		__ticks = 1;
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	98 ab       	std	Y+48, r25	; 0x30
    176c:	8f a7       	std	Y+47, r24	; 0x2f
    176e:	3f c0       	rjmp	.+126    	; 0x17ee <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1770:	69 a9       	ldd	r22, Y+49	; 0x31
    1772:	7a a9       	ldd	r23, Y+50	; 0x32
    1774:	8b a9       	ldd	r24, Y+51	; 0x33
    1776:	9c a9       	ldd	r25, Y+52	; 0x34
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	3f ef       	ldi	r19, 0xFF	; 255
    177c:	4f e7       	ldi	r20, 0x7F	; 127
    177e:	57 e4       	ldi	r21, 0x47	; 71
    1780:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1784:	18 16       	cp	r1, r24
    1786:	4c f5       	brge	.+82     	; 0x17da <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1788:	6d a9       	ldd	r22, Y+53	; 0x35
    178a:	7e a9       	ldd	r23, Y+54	; 0x36
    178c:	8f a9       	ldd	r24, Y+55	; 0x37
    178e:	98 ad       	ldd	r25, Y+56	; 0x38
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	40 e2       	ldi	r20, 0x20	; 32
    1796:	51 e4       	ldi	r21, 0x41	; 65
    1798:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	bc 01       	movw	r22, r24
    17a2:	cd 01       	movw	r24, r26
    17a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	98 ab       	std	Y+48, r25	; 0x30
    17ae:	8f a7       	std	Y+47, r24	; 0x2f
    17b0:	0f c0       	rjmp	.+30     	; 0x17d0 <LCD_sendCommand+0xd2>
    17b2:	88 ec       	ldi	r24, 0xC8	; 200
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	9e a7       	std	Y+46, r25	; 0x2e
    17b8:	8d a7       	std	Y+45, r24	; 0x2d
    17ba:	8d a5       	ldd	r24, Y+45	; 0x2d
    17bc:	9e a5       	ldd	r25, Y+46	; 0x2e
    17be:	01 97       	sbiw	r24, 0x01	; 1
    17c0:	f1 f7       	brne	.-4      	; 0x17be <LCD_sendCommand+0xc0>
    17c2:	9e a7       	std	Y+46, r25	; 0x2e
    17c4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    17c8:	98 a9       	ldd	r25, Y+48	; 0x30
    17ca:	01 97       	sbiw	r24, 0x01	; 1
    17cc:	98 ab       	std	Y+48, r25	; 0x30
    17ce:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    17d2:	98 a9       	ldd	r25, Y+48	; 0x30
    17d4:	00 97       	sbiw	r24, 0x00	; 0
    17d6:	69 f7       	brne	.-38     	; 0x17b2 <LCD_sendCommand+0xb4>
    17d8:	14 c0       	rjmp	.+40     	; 0x1802 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17da:	69 a9       	ldd	r22, Y+49	; 0x31
    17dc:	7a a9       	ldd	r23, Y+50	; 0x32
    17de:	8b a9       	ldd	r24, Y+51	; 0x33
    17e0:	9c a9       	ldd	r25, Y+52	; 0x34
    17e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	98 ab       	std	Y+48, r25	; 0x30
    17ec:	8f a7       	std	Y+47, r24	; 0x2f
    17ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    17f0:	98 a9       	ldd	r25, Y+48	; 0x30
    17f2:	9c a7       	std	Y+44, r25	; 0x2c
    17f4:	8b a7       	std	Y+43, r24	; 0x2b
    17f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    17f8:	9c a5       	ldd	r25, Y+44	; 0x2c
    17fa:	01 97       	sbiw	r24, 0x01	; 1
    17fc:	f1 f7       	brne	.-4      	; 0x17fa <LCD_sendCommand+0xfc>
    17fe:	9c a7       	std	Y+44, r25	; 0x2c
    1800:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */

	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1802:	83 e0       	ldi	r24, 0x03	; 3
    1804:	67 e0       	ldi	r22, 0x07	; 7
    1806:	41 e0       	ldi	r20, 0x01	; 1
    1808:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <GPIO_writePin>
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	a0 e8       	ldi	r26, 0x80	; 128
    1812:	bf e3       	ldi	r27, 0x3F	; 63
    1814:	8f a3       	std	Y+39, r24	; 0x27
    1816:	98 a7       	std	Y+40, r25	; 0x28
    1818:	a9 a7       	std	Y+41, r26	; 0x29
    181a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    181c:	6f a1       	ldd	r22, Y+39	; 0x27
    181e:	78 a5       	ldd	r23, Y+40	; 0x28
    1820:	89 a5       	ldd	r24, Y+41	; 0x29
    1822:	9a a5       	ldd	r25, Y+42	; 0x2a
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	4a ef       	ldi	r20, 0xFA	; 250
    182a:	54 e4       	ldi	r21, 0x44	; 68
    182c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	8b a3       	std	Y+35, r24	; 0x23
    1836:	9c a3       	std	Y+36, r25	; 0x24
    1838:	ad a3       	std	Y+37, r26	; 0x25
    183a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    183c:	6b a1       	ldd	r22, Y+35	; 0x23
    183e:	7c a1       	ldd	r23, Y+36	; 0x24
    1840:	8d a1       	ldd	r24, Y+37	; 0x25
    1842:	9e a1       	ldd	r25, Y+38	; 0x26
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	40 e8       	ldi	r20, 0x80	; 128
    184a:	5f e3       	ldi	r21, 0x3F	; 63
    184c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1850:	88 23       	and	r24, r24
    1852:	2c f4       	brge	.+10     	; 0x185e <LCD_sendCommand+0x160>
		__ticks = 1;
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	9a a3       	std	Y+34, r25	; 0x22
    185a:	89 a3       	std	Y+33, r24	; 0x21
    185c:	3f c0       	rjmp	.+126    	; 0x18dc <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    185e:	6b a1       	ldd	r22, Y+35	; 0x23
    1860:	7c a1       	ldd	r23, Y+36	; 0x24
    1862:	8d a1       	ldd	r24, Y+37	; 0x25
    1864:	9e a1       	ldd	r25, Y+38	; 0x26
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	3f ef       	ldi	r19, 0xFF	; 255
    186a:	4f e7       	ldi	r20, 0x7F	; 127
    186c:	57 e4       	ldi	r21, 0x47	; 71
    186e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1872:	18 16       	cp	r1, r24
    1874:	4c f5       	brge	.+82     	; 0x18c8 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1876:	6f a1       	ldd	r22, Y+39	; 0x27
    1878:	78 a5       	ldd	r23, Y+40	; 0x28
    187a:	89 a5       	ldd	r24, Y+41	; 0x29
    187c:	9a a5       	ldd	r25, Y+42	; 0x2a
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	40 e2       	ldi	r20, 0x20	; 32
    1884:	51 e4       	ldi	r21, 0x41	; 65
    1886:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    188a:	dc 01       	movw	r26, r24
    188c:	cb 01       	movw	r24, r22
    188e:	bc 01       	movw	r22, r24
    1890:	cd 01       	movw	r24, r26
    1892:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	9a a3       	std	Y+34, r25	; 0x22
    189c:	89 a3       	std	Y+33, r24	; 0x21
    189e:	0f c0       	rjmp	.+30     	; 0x18be <LCD_sendCommand+0x1c0>
    18a0:	88 ec       	ldi	r24, 0xC8	; 200
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	98 a3       	std	Y+32, r25	; 0x20
    18a6:	8f 8f       	std	Y+31, r24	; 0x1f
    18a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18aa:	98 a1       	ldd	r25, Y+32	; 0x20
    18ac:	01 97       	sbiw	r24, 0x01	; 1
    18ae:	f1 f7       	brne	.-4      	; 0x18ac <LCD_sendCommand+0x1ae>
    18b0:	98 a3       	std	Y+32, r25	; 0x20
    18b2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18b4:	89 a1       	ldd	r24, Y+33	; 0x21
    18b6:	9a a1       	ldd	r25, Y+34	; 0x22
    18b8:	01 97       	sbiw	r24, 0x01	; 1
    18ba:	9a a3       	std	Y+34, r25	; 0x22
    18bc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18be:	89 a1       	ldd	r24, Y+33	; 0x21
    18c0:	9a a1       	ldd	r25, Y+34	; 0x22
    18c2:	00 97       	sbiw	r24, 0x00	; 0
    18c4:	69 f7       	brne	.-38     	; 0x18a0 <LCD_sendCommand+0x1a2>
    18c6:	14 c0       	rjmp	.+40     	; 0x18f0 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18c8:	6b a1       	ldd	r22, Y+35	; 0x23
    18ca:	7c a1       	ldd	r23, Y+36	; 0x24
    18cc:	8d a1       	ldd	r24, Y+37	; 0x25
    18ce:	9e a1       	ldd	r25, Y+38	; 0x26
    18d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d4:	dc 01       	movw	r26, r24
    18d6:	cb 01       	movw	r24, r22
    18d8:	9a a3       	std	Y+34, r25	; 0x22
    18da:	89 a3       	std	Y+33, r24	; 0x21
    18dc:	89 a1       	ldd	r24, Y+33	; 0x21
    18de:	9a a1       	ldd	r25, Y+34	; 0x22
    18e0:	9e 8f       	std	Y+30, r25	; 0x1e
    18e2:	8d 8f       	std	Y+29, r24	; 0x1d
    18e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18e8:	01 97       	sbiw	r24, 0x01	; 1
    18ea:	f1 f7       	brne	.-4      	; 0x18e8 <LCD_sendCommand+0x1ea>
    18ec:	9e 8f       	std	Y+30, r25	; 0x1e
    18ee:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    18f0:	82 e0       	ldi	r24, 0x02	; 2
    18f2:	69 ad       	ldd	r22, Y+57	; 0x39
    18f4:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <GPIO_writePort>
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	a0 e8       	ldi	r26, 0x80	; 128
    18fe:	bf e3       	ldi	r27, 0x3F	; 63
    1900:	89 8f       	std	Y+25, r24	; 0x19
    1902:	9a 8f       	std	Y+26, r25	; 0x1a
    1904:	ab 8f       	std	Y+27, r26	; 0x1b
    1906:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1908:	69 8d       	ldd	r22, Y+25	; 0x19
    190a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    190c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    190e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	4a ef       	ldi	r20, 0xFA	; 250
    1916:	54 e4       	ldi	r21, 0x44	; 68
    1918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	8d 8b       	std	Y+21, r24	; 0x15
    1922:	9e 8b       	std	Y+22, r25	; 0x16
    1924:	af 8b       	std	Y+23, r26	; 0x17
    1926:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1928:	6d 89       	ldd	r22, Y+21	; 0x15
    192a:	7e 89       	ldd	r23, Y+22	; 0x16
    192c:	8f 89       	ldd	r24, Y+23	; 0x17
    192e:	98 8d       	ldd	r25, Y+24	; 0x18
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	40 e8       	ldi	r20, 0x80	; 128
    1936:	5f e3       	ldi	r21, 0x3F	; 63
    1938:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    193c:	88 23       	and	r24, r24
    193e:	2c f4       	brge	.+10     	; 0x194a <LCD_sendCommand+0x24c>
		__ticks = 1;
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	9c 8b       	std	Y+20, r25	; 0x14
    1946:	8b 8b       	std	Y+19, r24	; 0x13
    1948:	3f c0       	rjmp	.+126    	; 0x19c8 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    194a:	6d 89       	ldd	r22, Y+21	; 0x15
    194c:	7e 89       	ldd	r23, Y+22	; 0x16
    194e:	8f 89       	ldd	r24, Y+23	; 0x17
    1950:	98 8d       	ldd	r25, Y+24	; 0x18
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	3f ef       	ldi	r19, 0xFF	; 255
    1956:	4f e7       	ldi	r20, 0x7F	; 127
    1958:	57 e4       	ldi	r21, 0x47	; 71
    195a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    195e:	18 16       	cp	r1, r24
    1960:	4c f5       	brge	.+82     	; 0x19b4 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1962:	69 8d       	ldd	r22, Y+25	; 0x19
    1964:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1966:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1968:	9c 8d       	ldd	r25, Y+28	; 0x1c
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	40 e2       	ldi	r20, 0x20	; 32
    1970:	51 e4       	ldi	r21, 0x41	; 65
    1972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	bc 01       	movw	r22, r24
    197c:	cd 01       	movw	r24, r26
    197e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	9c 8b       	std	Y+20, r25	; 0x14
    1988:	8b 8b       	std	Y+19, r24	; 0x13
    198a:	0f c0       	rjmp	.+30     	; 0x19aa <LCD_sendCommand+0x2ac>
    198c:	88 ec       	ldi	r24, 0xC8	; 200
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	9a 8b       	std	Y+18, r25	; 0x12
    1992:	89 8b       	std	Y+17, r24	; 0x11
    1994:	89 89       	ldd	r24, Y+17	; 0x11
    1996:	9a 89       	ldd	r25, Y+18	; 0x12
    1998:	01 97       	sbiw	r24, 0x01	; 1
    199a:	f1 f7       	brne	.-4      	; 0x1998 <LCD_sendCommand+0x29a>
    199c:	9a 8b       	std	Y+18, r25	; 0x12
    199e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a0:	8b 89       	ldd	r24, Y+19	; 0x13
    19a2:	9c 89       	ldd	r25, Y+20	; 0x14
    19a4:	01 97       	sbiw	r24, 0x01	; 1
    19a6:	9c 8b       	std	Y+20, r25	; 0x14
    19a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19aa:	8b 89       	ldd	r24, Y+19	; 0x13
    19ac:	9c 89       	ldd	r25, Y+20	; 0x14
    19ae:	00 97       	sbiw	r24, 0x00	; 0
    19b0:	69 f7       	brne	.-38     	; 0x198c <LCD_sendCommand+0x28e>
    19b2:	14 c0       	rjmp	.+40     	; 0x19dc <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b4:	6d 89       	ldd	r22, Y+21	; 0x15
    19b6:	7e 89       	ldd	r23, Y+22	; 0x16
    19b8:	8f 89       	ldd	r24, Y+23	; 0x17
    19ba:	98 8d       	ldd	r25, Y+24	; 0x18
    19bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	9c 8b       	std	Y+20, r25	; 0x14
    19c6:	8b 8b       	std	Y+19, r24	; 0x13
    19c8:	8b 89       	ldd	r24, Y+19	; 0x13
    19ca:	9c 89       	ldd	r25, Y+20	; 0x14
    19cc:	98 8b       	std	Y+16, r25	; 0x10
    19ce:	8f 87       	std	Y+15, r24	; 0x0f
    19d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    19d2:	98 89       	ldd	r25, Y+16	; 0x10
    19d4:	01 97       	sbiw	r24, 0x01	; 1
    19d6:	f1 f7       	brne	.-4      	; 0x19d4 <LCD_sendCommand+0x2d6>
    19d8:	98 8b       	std	Y+16, r25	; 0x10
    19da:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */

	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    19dc:	83 e0       	ldi	r24, 0x03	; 3
    19de:	67 e0       	ldi	r22, 0x07	; 7
    19e0:	40 e0       	ldi	r20, 0x00	; 0
    19e2:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <GPIO_writePin>
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	a0 e8       	ldi	r26, 0x80	; 128
    19ec:	bf e3       	ldi	r27, 0x3F	; 63
    19ee:	8b 87       	std	Y+11, r24	; 0x0b
    19f0:	9c 87       	std	Y+12, r25	; 0x0c
    19f2:	ad 87       	std	Y+13, r26	; 0x0d
    19f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    19f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    19fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    19fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	4a ef       	ldi	r20, 0xFA	; 250
    1a04:	54 e4       	ldi	r21, 0x44	; 68
    1a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	8f 83       	std	Y+7, r24	; 0x07
    1a10:	98 87       	std	Y+8, r25	; 0x08
    1a12:	a9 87       	std	Y+9, r26	; 0x09
    1a14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a16:	6f 81       	ldd	r22, Y+7	; 0x07
    1a18:	78 85       	ldd	r23, Y+8	; 0x08
    1a1a:	89 85       	ldd	r24, Y+9	; 0x09
    1a1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	40 e8       	ldi	r20, 0x80	; 128
    1a24:	5f e3       	ldi	r21, 0x3F	; 63
    1a26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a2a:	88 23       	and	r24, r24
    1a2c:	2c f4       	brge	.+10     	; 0x1a38 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	9e 83       	std	Y+6, r25	; 0x06
    1a34:	8d 83       	std	Y+5, r24	; 0x05
    1a36:	3f c0       	rjmp	.+126    	; 0x1ab6 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1a38:	6f 81       	ldd	r22, Y+7	; 0x07
    1a3a:	78 85       	ldd	r23, Y+8	; 0x08
    1a3c:	89 85       	ldd	r24, Y+9	; 0x09
    1a3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	3f ef       	ldi	r19, 0xFF	; 255
    1a44:	4f e7       	ldi	r20, 0x7F	; 127
    1a46:	57 e4       	ldi	r21, 0x47	; 71
    1a48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a4c:	18 16       	cp	r1, r24
    1a4e:	4c f5       	brge	.+82     	; 0x1aa2 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	40 e2       	ldi	r20, 0x20	; 32
    1a5e:	51 e4       	ldi	r21, 0x41	; 65
    1a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a64:	dc 01       	movw	r26, r24
    1a66:	cb 01       	movw	r24, r22
    1a68:	bc 01       	movw	r22, r24
    1a6a:	cd 01       	movw	r24, r26
    1a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a70:	dc 01       	movw	r26, r24
    1a72:	cb 01       	movw	r24, r22
    1a74:	9e 83       	std	Y+6, r25	; 0x06
    1a76:	8d 83       	std	Y+5, r24	; 0x05
    1a78:	0f c0       	rjmp	.+30     	; 0x1a98 <LCD_sendCommand+0x39a>
    1a7a:	88 ec       	ldi	r24, 0xC8	; 200
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	9c 83       	std	Y+4, r25	; 0x04
    1a80:	8b 83       	std	Y+3, r24	; 0x03
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	9c 81       	ldd	r25, Y+4	; 0x04
    1a86:	01 97       	sbiw	r24, 0x01	; 1
    1a88:	f1 f7       	brne	.-4      	; 0x1a86 <LCD_sendCommand+0x388>
    1a8a:	9c 83       	std	Y+4, r25	; 0x04
    1a8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a90:	9e 81       	ldd	r25, Y+6	; 0x06
    1a92:	01 97       	sbiw	r24, 0x01	; 1
    1a94:	9e 83       	std	Y+6, r25	; 0x06
    1a96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a98:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9c:	00 97       	sbiw	r24, 0x00	; 0
    1a9e:	69 f7       	brne	.-38     	; 0x1a7a <LCD_sendCommand+0x37c>
    1aa0:	14 c0       	rjmp	.+40     	; 0x1aca <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa2:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa4:	78 85       	ldd	r23, Y+8	; 0x08
    1aa6:	89 85       	ldd	r24, Y+9	; 0x09
    1aa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	9e 83       	std	Y+6, r25	; 0x06
    1ab4:	8d 83       	std	Y+5, r24	; 0x05
    1ab6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aba:	9a 83       	std	Y+2, r25	; 0x02
    1abc:	89 83       	std	Y+1, r24	; 0x01
    1abe:	89 81       	ldd	r24, Y+1	; 0x01
    1ac0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac2:	01 97       	sbiw	r24, 0x01	; 1
    1ac4:	f1 f7       	brne	.-4      	; 0x1ac2 <LCD_sendCommand+0x3c4>
    1ac6:	9a 83       	std	Y+2, r25	; 0x02
    1ac8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1aca:	e9 96       	adiw	r28, 0x39	; 57
    1acc:	0f b6       	in	r0, 0x3f	; 63
    1ace:	f8 94       	cli
    1ad0:	de bf       	out	0x3e, r29	; 62
    1ad2:	0f be       	out	0x3f, r0	; 63
    1ad4:	cd bf       	out	0x3d, r28	; 61
    1ad6:	cf 91       	pop	r28
    1ad8:	df 91       	pop	r29
    1ada:	08 95       	ret

00001adc <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1adc:	df 93       	push	r29
    1ade:	cf 93       	push	r28
    1ae0:	cd b7       	in	r28, 0x3d	; 61
    1ae2:	de b7       	in	r29, 0x3e	; 62
    1ae4:	e9 97       	sbiw	r28, 0x39	; 57
    1ae6:	0f b6       	in	r0, 0x3f	; 63
    1ae8:	f8 94       	cli
    1aea:	de bf       	out	0x3e, r29	; 62
    1aec:	0f be       	out	0x3f, r0	; 63
    1aee:	cd bf       	out	0x3d, r28	; 61
    1af0:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1af2:	83 e0       	ldi	r24, 0x03	; 3
    1af4:	66 e0       	ldi	r22, 0x06	; 6
    1af6:	41 e0       	ldi	r20, 0x01	; 1
    1af8:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <GPIO_writePin>
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	a0 e8       	ldi	r26, 0x80	; 128
    1b02:	bf e3       	ldi	r27, 0x3F	; 63
    1b04:	8d ab       	std	Y+53, r24	; 0x35
    1b06:	9e ab       	std	Y+54, r25	; 0x36
    1b08:	af ab       	std	Y+55, r26	; 0x37
    1b0a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b0c:	6d a9       	ldd	r22, Y+53	; 0x35
    1b0e:	7e a9       	ldd	r23, Y+54	; 0x36
    1b10:	8f a9       	ldd	r24, Y+55	; 0x37
    1b12:	98 ad       	ldd	r25, Y+56	; 0x38
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	4a ef       	ldi	r20, 0xFA	; 250
    1b1a:	54 e4       	ldi	r21, 0x44	; 68
    1b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	89 ab       	std	Y+49, r24	; 0x31
    1b26:	9a ab       	std	Y+50, r25	; 0x32
    1b28:	ab ab       	std	Y+51, r26	; 0x33
    1b2a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b2c:	69 a9       	ldd	r22, Y+49	; 0x31
    1b2e:	7a a9       	ldd	r23, Y+50	; 0x32
    1b30:	8b a9       	ldd	r24, Y+51	; 0x33
    1b32:	9c a9       	ldd	r25, Y+52	; 0x34
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	40 e8       	ldi	r20, 0x80	; 128
    1b3a:	5f e3       	ldi	r21, 0x3F	; 63
    1b3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b40:	88 23       	and	r24, r24
    1b42:	2c f4       	brge	.+10     	; 0x1b4e <LCD_displayCharacter+0x72>
		__ticks = 1;
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	98 ab       	std	Y+48, r25	; 0x30
    1b4a:	8f a7       	std	Y+47, r24	; 0x2f
    1b4c:	3f c0       	rjmp	.+126    	; 0x1bcc <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1b4e:	69 a9       	ldd	r22, Y+49	; 0x31
    1b50:	7a a9       	ldd	r23, Y+50	; 0x32
    1b52:	8b a9       	ldd	r24, Y+51	; 0x33
    1b54:	9c a9       	ldd	r25, Y+52	; 0x34
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	3f ef       	ldi	r19, 0xFF	; 255
    1b5a:	4f e7       	ldi	r20, 0x7F	; 127
    1b5c:	57 e4       	ldi	r21, 0x47	; 71
    1b5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b62:	18 16       	cp	r1, r24
    1b64:	4c f5       	brge	.+82     	; 0x1bb8 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b66:	6d a9       	ldd	r22, Y+53	; 0x35
    1b68:	7e a9       	ldd	r23, Y+54	; 0x36
    1b6a:	8f a9       	ldd	r24, Y+55	; 0x37
    1b6c:	98 ad       	ldd	r25, Y+56	; 0x38
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	40 e2       	ldi	r20, 0x20	; 32
    1b74:	51 e4       	ldi	r21, 0x41	; 65
    1b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	bc 01       	movw	r22, r24
    1b80:	cd 01       	movw	r24, r26
    1b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	98 ab       	std	Y+48, r25	; 0x30
    1b8c:	8f a7       	std	Y+47, r24	; 0x2f
    1b8e:	0f c0       	rjmp	.+30     	; 0x1bae <LCD_displayCharacter+0xd2>
    1b90:	88 ec       	ldi	r24, 0xC8	; 200
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	9e a7       	std	Y+46, r25	; 0x2e
    1b96:	8d a7       	std	Y+45, r24	; 0x2d
    1b98:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b9a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b9c:	01 97       	sbiw	r24, 0x01	; 1
    1b9e:	f1 f7       	brne	.-4      	; 0x1b9c <LCD_displayCharacter+0xc0>
    1ba0:	9e a7       	std	Y+46, r25	; 0x2e
    1ba2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ba6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	98 ab       	std	Y+48, r25	; 0x30
    1bac:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bae:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bb0:	98 a9       	ldd	r25, Y+48	; 0x30
    1bb2:	00 97       	sbiw	r24, 0x00	; 0
    1bb4:	69 f7       	brne	.-38     	; 0x1b90 <LCD_displayCharacter+0xb4>
    1bb6:	14 c0       	rjmp	.+40     	; 0x1be0 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb8:	69 a9       	ldd	r22, Y+49	; 0x31
    1bba:	7a a9       	ldd	r23, Y+50	; 0x32
    1bbc:	8b a9       	ldd	r24, Y+51	; 0x33
    1bbe:	9c a9       	ldd	r25, Y+52	; 0x34
    1bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	98 ab       	std	Y+48, r25	; 0x30
    1bca:	8f a7       	std	Y+47, r24	; 0x2f
    1bcc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bce:	98 a9       	ldd	r25, Y+48	; 0x30
    1bd0:	9c a7       	std	Y+44, r25	; 0x2c
    1bd2:	8b a7       	std	Y+43, r24	; 0x2b
    1bd4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bd6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bd8:	01 97       	sbiw	r24, 0x01	; 1
    1bda:	f1 f7       	brne	.-4      	; 0x1bd8 <LCD_displayCharacter+0xfc>
    1bdc:	9c a7       	std	Y+44, r25	; 0x2c
    1bde:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */

	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1be0:	83 e0       	ldi	r24, 0x03	; 3
    1be2:	67 e0       	ldi	r22, 0x07	; 7
    1be4:	41 e0       	ldi	r20, 0x01	; 1
    1be6:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <GPIO_writePin>
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	a0 e8       	ldi	r26, 0x80	; 128
    1bf0:	bf e3       	ldi	r27, 0x3F	; 63
    1bf2:	8f a3       	std	Y+39, r24	; 0x27
    1bf4:	98 a7       	std	Y+40, r25	; 0x28
    1bf6:	a9 a7       	std	Y+41, r26	; 0x29
    1bf8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bfa:	6f a1       	ldd	r22, Y+39	; 0x27
    1bfc:	78 a5       	ldd	r23, Y+40	; 0x28
    1bfe:	89 a5       	ldd	r24, Y+41	; 0x29
    1c00:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	4a ef       	ldi	r20, 0xFA	; 250
    1c08:	54 e4       	ldi	r21, 0x44	; 68
    1c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	8b a3       	std	Y+35, r24	; 0x23
    1c14:	9c a3       	std	Y+36, r25	; 0x24
    1c16:	ad a3       	std	Y+37, r26	; 0x25
    1c18:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c1a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c1c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c1e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c20:	9e a1       	ldd	r25, Y+38	; 0x26
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	40 e8       	ldi	r20, 0x80	; 128
    1c28:	5f e3       	ldi	r21, 0x3F	; 63
    1c2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c2e:	88 23       	and	r24, r24
    1c30:	2c f4       	brge	.+10     	; 0x1c3c <LCD_displayCharacter+0x160>
		__ticks = 1;
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	9a a3       	std	Y+34, r25	; 0x22
    1c38:	89 a3       	std	Y+33, r24	; 0x21
    1c3a:	3f c0       	rjmp	.+126    	; 0x1cba <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1c3c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c3e:	7c a1       	ldd	r23, Y+36	; 0x24
    1c40:	8d a1       	ldd	r24, Y+37	; 0x25
    1c42:	9e a1       	ldd	r25, Y+38	; 0x26
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	3f ef       	ldi	r19, 0xFF	; 255
    1c48:	4f e7       	ldi	r20, 0x7F	; 127
    1c4a:	57 e4       	ldi	r21, 0x47	; 71
    1c4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c50:	18 16       	cp	r1, r24
    1c52:	4c f5       	brge	.+82     	; 0x1ca6 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c54:	6f a1       	ldd	r22, Y+39	; 0x27
    1c56:	78 a5       	ldd	r23, Y+40	; 0x28
    1c58:	89 a5       	ldd	r24, Y+41	; 0x29
    1c5a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	40 e2       	ldi	r20, 0x20	; 32
    1c62:	51 e4       	ldi	r21, 0x41	; 65
    1c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	bc 01       	movw	r22, r24
    1c6e:	cd 01       	movw	r24, r26
    1c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	9a a3       	std	Y+34, r25	; 0x22
    1c7a:	89 a3       	std	Y+33, r24	; 0x21
    1c7c:	0f c0       	rjmp	.+30     	; 0x1c9c <LCD_displayCharacter+0x1c0>
    1c7e:	88 ec       	ldi	r24, 0xC8	; 200
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	98 a3       	std	Y+32, r25	; 0x20
    1c84:	8f 8f       	std	Y+31, r24	; 0x1f
    1c86:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c88:	98 a1       	ldd	r25, Y+32	; 0x20
    1c8a:	01 97       	sbiw	r24, 0x01	; 1
    1c8c:	f1 f7       	brne	.-4      	; 0x1c8a <LCD_displayCharacter+0x1ae>
    1c8e:	98 a3       	std	Y+32, r25	; 0x20
    1c90:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c92:	89 a1       	ldd	r24, Y+33	; 0x21
    1c94:	9a a1       	ldd	r25, Y+34	; 0x22
    1c96:	01 97       	sbiw	r24, 0x01	; 1
    1c98:	9a a3       	std	Y+34, r25	; 0x22
    1c9a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c9c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c9e:	9a a1       	ldd	r25, Y+34	; 0x22
    1ca0:	00 97       	sbiw	r24, 0x00	; 0
    1ca2:	69 f7       	brne	.-38     	; 0x1c7e <LCD_displayCharacter+0x1a2>
    1ca4:	14 c0       	rjmp	.+40     	; 0x1cce <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ca8:	7c a1       	ldd	r23, Y+36	; 0x24
    1caa:	8d a1       	ldd	r24, Y+37	; 0x25
    1cac:	9e a1       	ldd	r25, Y+38	; 0x26
    1cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	9a a3       	std	Y+34, r25	; 0x22
    1cb8:	89 a3       	std	Y+33, r24	; 0x21
    1cba:	89 a1       	ldd	r24, Y+33	; 0x21
    1cbc:	9a a1       	ldd	r25, Y+34	; 0x22
    1cbe:	9e 8f       	std	Y+30, r25	; 0x1e
    1cc0:	8d 8f       	std	Y+29, r24	; 0x1d
    1cc2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cc4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cc6:	01 97       	sbiw	r24, 0x01	; 1
    1cc8:	f1 f7       	brne	.-4      	; 0x1cc6 <LCD_displayCharacter+0x1ea>
    1cca:	9e 8f       	std	Y+30, r25	; 0x1e
    1ccc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1cce:	82 e0       	ldi	r24, 0x02	; 2
    1cd0:	69 ad       	ldd	r22, Y+57	; 0x39
    1cd2:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <GPIO_writePort>
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	a0 e8       	ldi	r26, 0x80	; 128
    1cdc:	bf e3       	ldi	r27, 0x3F	; 63
    1cde:	89 8f       	std	Y+25, r24	; 0x19
    1ce0:	9a 8f       	std	Y+26, r25	; 0x1a
    1ce2:	ab 8f       	std	Y+27, r26	; 0x1b
    1ce4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ce8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	4a ef       	ldi	r20, 0xFA	; 250
    1cf4:	54 e4       	ldi	r21, 0x44	; 68
    1cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	8d 8b       	std	Y+21, r24	; 0x15
    1d00:	9e 8b       	std	Y+22, r25	; 0x16
    1d02:	af 8b       	std	Y+23, r26	; 0x17
    1d04:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d06:	6d 89       	ldd	r22, Y+21	; 0x15
    1d08:	7e 89       	ldd	r23, Y+22	; 0x16
    1d0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	40 e8       	ldi	r20, 0x80	; 128
    1d14:	5f e3       	ldi	r21, 0x3F	; 63
    1d16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d1a:	88 23       	and	r24, r24
    1d1c:	2c f4       	brge	.+10     	; 0x1d28 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	9c 8b       	std	Y+20, r25	; 0x14
    1d24:	8b 8b       	std	Y+19, r24	; 0x13
    1d26:	3f c0       	rjmp	.+126    	; 0x1da6 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1d28:	6d 89       	ldd	r22, Y+21	; 0x15
    1d2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	3f ef       	ldi	r19, 0xFF	; 255
    1d34:	4f e7       	ldi	r20, 0x7F	; 127
    1d36:	57 e4       	ldi	r21, 0x47	; 71
    1d38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d3c:	18 16       	cp	r1, r24
    1d3e:	4c f5       	brge	.+82     	; 0x1d92 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d40:	69 8d       	ldd	r22, Y+25	; 0x19
    1d42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	40 e2       	ldi	r20, 0x20	; 32
    1d4e:	51 e4       	ldi	r21, 0x41	; 65
    1d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	bc 01       	movw	r22, r24
    1d5a:	cd 01       	movw	r24, r26
    1d5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	9c 8b       	std	Y+20, r25	; 0x14
    1d66:	8b 8b       	std	Y+19, r24	; 0x13
    1d68:	0f c0       	rjmp	.+30     	; 0x1d88 <LCD_displayCharacter+0x2ac>
    1d6a:	88 ec       	ldi	r24, 0xC8	; 200
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	9a 8b       	std	Y+18, r25	; 0x12
    1d70:	89 8b       	std	Y+17, r24	; 0x11
    1d72:	89 89       	ldd	r24, Y+17	; 0x11
    1d74:	9a 89       	ldd	r25, Y+18	; 0x12
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	f1 f7       	brne	.-4      	; 0x1d76 <LCD_displayCharacter+0x29a>
    1d7a:	9a 8b       	std	Y+18, r25	; 0x12
    1d7c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d80:	9c 89       	ldd	r25, Y+20	; 0x14
    1d82:	01 97       	sbiw	r24, 0x01	; 1
    1d84:	9c 8b       	std	Y+20, r25	; 0x14
    1d86:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d88:	8b 89       	ldd	r24, Y+19	; 0x13
    1d8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d8c:	00 97       	sbiw	r24, 0x00	; 0
    1d8e:	69 f7       	brne	.-38     	; 0x1d6a <LCD_displayCharacter+0x28e>
    1d90:	14 c0       	rjmp	.+40     	; 0x1dba <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d92:	6d 89       	ldd	r22, Y+21	; 0x15
    1d94:	7e 89       	ldd	r23, Y+22	; 0x16
    1d96:	8f 89       	ldd	r24, Y+23	; 0x17
    1d98:	98 8d       	ldd	r25, Y+24	; 0x18
    1d9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	9c 8b       	std	Y+20, r25	; 0x14
    1da4:	8b 8b       	std	Y+19, r24	; 0x13
    1da6:	8b 89       	ldd	r24, Y+19	; 0x13
    1da8:	9c 89       	ldd	r25, Y+20	; 0x14
    1daa:	98 8b       	std	Y+16, r25	; 0x10
    1dac:	8f 87       	std	Y+15, r24	; 0x0f
    1dae:	8f 85       	ldd	r24, Y+15	; 0x0f
    1db0:	98 89       	ldd	r25, Y+16	; 0x10
    1db2:	01 97       	sbiw	r24, 0x01	; 1
    1db4:	f1 f7       	brne	.-4      	; 0x1db2 <LCD_displayCharacter+0x2d6>
    1db6:	98 8b       	std	Y+16, r25	; 0x10
    1db8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */

	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1dba:	83 e0       	ldi	r24, 0x03	; 3
    1dbc:	67 e0       	ldi	r22, 0x07	; 7
    1dbe:	40 e0       	ldi	r20, 0x00	; 0
    1dc0:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <GPIO_writePin>
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	a0 e8       	ldi	r26, 0x80	; 128
    1dca:	bf e3       	ldi	r27, 0x3F	; 63
    1dcc:	8b 87       	std	Y+11, r24	; 0x0b
    1dce:	9c 87       	std	Y+12, r25	; 0x0c
    1dd0:	ad 87       	std	Y+13, r26	; 0x0d
    1dd2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dda:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	4a ef       	ldi	r20, 0xFA	; 250
    1de2:	54 e4       	ldi	r21, 0x44	; 68
    1de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de8:	dc 01       	movw	r26, r24
    1dea:	cb 01       	movw	r24, r22
    1dec:	8f 83       	std	Y+7, r24	; 0x07
    1dee:	98 87       	std	Y+8, r25	; 0x08
    1df0:	a9 87       	std	Y+9, r26	; 0x09
    1df2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1df4:	6f 81       	ldd	r22, Y+7	; 0x07
    1df6:	78 85       	ldd	r23, Y+8	; 0x08
    1df8:	89 85       	ldd	r24, Y+9	; 0x09
    1dfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	40 e8       	ldi	r20, 0x80	; 128
    1e02:	5f e3       	ldi	r21, 0x3F	; 63
    1e04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e08:	88 23       	and	r24, r24
    1e0a:	2c f4       	brge	.+10     	; 0x1e16 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	9e 83       	std	Y+6, r25	; 0x06
    1e12:	8d 83       	std	Y+5, r24	; 0x05
    1e14:	3f c0       	rjmp	.+126    	; 0x1e94 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1e16:	6f 81       	ldd	r22, Y+7	; 0x07
    1e18:	78 85       	ldd	r23, Y+8	; 0x08
    1e1a:	89 85       	ldd	r24, Y+9	; 0x09
    1e1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	3f ef       	ldi	r19, 0xFF	; 255
    1e22:	4f e7       	ldi	r20, 0x7F	; 127
    1e24:	57 e4       	ldi	r21, 0x47	; 71
    1e26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e2a:	18 16       	cp	r1, r24
    1e2c:	4c f5       	brge	.+82     	; 0x1e80 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e30:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e32:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e34:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	40 e2       	ldi	r20, 0x20	; 32
    1e3c:	51 e4       	ldi	r21, 0x41	; 65
    1e3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	bc 01       	movw	r22, r24
    1e48:	cd 01       	movw	r24, r26
    1e4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	9e 83       	std	Y+6, r25	; 0x06
    1e54:	8d 83       	std	Y+5, r24	; 0x05
    1e56:	0f c0       	rjmp	.+30     	; 0x1e76 <LCD_displayCharacter+0x39a>
    1e58:	88 ec       	ldi	r24, 0xC8	; 200
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	9c 83       	std	Y+4, r25	; 0x04
    1e5e:	8b 83       	std	Y+3, r24	; 0x03
    1e60:	8b 81       	ldd	r24, Y+3	; 0x03
    1e62:	9c 81       	ldd	r25, Y+4	; 0x04
    1e64:	01 97       	sbiw	r24, 0x01	; 1
    1e66:	f1 f7       	brne	.-4      	; 0x1e64 <LCD_displayCharacter+0x388>
    1e68:	9c 83       	std	Y+4, r25	; 0x04
    1e6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e70:	01 97       	sbiw	r24, 0x01	; 1
    1e72:	9e 83       	std	Y+6, r25	; 0x06
    1e74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e76:	8d 81       	ldd	r24, Y+5	; 0x05
    1e78:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7a:	00 97       	sbiw	r24, 0x00	; 0
    1e7c:	69 f7       	brne	.-38     	; 0x1e58 <LCD_displayCharacter+0x37c>
    1e7e:	14 c0       	rjmp	.+40     	; 0x1ea8 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e80:	6f 81       	ldd	r22, Y+7	; 0x07
    1e82:	78 85       	ldd	r23, Y+8	; 0x08
    1e84:	89 85       	ldd	r24, Y+9	; 0x09
    1e86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	9e 83       	std	Y+6, r25	; 0x06
    1e92:	8d 83       	std	Y+5, r24	; 0x05
    1e94:	8d 81       	ldd	r24, Y+5	; 0x05
    1e96:	9e 81       	ldd	r25, Y+6	; 0x06
    1e98:	9a 83       	std	Y+2, r25	; 0x02
    1e9a:	89 83       	std	Y+1, r24	; 0x01
    1e9c:	89 81       	ldd	r24, Y+1	; 0x01
    1e9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	f1 f7       	brne	.-4      	; 0x1ea0 <LCD_displayCharacter+0x3c4>
    1ea4:	9a 83       	std	Y+2, r25	; 0x02
    1ea6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1ea8:	e9 96       	adiw	r28, 0x39	; 57
    1eaa:	0f b6       	in	r0, 0x3f	; 63
    1eac:	f8 94       	cli
    1eae:	de bf       	out	0x3e, r29	; 62
    1eb0:	0f be       	out	0x3f, r0	; 63
    1eb2:	cd bf       	out	0x3d, r28	; 61
    1eb4:	cf 91       	pop	r28
    1eb6:	df 91       	pop	r29
    1eb8:	08 95       	ret

00001eba <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1eba:	df 93       	push	r29
    1ebc:	cf 93       	push	r28
    1ebe:	00 d0       	rcall	.+0      	; 0x1ec0 <LCD_displayString+0x6>
    1ec0:	0f 92       	push	r0
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
    1ec6:	9b 83       	std	Y+3, r25	; 0x03
    1ec8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1eca:	19 82       	std	Y+1, r1	; 0x01
    1ecc:	0e c0       	rjmp	.+28     	; 0x1eea <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1ece:	89 81       	ldd	r24, Y+1	; 0x01
    1ed0:	28 2f       	mov	r18, r24
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed8:	fc 01       	movw	r30, r24
    1eda:	e2 0f       	add	r30, r18
    1edc:	f3 1f       	adc	r31, r19
    1ede:	80 81       	ld	r24, Z
    1ee0:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <LCD_displayCharacter>
		i++;
    1ee4:	89 81       	ldd	r24, Y+1	; 0x01
    1ee6:	8f 5f       	subi	r24, 0xFF	; 255
    1ee8:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
    1eec:	28 2f       	mov	r18, r24
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	e2 0f       	add	r30, r18
    1ef8:	f3 1f       	adc	r31, r19
    1efa:	80 81       	ld	r24, Z
    1efc:	88 23       	and	r24, r24
    1efe:	39 f7       	brne	.-50     	; 0x1ece <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	cf 91       	pop	r28
    1f08:	df 91       	pop	r29
    1f0a:	08 95       	ret

00001f0c <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1f0c:	df 93       	push	r29
    1f0e:	cf 93       	push	r28
    1f10:	00 d0       	rcall	.+0      	; 0x1f12 <LCD_moveCursor+0x6>
    1f12:	00 d0       	rcall	.+0      	; 0x1f14 <LCD_moveCursor+0x8>
    1f14:	0f 92       	push	r0
    1f16:	cd b7       	in	r28, 0x3d	; 61
    1f18:	de b7       	in	r29, 0x3e	; 62
    1f1a:	8a 83       	std	Y+2, r24	; 0x02
    1f1c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f20:	28 2f       	mov	r18, r24
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	3d 83       	std	Y+5, r19	; 0x05
    1f26:	2c 83       	std	Y+4, r18	; 0x04
    1f28:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f2c:	81 30       	cpi	r24, 0x01	; 1
    1f2e:	91 05       	cpc	r25, r1
    1f30:	c1 f0       	breq	.+48     	; 0x1f62 <LCD_moveCursor+0x56>
    1f32:	2c 81       	ldd	r18, Y+4	; 0x04
    1f34:	3d 81       	ldd	r19, Y+5	; 0x05
    1f36:	22 30       	cpi	r18, 0x02	; 2
    1f38:	31 05       	cpc	r19, r1
    1f3a:	2c f4       	brge	.+10     	; 0x1f46 <LCD_moveCursor+0x3a>
    1f3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f40:	00 97       	sbiw	r24, 0x00	; 0
    1f42:	61 f0       	breq	.+24     	; 0x1f5c <LCD_moveCursor+0x50>
    1f44:	19 c0       	rjmp	.+50     	; 0x1f78 <LCD_moveCursor+0x6c>
    1f46:	2c 81       	ldd	r18, Y+4	; 0x04
    1f48:	3d 81       	ldd	r19, Y+5	; 0x05
    1f4a:	22 30       	cpi	r18, 0x02	; 2
    1f4c:	31 05       	cpc	r19, r1
    1f4e:	69 f0       	breq	.+26     	; 0x1f6a <LCD_moveCursor+0x5e>
    1f50:	8c 81       	ldd	r24, Y+4	; 0x04
    1f52:	9d 81       	ldd	r25, Y+5	; 0x05
    1f54:	83 30       	cpi	r24, 0x03	; 3
    1f56:	91 05       	cpc	r25, r1
    1f58:	61 f0       	breq	.+24     	; 0x1f72 <LCD_moveCursor+0x66>
    1f5a:	0e c0       	rjmp	.+28     	; 0x1f78 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5e:	89 83       	std	Y+1, r24	; 0x01
    1f60:	0b c0       	rjmp	.+22     	; 0x1f78 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1f62:	8b 81       	ldd	r24, Y+3	; 0x03
    1f64:	80 5c       	subi	r24, 0xC0	; 192
    1f66:	89 83       	std	Y+1, r24	; 0x01
    1f68:	07 c0       	rjmp	.+14     	; 0x1f78 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6c:	80 5f       	subi	r24, 0xF0	; 240
    1f6e:	89 83       	std	Y+1, r24	; 0x01
    1f70:	03 c0       	rjmp	.+6      	; 0x1f78 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1f72:	8b 81       	ldd	r24, Y+3	; 0x03
    1f74:	80 5b       	subi	r24, 0xB0	; 176
    1f76:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1f78:	89 81       	ldd	r24, Y+1	; 0x01
    1f7a:	80 68       	ori	r24, 0x80	; 128
    1f7c:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <LCD_sendCommand>
	/* ( 0x80 | address or 1000 0000 | address ) */
}
    1f80:	0f 90       	pop	r0
    1f82:	0f 90       	pop	r0
    1f84:	0f 90       	pop	r0
    1f86:	0f 90       	pop	r0
    1f88:	0f 90       	pop	r0
    1f8a:	cf 91       	pop	r28
    1f8c:	df 91       	pop	r29
    1f8e:	08 95       	ret

00001f90 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1f90:	df 93       	push	r29
    1f92:	cf 93       	push	r28
    1f94:	00 d0       	rcall	.+0      	; 0x1f96 <LCD_displayStringRowColumn+0x6>
    1f96:	00 d0       	rcall	.+0      	; 0x1f98 <LCD_displayStringRowColumn+0x8>
    1f98:	cd b7       	in	r28, 0x3d	; 61
    1f9a:	de b7       	in	r29, 0x3e	; 62
    1f9c:	89 83       	std	Y+1, r24	; 0x01
    1f9e:	6a 83       	std	Y+2, r22	; 0x02
    1fa0:	5c 83       	std	Y+4, r21	; 0x04
    1fa2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
    1fa6:	6a 81       	ldd	r22, Y+2	; 0x02
    1fa8:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_moveCursor>

	LCD_displayString(Str); /* display the string */
    1fac:	8b 81       	ldd	r24, Y+3	; 0x03
    1fae:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb0:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_displayString>
}
    1fb4:	0f 90       	pop	r0
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
    1fba:	0f 90       	pop	r0
    1fbc:	cf 91       	pop	r28
    1fbe:	df 91       	pop	r29
    1fc0:	08 95       	ret

00001fc2 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1fc2:	df 93       	push	r29
    1fc4:	cf 93       	push	r28
    1fc6:	cd b7       	in	r28, 0x3d	; 61
    1fc8:	de b7       	in	r29, 0x3e	; 62
    1fca:	62 97       	sbiw	r28, 0x12	; 18
    1fcc:	0f b6       	in	r0, 0x3f	; 63
    1fce:	f8 94       	cli
    1fd0:	de bf       	out	0x3e, r29	; 62
    1fd2:	0f be       	out	0x3f, r0	; 63
    1fd4:	cd bf       	out	0x3d, r28	; 61
    1fd6:	9a 8b       	std	Y+18, r25	; 0x12
    1fd8:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */

   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1fda:	89 89       	ldd	r24, Y+17	; 0x11
    1fdc:	9a 89       	ldd	r25, Y+18	; 0x12
    1fde:	9e 01       	movw	r18, r28
    1fe0:	2f 5f       	subi	r18, 0xFF	; 255
    1fe2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe4:	b9 01       	movw	r22, r18
    1fe6:	4a e0       	ldi	r20, 0x0A	; 10
    1fe8:	50 e0       	ldi	r21, 0x00	; 0
    1fea:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <itoa>

   LCD_displayString(buff); /* Display the string */
    1fee:	ce 01       	movw	r24, r28
    1ff0:	01 96       	adiw	r24, 0x01	; 1
    1ff2:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_displayString>
}
    1ff6:	62 96       	adiw	r28, 0x12	; 18
    1ff8:	0f b6       	in	r0, 0x3f	; 63
    1ffa:	f8 94       	cli
    1ffc:	de bf       	out	0x3e, r29	; 62
    1ffe:	0f be       	out	0x3f, r0	; 63
    2000:	cd bf       	out	0x3d, r28	; 61
    2002:	cf 91       	pop	r28
    2004:	df 91       	pop	r29
    2006:	08 95       	ret

00002008 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2008:	df 93       	push	r29
    200a:	cf 93       	push	r28
    200c:	cd b7       	in	r28, 0x3d	; 61
    200e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <LCD_sendCommand>
}
    2016:	cf 91       	pop	r28
    2018:	df 91       	pop	r29
    201a:	08 95       	ret

0000201c <LCD_intgerToStringRowColumn>:
 * Description :
 * Display the required decimal value in a specified row and column index on the screen
 */

void LCD_intgerToStringRowColumn(uint8 row,uint8 col,int data)
{
    201c:	df 93       	push	r29
    201e:	cf 93       	push	r28
    2020:	cd b7       	in	r28, 0x3d	; 61
    2022:	de b7       	in	r29, 0x3e	; 62
    2024:	64 97       	sbiw	r28, 0x14	; 20
    2026:	0f b6       	in	r0, 0x3f	; 63
    2028:	f8 94       	cli
    202a:	de bf       	out	0x3e, r29	; 62
    202c:	0f be       	out	0x3f, r0	; 63
    202e:	cd bf       	out	0x3d, r28	; 61
    2030:	89 8b       	std	Y+17, r24	; 0x11
    2032:	6a 8b       	std	Y+18, r22	; 0x12
    2034:	5c 8b       	std	Y+20, r21	; 0x14
    2036:	4b 8b       	std	Y+19, r20	; 0x13
   char buff[16]; /* String to hold the ascii result */

   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2038:	8b 89       	ldd	r24, Y+19	; 0x13
    203a:	9c 89       	ldd	r25, Y+20	; 0x14
    203c:	9e 01       	movw	r18, r28
    203e:	2f 5f       	subi	r18, 0xFF	; 255
    2040:	3f 4f       	sbci	r19, 0xFF	; 255
    2042:	b9 01       	movw	r22, r18
    2044:	4a e0       	ldi	r20, 0x0A	; 10
    2046:	50 e0       	ldi	r21, 0x00	; 0
    2048:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <itoa>

   LCD_moveCursor(row,col); /* go to to the required LCD position */
    204c:	89 89       	ldd	r24, Y+17	; 0x11
    204e:	6a 89       	ldd	r22, Y+18	; 0x12
    2050:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_moveCursor>

   LCD_displayString(buff); /* Display the string */
    2054:	ce 01       	movw	r24, r28
    2056:	01 96       	adiw	r24, 0x01	; 1
    2058:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_displayString>
}
    205c:	64 96       	adiw	r28, 0x14	; 20
    205e:	0f b6       	in	r0, 0x3f	; 63
    2060:	f8 94       	cli
    2062:	de bf       	out	0x3e, r29	; 62
    2064:	0f be       	out	0x3f, r0	; 63
    2066:	cd bf       	out	0x3d, r28	; 61
    2068:	cf 91       	pop	r28
    206a:	df 91       	pop	r29
    206c:	08 95       	ret

0000206e <LCD_displayCharacterRowColumn>:
/*
 * Description :
 * Display the required character in a specified row and column index on the screen
 */
void LCD_displayCharacterRowColumn(uint8 row,uint8 col,uint8 data)
{
    206e:	df 93       	push	r29
    2070:	cf 93       	push	r28
    2072:	cd b7       	in	r28, 0x3d	; 61
    2074:	de b7       	in	r29, 0x3e	; 62
    2076:	eb 97       	sbiw	r28, 0x3b	; 59
    2078:	0f b6       	in	r0, 0x3f	; 63
    207a:	f8 94       	cli
    207c:	de bf       	out	0x3e, r29	; 62
    207e:	0f be       	out	0x3f, r0	; 63
    2080:	cd bf       	out	0x3d, r28	; 61
    2082:	89 af       	std	Y+57, r24	; 0x39
    2084:	6a af       	std	Y+58, r22	; 0x3a
    2086:	4b af       	std	Y+59, r20	; 0x3b
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2088:	89 ad       	ldd	r24, Y+57	; 0x39
    208a:	6a ad       	ldd	r22, Y+58	; 0x3a
    208c:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_moveCursor>

	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2090:	83 e0       	ldi	r24, 0x03	; 3
    2092:	66 e0       	ldi	r22, 0x06	; 6
    2094:	41 e0       	ldi	r20, 0x01	; 1
    2096:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <GPIO_writePin>
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	a0 e8       	ldi	r26, 0x80	; 128
    20a0:	bf e3       	ldi	r27, 0x3F	; 63
    20a2:	8d ab       	std	Y+53, r24	; 0x35
    20a4:	9e ab       	std	Y+54, r25	; 0x36
    20a6:	af ab       	std	Y+55, r26	; 0x37
    20a8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20aa:	6d a9       	ldd	r22, Y+53	; 0x35
    20ac:	7e a9       	ldd	r23, Y+54	; 0x36
    20ae:	8f a9       	ldd	r24, Y+55	; 0x37
    20b0:	98 ad       	ldd	r25, Y+56	; 0x38
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	4a ef       	ldi	r20, 0xFA	; 250
    20b8:	54 e4       	ldi	r21, 0x44	; 68
    20ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	89 ab       	std	Y+49, r24	; 0x31
    20c4:	9a ab       	std	Y+50, r25	; 0x32
    20c6:	ab ab       	std	Y+51, r26	; 0x33
    20c8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    20ca:	69 a9       	ldd	r22, Y+49	; 0x31
    20cc:	7a a9       	ldd	r23, Y+50	; 0x32
    20ce:	8b a9       	ldd	r24, Y+51	; 0x33
    20d0:	9c a9       	ldd	r25, Y+52	; 0x34
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	40 e8       	ldi	r20, 0x80	; 128
    20d8:	5f e3       	ldi	r21, 0x3F	; 63
    20da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20de:	88 23       	and	r24, r24
    20e0:	2c f4       	brge	.+10     	; 0x20ec <LCD_displayCharacterRowColumn+0x7e>
		__ticks = 1;
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	98 ab       	std	Y+48, r25	; 0x30
    20e8:	8f a7       	std	Y+47, r24	; 0x2f
    20ea:	3f c0       	rjmp	.+126    	; 0x216a <LCD_displayCharacterRowColumn+0xfc>
	else if (__tmp > 65535)
    20ec:	69 a9       	ldd	r22, Y+49	; 0x31
    20ee:	7a a9       	ldd	r23, Y+50	; 0x32
    20f0:	8b a9       	ldd	r24, Y+51	; 0x33
    20f2:	9c a9       	ldd	r25, Y+52	; 0x34
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	3f ef       	ldi	r19, 0xFF	; 255
    20f8:	4f e7       	ldi	r20, 0x7F	; 127
    20fa:	57 e4       	ldi	r21, 0x47	; 71
    20fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2100:	18 16       	cp	r1, r24
    2102:	4c f5       	brge	.+82     	; 0x2156 <LCD_displayCharacterRowColumn+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2104:	6d a9       	ldd	r22, Y+53	; 0x35
    2106:	7e a9       	ldd	r23, Y+54	; 0x36
    2108:	8f a9       	ldd	r24, Y+55	; 0x37
    210a:	98 ad       	ldd	r25, Y+56	; 0x38
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	40 e2       	ldi	r20, 0x20	; 32
    2112:	51 e4       	ldi	r21, 0x41	; 65
    2114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	bc 01       	movw	r22, r24
    211e:	cd 01       	movw	r24, r26
    2120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
    2128:	98 ab       	std	Y+48, r25	; 0x30
    212a:	8f a7       	std	Y+47, r24	; 0x2f
    212c:	0f c0       	rjmp	.+30     	; 0x214c <LCD_displayCharacterRowColumn+0xde>
    212e:	88 ec       	ldi	r24, 0xC8	; 200
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	9e a7       	std	Y+46, r25	; 0x2e
    2134:	8d a7       	std	Y+45, r24	; 0x2d
    2136:	8d a5       	ldd	r24, Y+45	; 0x2d
    2138:	9e a5       	ldd	r25, Y+46	; 0x2e
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	f1 f7       	brne	.-4      	; 0x213a <LCD_displayCharacterRowColumn+0xcc>
    213e:	9e a7       	std	Y+46, r25	; 0x2e
    2140:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2142:	8f a5       	ldd	r24, Y+47	; 0x2f
    2144:	98 a9       	ldd	r25, Y+48	; 0x30
    2146:	01 97       	sbiw	r24, 0x01	; 1
    2148:	98 ab       	std	Y+48, r25	; 0x30
    214a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    214c:	8f a5       	ldd	r24, Y+47	; 0x2f
    214e:	98 a9       	ldd	r25, Y+48	; 0x30
    2150:	00 97       	sbiw	r24, 0x00	; 0
    2152:	69 f7       	brne	.-38     	; 0x212e <LCD_displayCharacterRowColumn+0xc0>
    2154:	14 c0       	rjmp	.+40     	; 0x217e <LCD_displayCharacterRowColumn+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2156:	69 a9       	ldd	r22, Y+49	; 0x31
    2158:	7a a9       	ldd	r23, Y+50	; 0x32
    215a:	8b a9       	ldd	r24, Y+51	; 0x33
    215c:	9c a9       	ldd	r25, Y+52	; 0x34
    215e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2162:	dc 01       	movw	r26, r24
    2164:	cb 01       	movw	r24, r22
    2166:	98 ab       	std	Y+48, r25	; 0x30
    2168:	8f a7       	std	Y+47, r24	; 0x2f
    216a:	8f a5       	ldd	r24, Y+47	; 0x2f
    216c:	98 a9       	ldd	r25, Y+48	; 0x30
    216e:	9c a7       	std	Y+44, r25	; 0x2c
    2170:	8b a7       	std	Y+43, r24	; 0x2b
    2172:	8b a5       	ldd	r24, Y+43	; 0x2b
    2174:	9c a5       	ldd	r25, Y+44	; 0x2c
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	f1 f7       	brne	.-4      	; 0x2176 <LCD_displayCharacterRowColumn+0x108>
    217a:	9c a7       	std	Y+44, r25	; 0x2c
    217c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */

	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    217e:	83 e0       	ldi	r24, 0x03	; 3
    2180:	67 e0       	ldi	r22, 0x07	; 7
    2182:	41 e0       	ldi	r20, 0x01	; 1
    2184:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <GPIO_writePin>
    2188:	80 e0       	ldi	r24, 0x00	; 0
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	a0 e8       	ldi	r26, 0x80	; 128
    218e:	bf e3       	ldi	r27, 0x3F	; 63
    2190:	8f a3       	std	Y+39, r24	; 0x27
    2192:	98 a7       	std	Y+40, r25	; 0x28
    2194:	a9 a7       	std	Y+41, r26	; 0x29
    2196:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2198:	6f a1       	ldd	r22, Y+39	; 0x27
    219a:	78 a5       	ldd	r23, Y+40	; 0x28
    219c:	89 a5       	ldd	r24, Y+41	; 0x29
    219e:	9a a5       	ldd	r25, Y+42	; 0x2a
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	4a ef       	ldi	r20, 0xFA	; 250
    21a6:	54 e4       	ldi	r21, 0x44	; 68
    21a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	8b a3       	std	Y+35, r24	; 0x23
    21b2:	9c a3       	std	Y+36, r25	; 0x24
    21b4:	ad a3       	std	Y+37, r26	; 0x25
    21b6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21b8:	6b a1       	ldd	r22, Y+35	; 0x23
    21ba:	7c a1       	ldd	r23, Y+36	; 0x24
    21bc:	8d a1       	ldd	r24, Y+37	; 0x25
    21be:	9e a1       	ldd	r25, Y+38	; 0x26
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	40 e8       	ldi	r20, 0x80	; 128
    21c6:	5f e3       	ldi	r21, 0x3F	; 63
    21c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21cc:	88 23       	and	r24, r24
    21ce:	2c f4       	brge	.+10     	; 0x21da <LCD_displayCharacterRowColumn+0x16c>
		__ticks = 1;
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	9a a3       	std	Y+34, r25	; 0x22
    21d6:	89 a3       	std	Y+33, r24	; 0x21
    21d8:	3f c0       	rjmp	.+126    	; 0x2258 <LCD_displayCharacterRowColumn+0x1ea>
	else if (__tmp > 65535)
    21da:	6b a1       	ldd	r22, Y+35	; 0x23
    21dc:	7c a1       	ldd	r23, Y+36	; 0x24
    21de:	8d a1       	ldd	r24, Y+37	; 0x25
    21e0:	9e a1       	ldd	r25, Y+38	; 0x26
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	3f ef       	ldi	r19, 0xFF	; 255
    21e6:	4f e7       	ldi	r20, 0x7F	; 127
    21e8:	57 e4       	ldi	r21, 0x47	; 71
    21ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ee:	18 16       	cp	r1, r24
    21f0:	4c f5       	brge	.+82     	; 0x2244 <LCD_displayCharacterRowColumn+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f2:	6f a1       	ldd	r22, Y+39	; 0x27
    21f4:	78 a5       	ldd	r23, Y+40	; 0x28
    21f6:	89 a5       	ldd	r24, Y+41	; 0x29
    21f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	40 e2       	ldi	r20, 0x20	; 32
    2200:	51 e4       	ldi	r21, 0x41	; 65
    2202:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	bc 01       	movw	r22, r24
    220c:	cd 01       	movw	r24, r26
    220e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	9a a3       	std	Y+34, r25	; 0x22
    2218:	89 a3       	std	Y+33, r24	; 0x21
    221a:	0f c0       	rjmp	.+30     	; 0x223a <LCD_displayCharacterRowColumn+0x1cc>
    221c:	88 ec       	ldi	r24, 0xC8	; 200
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	98 a3       	std	Y+32, r25	; 0x20
    2222:	8f 8f       	std	Y+31, r24	; 0x1f
    2224:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2226:	98 a1       	ldd	r25, Y+32	; 0x20
    2228:	01 97       	sbiw	r24, 0x01	; 1
    222a:	f1 f7       	brne	.-4      	; 0x2228 <LCD_displayCharacterRowColumn+0x1ba>
    222c:	98 a3       	std	Y+32, r25	; 0x20
    222e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2230:	89 a1       	ldd	r24, Y+33	; 0x21
    2232:	9a a1       	ldd	r25, Y+34	; 0x22
    2234:	01 97       	sbiw	r24, 0x01	; 1
    2236:	9a a3       	std	Y+34, r25	; 0x22
    2238:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    223a:	89 a1       	ldd	r24, Y+33	; 0x21
    223c:	9a a1       	ldd	r25, Y+34	; 0x22
    223e:	00 97       	sbiw	r24, 0x00	; 0
    2240:	69 f7       	brne	.-38     	; 0x221c <LCD_displayCharacterRowColumn+0x1ae>
    2242:	14 c0       	rjmp	.+40     	; 0x226c <LCD_displayCharacterRowColumn+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2244:	6b a1       	ldd	r22, Y+35	; 0x23
    2246:	7c a1       	ldd	r23, Y+36	; 0x24
    2248:	8d a1       	ldd	r24, Y+37	; 0x25
    224a:	9e a1       	ldd	r25, Y+38	; 0x26
    224c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	9a a3       	std	Y+34, r25	; 0x22
    2256:	89 a3       	std	Y+33, r24	; 0x21
    2258:	89 a1       	ldd	r24, Y+33	; 0x21
    225a:	9a a1       	ldd	r25, Y+34	; 0x22
    225c:	9e 8f       	std	Y+30, r25	; 0x1e
    225e:	8d 8f       	std	Y+29, r24	; 0x1d
    2260:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2262:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2264:	01 97       	sbiw	r24, 0x01	; 1
    2266:	f1 f7       	brne	.-4      	; 0x2264 <LCD_displayCharacterRowColumn+0x1f6>
    2268:	9e 8f       	std	Y+30, r25	; 0x1e
    226a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    226c:	82 e0       	ldi	r24, 0x02	; 2
    226e:	6b ad       	ldd	r22, Y+59	; 0x3b
    2270:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <GPIO_writePort>
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	a0 e8       	ldi	r26, 0x80	; 128
    227a:	bf e3       	ldi	r27, 0x3F	; 63
    227c:	89 8f       	std	Y+25, r24	; 0x19
    227e:	9a 8f       	std	Y+26, r25	; 0x1a
    2280:	ab 8f       	std	Y+27, r26	; 0x1b
    2282:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2284:	69 8d       	ldd	r22, Y+25	; 0x19
    2286:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2288:	8b 8d       	ldd	r24, Y+27	; 0x1b
    228a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	4a ef       	ldi	r20, 0xFA	; 250
    2292:	54 e4       	ldi	r21, 0x44	; 68
    2294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	8d 8b       	std	Y+21, r24	; 0x15
    229e:	9e 8b       	std	Y+22, r25	; 0x16
    22a0:	af 8b       	std	Y+23, r26	; 0x17
    22a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22a4:	6d 89       	ldd	r22, Y+21	; 0x15
    22a6:	7e 89       	ldd	r23, Y+22	; 0x16
    22a8:	8f 89       	ldd	r24, Y+23	; 0x17
    22aa:	98 8d       	ldd	r25, Y+24	; 0x18
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	40 e8       	ldi	r20, 0x80	; 128
    22b2:	5f e3       	ldi	r21, 0x3F	; 63
    22b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22b8:	88 23       	and	r24, r24
    22ba:	2c f4       	brge	.+10     	; 0x22c6 <LCD_displayCharacterRowColumn+0x258>
		__ticks = 1;
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	9c 8b       	std	Y+20, r25	; 0x14
    22c2:	8b 8b       	std	Y+19, r24	; 0x13
    22c4:	3f c0       	rjmp	.+126    	; 0x2344 <LCD_displayCharacterRowColumn+0x2d6>
	else if (__tmp > 65535)
    22c6:	6d 89       	ldd	r22, Y+21	; 0x15
    22c8:	7e 89       	ldd	r23, Y+22	; 0x16
    22ca:	8f 89       	ldd	r24, Y+23	; 0x17
    22cc:	98 8d       	ldd	r25, Y+24	; 0x18
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	3f ef       	ldi	r19, 0xFF	; 255
    22d2:	4f e7       	ldi	r20, 0x7F	; 127
    22d4:	57 e4       	ldi	r21, 0x47	; 71
    22d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22da:	18 16       	cp	r1, r24
    22dc:	4c f5       	brge	.+82     	; 0x2330 <LCD_displayCharacterRowColumn+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22de:	69 8d       	ldd	r22, Y+25	; 0x19
    22e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	40 e2       	ldi	r20, 0x20	; 32
    22ec:	51 e4       	ldi	r21, 0x41	; 65
    22ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	bc 01       	movw	r22, r24
    22f8:	cd 01       	movw	r24, r26
    22fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	9c 8b       	std	Y+20, r25	; 0x14
    2304:	8b 8b       	std	Y+19, r24	; 0x13
    2306:	0f c0       	rjmp	.+30     	; 0x2326 <LCD_displayCharacterRowColumn+0x2b8>
    2308:	88 ec       	ldi	r24, 0xC8	; 200
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	9a 8b       	std	Y+18, r25	; 0x12
    230e:	89 8b       	std	Y+17, r24	; 0x11
    2310:	89 89       	ldd	r24, Y+17	; 0x11
    2312:	9a 89       	ldd	r25, Y+18	; 0x12
    2314:	01 97       	sbiw	r24, 0x01	; 1
    2316:	f1 f7       	brne	.-4      	; 0x2314 <LCD_displayCharacterRowColumn+0x2a6>
    2318:	9a 8b       	std	Y+18, r25	; 0x12
    231a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    231c:	8b 89       	ldd	r24, Y+19	; 0x13
    231e:	9c 89       	ldd	r25, Y+20	; 0x14
    2320:	01 97       	sbiw	r24, 0x01	; 1
    2322:	9c 8b       	std	Y+20, r25	; 0x14
    2324:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2326:	8b 89       	ldd	r24, Y+19	; 0x13
    2328:	9c 89       	ldd	r25, Y+20	; 0x14
    232a:	00 97       	sbiw	r24, 0x00	; 0
    232c:	69 f7       	brne	.-38     	; 0x2308 <LCD_displayCharacterRowColumn+0x29a>
    232e:	14 c0       	rjmp	.+40     	; 0x2358 <LCD_displayCharacterRowColumn+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2330:	6d 89       	ldd	r22, Y+21	; 0x15
    2332:	7e 89       	ldd	r23, Y+22	; 0x16
    2334:	8f 89       	ldd	r24, Y+23	; 0x17
    2336:	98 8d       	ldd	r25, Y+24	; 0x18
    2338:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	9c 8b       	std	Y+20, r25	; 0x14
    2342:	8b 8b       	std	Y+19, r24	; 0x13
    2344:	8b 89       	ldd	r24, Y+19	; 0x13
    2346:	9c 89       	ldd	r25, Y+20	; 0x14
    2348:	98 8b       	std	Y+16, r25	; 0x10
    234a:	8f 87       	std	Y+15, r24	; 0x0f
    234c:	8f 85       	ldd	r24, Y+15	; 0x0f
    234e:	98 89       	ldd	r25, Y+16	; 0x10
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	f1 f7       	brne	.-4      	; 0x2350 <LCD_displayCharacterRowColumn+0x2e2>
    2354:	98 8b       	std	Y+16, r25	; 0x10
    2356:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */

	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2358:	83 e0       	ldi	r24, 0x03	; 3
    235a:	67 e0       	ldi	r22, 0x07	; 7
    235c:	40 e0       	ldi	r20, 0x00	; 0
    235e:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <GPIO_writePin>
    2362:	80 e0       	ldi	r24, 0x00	; 0
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	a0 e8       	ldi	r26, 0x80	; 128
    2368:	bf e3       	ldi	r27, 0x3F	; 63
    236a:	8b 87       	std	Y+11, r24	; 0x0b
    236c:	9c 87       	std	Y+12, r25	; 0x0c
    236e:	ad 87       	std	Y+13, r26	; 0x0d
    2370:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2372:	6b 85       	ldd	r22, Y+11	; 0x0b
    2374:	7c 85       	ldd	r23, Y+12	; 0x0c
    2376:	8d 85       	ldd	r24, Y+13	; 0x0d
    2378:	9e 85       	ldd	r25, Y+14	; 0x0e
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	4a ef       	ldi	r20, 0xFA	; 250
    2380:	54 e4       	ldi	r21, 0x44	; 68
    2382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2386:	dc 01       	movw	r26, r24
    2388:	cb 01       	movw	r24, r22
    238a:	8f 83       	std	Y+7, r24	; 0x07
    238c:	98 87       	std	Y+8, r25	; 0x08
    238e:	a9 87       	std	Y+9, r26	; 0x09
    2390:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2392:	6f 81       	ldd	r22, Y+7	; 0x07
    2394:	78 85       	ldd	r23, Y+8	; 0x08
    2396:	89 85       	ldd	r24, Y+9	; 0x09
    2398:	9a 85       	ldd	r25, Y+10	; 0x0a
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	40 e8       	ldi	r20, 0x80	; 128
    23a0:	5f e3       	ldi	r21, 0x3F	; 63
    23a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23a6:	88 23       	and	r24, r24
    23a8:	2c f4       	brge	.+10     	; 0x23b4 <LCD_displayCharacterRowColumn+0x346>
		__ticks = 1;
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	9e 83       	std	Y+6, r25	; 0x06
    23b0:	8d 83       	std	Y+5, r24	; 0x05
    23b2:	3f c0       	rjmp	.+126    	; 0x2432 <LCD_displayCharacterRowColumn+0x3c4>
	else if (__tmp > 65535)
    23b4:	6f 81       	ldd	r22, Y+7	; 0x07
    23b6:	78 85       	ldd	r23, Y+8	; 0x08
    23b8:	89 85       	ldd	r24, Y+9	; 0x09
    23ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	3f ef       	ldi	r19, 0xFF	; 255
    23c0:	4f e7       	ldi	r20, 0x7F	; 127
    23c2:	57 e4       	ldi	r21, 0x47	; 71
    23c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23c8:	18 16       	cp	r1, r24
    23ca:	4c f5       	brge	.+82     	; 0x241e <LCD_displayCharacterRowColumn+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    23d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	40 e2       	ldi	r20, 0x20	; 32
    23da:	51 e4       	ldi	r21, 0x41	; 65
    23dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	bc 01       	movw	r22, r24
    23e6:	cd 01       	movw	r24, r26
    23e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	9e 83       	std	Y+6, r25	; 0x06
    23f2:	8d 83       	std	Y+5, r24	; 0x05
    23f4:	0f c0       	rjmp	.+30     	; 0x2414 <LCD_displayCharacterRowColumn+0x3a6>
    23f6:	88 ec       	ldi	r24, 0xC8	; 200
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	9c 83       	std	Y+4, r25	; 0x04
    23fc:	8b 83       	std	Y+3, r24	; 0x03
    23fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2400:	9c 81       	ldd	r25, Y+4	; 0x04
    2402:	01 97       	sbiw	r24, 0x01	; 1
    2404:	f1 f7       	brne	.-4      	; 0x2402 <LCD_displayCharacterRowColumn+0x394>
    2406:	9c 83       	std	Y+4, r25	; 0x04
    2408:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    240a:	8d 81       	ldd	r24, Y+5	; 0x05
    240c:	9e 81       	ldd	r25, Y+6	; 0x06
    240e:	01 97       	sbiw	r24, 0x01	; 1
    2410:	9e 83       	std	Y+6, r25	; 0x06
    2412:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2414:	8d 81       	ldd	r24, Y+5	; 0x05
    2416:	9e 81       	ldd	r25, Y+6	; 0x06
    2418:	00 97       	sbiw	r24, 0x00	; 0
    241a:	69 f7       	brne	.-38     	; 0x23f6 <LCD_displayCharacterRowColumn+0x388>
    241c:	14 c0       	rjmp	.+40     	; 0x2446 <LCD_displayCharacterRowColumn+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    241e:	6f 81       	ldd	r22, Y+7	; 0x07
    2420:	78 85       	ldd	r23, Y+8	; 0x08
    2422:	89 85       	ldd	r24, Y+9	; 0x09
    2424:	9a 85       	ldd	r25, Y+10	; 0x0a
    2426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	9e 83       	std	Y+6, r25	; 0x06
    2430:	8d 83       	std	Y+5, r24	; 0x05
    2432:	8d 81       	ldd	r24, Y+5	; 0x05
    2434:	9e 81       	ldd	r25, Y+6	; 0x06
    2436:	9a 83       	std	Y+2, r25	; 0x02
    2438:	89 83       	std	Y+1, r24	; 0x01
    243a:	89 81       	ldd	r24, Y+1	; 0x01
    243c:	9a 81       	ldd	r25, Y+2	; 0x02
    243e:	01 97       	sbiw	r24, 0x01	; 1
    2440:	f1 f7       	brne	.-4      	; 0x243e <LCD_displayCharacterRowColumn+0x3d0>
    2442:	9a 83       	std	Y+2, r25	; 0x02
    2444:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2446:	eb 96       	adiw	r28, 0x3b	; 59
    2448:	0f b6       	in	r0, 0x3f	; 63
    244a:	f8 94       	cli
    244c:	de bf       	out	0x3e, r29	; 62
    244e:	0f be       	out	0x3f, r0	; 63
    2450:	cd bf       	out	0x3d, r28	; 61
    2452:	cf 91       	pop	r28
    2454:	df 91       	pop	r29
    2456:	08 95       	ret

00002458 <__vector_7>:
static volatile void (*g_callBackPtr)(void) = NULL_PTR;

/************************Interrupt Service Routines*****************/

ISR(TIMER1_COMPA_vect)
{
    2458:	1f 92       	push	r1
    245a:	0f 92       	push	r0
    245c:	0f b6       	in	r0, 0x3f	; 63
    245e:	0f 92       	push	r0
    2460:	11 24       	eor	r1, r1
    2462:	2f 93       	push	r18
    2464:	3f 93       	push	r19
    2466:	4f 93       	push	r20
    2468:	5f 93       	push	r21
    246a:	6f 93       	push	r22
    246c:	7f 93       	push	r23
    246e:	8f 93       	push	r24
    2470:	9f 93       	push	r25
    2472:	af 93       	push	r26
    2474:	bf 93       	push	r27
    2476:	ef 93       	push	r30
    2478:	ff 93       	push	r31
    247a:	df 93       	push	r29
    247c:	cf 93       	push	r28
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPtr != NULL_PTR)
    2482:	80 91 43 01 	lds	r24, 0x0143
    2486:	90 91 44 01 	lds	r25, 0x0144
    248a:	00 97       	sbiw	r24, 0x00	; 0
    248c:	29 f0       	breq	.+10     	; 0x2498 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    248e:	e0 91 43 01 	lds	r30, 0x0143
    2492:	f0 91 44 01 	lds	r31, 0x0144
    2496:	09 95       	icall
	}
}
    2498:	cf 91       	pop	r28
    249a:	df 91       	pop	r29
    249c:	ff 91       	pop	r31
    249e:	ef 91       	pop	r30
    24a0:	bf 91       	pop	r27
    24a2:	af 91       	pop	r26
    24a4:	9f 91       	pop	r25
    24a6:	8f 91       	pop	r24
    24a8:	7f 91       	pop	r23
    24aa:	6f 91       	pop	r22
    24ac:	5f 91       	pop	r21
    24ae:	4f 91       	pop	r20
    24b0:	3f 91       	pop	r19
    24b2:	2f 91       	pop	r18
    24b4:	0f 90       	pop	r0
    24b6:	0f be       	out	0x3f, r0	; 63
    24b8:	0f 90       	pop	r0
    24ba:	1f 90       	pop	r1
    24bc:	18 95       	reti

000024be <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    24be:	1f 92       	push	r1
    24c0:	0f 92       	push	r0
    24c2:	0f b6       	in	r0, 0x3f	; 63
    24c4:	0f 92       	push	r0
    24c6:	11 24       	eor	r1, r1
    24c8:	2f 93       	push	r18
    24ca:	3f 93       	push	r19
    24cc:	4f 93       	push	r20
    24ce:	5f 93       	push	r21
    24d0:	6f 93       	push	r22
    24d2:	7f 93       	push	r23
    24d4:	8f 93       	push	r24
    24d6:	9f 93       	push	r25
    24d8:	af 93       	push	r26
    24da:	bf 93       	push	r27
    24dc:	ef 93       	push	r30
    24de:	ff 93       	push	r31
    24e0:	df 93       	push	r29
    24e2:	cf 93       	push	r28
    24e4:	cd b7       	in	r28, 0x3d	; 61
    24e6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    24e8:	80 91 43 01 	lds	r24, 0x0143
    24ec:	90 91 44 01 	lds	r25, 0x0144
    24f0:	00 97       	sbiw	r24, 0x00	; 0
    24f2:	29 f0       	breq	.+10     	; 0x24fe <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    24f4:	e0 91 43 01 	lds	r30, 0x0143
    24f8:	f0 91 44 01 	lds	r31, 0x0144
    24fc:	09 95       	icall
	}
}
    24fe:	cf 91       	pop	r28
    2500:	df 91       	pop	r29
    2502:	ff 91       	pop	r31
    2504:	ef 91       	pop	r30
    2506:	bf 91       	pop	r27
    2508:	af 91       	pop	r26
    250a:	9f 91       	pop	r25
    250c:	8f 91       	pop	r24
    250e:	7f 91       	pop	r23
    2510:	6f 91       	pop	r22
    2512:	5f 91       	pop	r21
    2514:	4f 91       	pop	r20
    2516:	3f 91       	pop	r19
    2518:	2f 91       	pop	r18
    251a:	0f 90       	pop	r0
    251c:	0f be       	out	0x3f, r0	; 63
    251e:	0f 90       	pop	r0
    2520:	1f 90       	pop	r1
    2522:	18 95       	reti

00002524 <Timer1_init>:
 * 3. Setup the Timer1 initial value .
 * 4. enable the interrupt module .
 * 5. Setup the Timer1 compare value ( in compare mode only ) .
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    2524:	df 93       	push	r29
    2526:	cf 93       	push	r28
    2528:	00 d0       	rcall	.+0      	; 0x252a <Timer1_init+0x6>
    252a:	cd b7       	in	r28, 0x3d	; 61
    252c:	de b7       	in	r29, 0x3e	; 62
    252e:	9a 83       	std	Y+2, r25	; 0x02
    2530:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A = (1<<FOC1A) | (1<<FOC1B) ;
    2532:	ef e4       	ldi	r30, 0x4F	; 79
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	8c e0       	ldi	r24, 0x0C	; 12
    2538:	80 83       	st	Z, r24
	/* for  non-PWM mode */

	TCCR1B = ( ( Config_Ptr->mode & 0x0C )<<1) | (Config_Ptr->prescaler);
    253a:	ae e4       	ldi	r26, 0x4E	; 78
    253c:	b0 e0       	ldi	r27, 0x00	; 0
    253e:	e9 81       	ldd	r30, Y+1	; 0x01
    2540:	fa 81       	ldd	r31, Y+2	; 0x02
    2542:	85 81       	ldd	r24, Z+5	; 0x05
    2544:	88 2f       	mov	r24, r24
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	8c 70       	andi	r24, 0x0C	; 12
    254a:	90 70       	andi	r25, 0x00	; 0
    254c:	88 0f       	add	r24, r24
    254e:	99 1f       	adc	r25, r25
    2550:	98 2f       	mov	r25, r24
    2552:	e9 81       	ldd	r30, Y+1	; 0x01
    2554:	fa 81       	ldd	r31, Y+2	; 0x02
    2556:	84 81       	ldd	r24, Z+4	; 0x04
    2558:	89 2b       	or	r24, r25
    255a:	8c 93       	st	X, r24
	 * shift left by 1 to put them in WGM12 & WGM13 mode bits .
	 *
	 * 2. then set the pre-scaler .
	 */

	TCNT1 = Config_Ptr->initial_value;
    255c:	ac e4       	ldi	r26, 0x4C	; 76
    255e:	b0 e0       	ldi	r27, 0x00	; 0
    2560:	e9 81       	ldd	r30, Y+1	; 0x01
    2562:	fa 81       	ldd	r31, Y+2	; 0x02
    2564:	80 81       	ld	r24, Z
    2566:	91 81       	ldd	r25, Z+1	; 0x01
    2568:	11 96       	adiw	r26, 0x01	; 1
    256a:	9c 93       	st	X, r25
    256c:	8e 93       	st	-X, r24

	if( Config_Ptr->mode == TIMER1_CTC_MODE )
    256e:	e9 81       	ldd	r30, Y+1	; 0x01
    2570:	fa 81       	ldd	r31, Y+2	; 0x02
    2572:	85 81       	ldd	r24, Z+5	; 0x05
    2574:	84 30       	cpi	r24, 0x04	; 4
    2576:	89 f4       	brne	.+34     	; 0x259a <Timer1_init+0x76>
	{
		OCR1A = Config_Ptr->compare_value;
    2578:	aa e4       	ldi	r26, 0x4A	; 74
    257a:	b0 e0       	ldi	r27, 0x00	; 0
    257c:	e9 81       	ldd	r30, Y+1	; 0x01
    257e:	fa 81       	ldd	r31, Y+2	; 0x02
    2580:	82 81       	ldd	r24, Z+2	; 0x02
    2582:	93 81       	ldd	r25, Z+3	; 0x03
    2584:	11 96       	adiw	r26, 0x01	; 1
    2586:	9c 93       	st	X, r25
    2588:	8e 93       	st	-X, r24
		TIMSK |= (1<<OCIE1A);
    258a:	a9 e5       	ldi	r26, 0x59	; 89
    258c:	b0 e0       	ldi	r27, 0x00	; 0
    258e:	e9 e5       	ldi	r30, 0x59	; 89
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	80 81       	ld	r24, Z
    2594:	80 61       	ori	r24, 0x10	; 16
    2596:	8c 93       	st	X, r24
    2598:	07 c0       	rjmp	.+14     	; 0x25a8 <Timer1_init+0x84>
	 * 2. Compare interrupt module enabled .
	 */

	else
	{
		TIMSK |= (1<<TOIE1);
    259a:	a9 e5       	ldi	r26, 0x59	; 89
    259c:	b0 e0       	ldi	r27, 0x00	; 0
    259e:	e9 e5       	ldi	r30, 0x59	; 89
    25a0:	f0 e0       	ldi	r31, 0x00	; 0
    25a2:	80 81       	ld	r24, Z
    25a4:	84 60       	ori	r24, 0x04	; 4
    25a6:	8c 93       	st	X, r24
	}
	/* ( if normal mode ON )
	 *  normal interrupt module enabled .
	 */
}
    25a8:	0f 90       	pop	r0
    25aa:	0f 90       	pop	r0
    25ac:	cf 91       	pop	r28
    25ae:	df 91       	pop	r29
    25b0:	08 95       	ret

000025b2 <Timer1_deInit>:
 * 1. Clear all Timer1 registers .
 * 2. disable the interrupt module .
 * 3. Reset the global pointer value .
 */
void Timer1_deInit(void)
{
    25b2:	df 93       	push	r29
    25b4:	cf 93       	push	r28
    25b6:	cd b7       	in	r28, 0x3d	; 61
    25b8:	de b7       	in	r29, 0x3e	; 62

	TCCR1A = 0;
    25ba:	ef e4       	ldi	r30, 0x4F	; 79
    25bc:	f0 e0       	ldi	r31, 0x00	; 0
    25be:	10 82       	st	Z, r1
	TCCR1B = 0;
    25c0:	ee e4       	ldi	r30, 0x4E	; 78
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	10 82       	st	Z, r1
	TCNT1 = 0;
    25c6:	ec e4       	ldi	r30, 0x4C	; 76
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	11 82       	std	Z+1, r1	; 0x01
    25cc:	10 82       	st	Z, r1
	/* Clear all Timer1 registers . */

	TIMSK &= ~(1<<TOIE1) & ~(1<<OCIE1A);
    25ce:	a9 e5       	ldi	r26, 0x59	; 89
    25d0:	b0 e0       	ldi	r27, 0x00	; 0
    25d2:	e9 e5       	ldi	r30, 0x59	; 89
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	80 81       	ld	r24, Z
    25d8:	8b 7e       	andi	r24, 0xEB	; 235
    25da:	8c 93       	st	X, r24
	/* Compare and normal interrupt modules disabled . */

	g_callBackPtr = NULL_PTR;
    25dc:	10 92 44 01 	sts	0x0144, r1
    25e0:	10 92 43 01 	sts	0x0143, r1
	/* Reset the global pointer value . */
}
    25e4:	cf 91       	pop	r28
    25e6:	df 91       	pop	r29
    25e8:	08 95       	ret

000025ea <Timer1_setCallBack>:


void Timer1_setCallBack( void(*a_ptr)(void) )
{
    25ea:	df 93       	push	r29
    25ec:	cf 93       	push	r28
    25ee:	00 d0       	rcall	.+0      	; 0x25f0 <Timer1_setCallBack+0x6>
    25f0:	cd b7       	in	r28, 0x3d	; 61
    25f2:	de b7       	in	r29, 0x3e	; 62
    25f4:	9a 83       	std	Y+2, r25	; 0x02
    25f6:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    25f8:	89 81       	ldd	r24, Y+1	; 0x01
    25fa:	9a 81       	ldd	r25, Y+2	; 0x02
    25fc:	90 93 44 01 	sts	0x0144, r25
    2600:	80 93 43 01 	sts	0x0143, r24
	/* Save the address of the Call back function in a global variable */
}
    2604:	0f 90       	pop	r0
    2606:	0f 90       	pop	r0
    2608:	cf 91       	pop	r28
    260a:	df 91       	pop	r29
    260c:	08 95       	ret

0000260e <UART_init>:
 * 5. Setup the UART number of stop bits .
 * 6. Setup the UART baud rate .
 * 7.Enable the UART mask flags .
 */
void UART_init( const UART_ConfigType * Ptr_Configs )
{
    260e:	df 93       	push	r29
    2610:	cf 93       	push	r28
    2612:	00 d0       	rcall	.+0      	; 0x2614 <UART_init+0x6>
    2614:	00 d0       	rcall	.+0      	; 0x2616 <UART_init+0x8>
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
    261a:	9c 83       	std	Y+4, r25	; 0x04
    261c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    261e:	1a 82       	std	Y+2, r1	; 0x02
    2620:	19 82       	std	Y+1, r1	; 0x01

	UCSRA = (1<<U2X) ;
    2622:	eb e2       	ldi	r30, 0x2B	; 43
    2624:	f0 e0       	ldi	r31, 0x00	; 0
    2626:	82 e0       	ldi	r24, 0x02	; 2
    2628:	80 83       	st	Z, r24
	/*	Configure the transmission speed which is double in Asynchronous mode only */

	UCSRB = (1<<RXEN) |(1<<TXEN) |  (Ptr_Configs->bit_data & 4) ;
    262a:	aa e2       	ldi	r26, 0x2A	; 42
    262c:	b0 e0       	ldi	r27, 0x00	; 0
    262e:	eb 81       	ldd	r30, Y+3	; 0x03
    2630:	fc 81       	ldd	r31, Y+4	; 0x04
    2632:	80 81       	ld	r24, Z
    2634:	84 70       	andi	r24, 0x04	; 4
    2636:	88 61       	ori	r24, 0x18	; 24
    2638:	8c 93       	st	X, r24
	/* Receive Complete Interrupt and Data Register Empty Interrupt enabled
	 Receiver and  Transmitter Enabled , UCSZ2 is bit number 3 in the register which is also
	 bit number 3 in the Character size ( Character Size ANDing with 0000 0100 to get the 3rd bit ) */

	UCSRC = ( Ptr_Configs->parity <<UPM0) | (Ptr_Configs->stop_bit<<USBS)
    263a:	a0 e4       	ldi	r26, 0x40	; 64
    263c:	b0 e0       	ldi	r27, 0x00	; 0
    263e:	eb 81       	ldd	r30, Y+3	; 0x03
    2640:	fc 81       	ldd	r31, Y+4	; 0x04
    2642:	81 81       	ldd	r24, Z+1	; 0x01
    2644:	88 2f       	mov	r24, r24
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	82 95       	swap	r24
    264a:	92 95       	swap	r25
    264c:	90 7f       	andi	r25, 0xF0	; 240
    264e:	98 27       	eor	r25, r24
    2650:	80 7f       	andi	r24, 0xF0	; 240
    2652:	98 27       	eor	r25, r24
    2654:	28 2f       	mov	r18, r24
    2656:	eb 81       	ldd	r30, Y+3	; 0x03
    2658:	fc 81       	ldd	r31, Y+4	; 0x04
    265a:	82 81       	ldd	r24, Z+2	; 0x02
    265c:	88 2f       	mov	r24, r24
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	88 0f       	add	r24, r24
    2662:	99 1f       	adc	r25, r25
    2664:	88 0f       	add	r24, r24
    2666:	99 1f       	adc	r25, r25
    2668:	88 0f       	add	r24, r24
    266a:	99 1f       	adc	r25, r25
    266c:	28 2b       	or	r18, r24
    266e:	eb 81       	ldd	r30, Y+3	; 0x03
    2670:	fc 81       	ldd	r31, Y+4	; 0x04
    2672:	80 81       	ld	r24, Z
    2674:	88 2f       	mov	r24, r24
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	83 70       	andi	r24, 0x03	; 3
    267a:	90 70       	andi	r25, 0x00	; 0
    267c:	88 0f       	add	r24, r24
    267e:	99 1f       	adc	r25, r25
    2680:	82 2b       	or	r24, r18
    2682:	8c 93       	st	X, r24
	/*	Mode selection ( synchronous or asynchronous )and partiy (disabled , even or odd)
	 *	And stop bit ( 1 bit or 2 bits) and the rest 2 bits of the Character size UCSZ0 and UCSZ1
	 *  ( Character Size ANDing with 0000 0011 to get the 1st 2 bits )
	 */

	ubrr_value = (uint16)(((F_CPU / (Ptr_Configs->baud_rate * 8UL))) - 1);
    2684:	eb 81       	ldd	r30, Y+3	; 0x03
    2686:	fc 81       	ldd	r31, Y+4	; 0x04
    2688:	83 81       	ldd	r24, Z+3	; 0x03
    268a:	88 2f       	mov	r24, r24
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	a0 e0       	ldi	r26, 0x00	; 0
    2690:	b0 e0       	ldi	r27, 0x00	; 0
    2692:	88 0f       	add	r24, r24
    2694:	99 1f       	adc	r25, r25
    2696:	aa 1f       	adc	r26, r26
    2698:	bb 1f       	adc	r27, r27
    269a:	88 0f       	add	r24, r24
    269c:	99 1f       	adc	r25, r25
    269e:	aa 1f       	adc	r26, r26
    26a0:	bb 1f       	adc	r27, r27
    26a2:	88 0f       	add	r24, r24
    26a4:	99 1f       	adc	r25, r25
    26a6:	aa 1f       	adc	r26, r26
    26a8:	bb 1f       	adc	r27, r27
    26aa:	9c 01       	movw	r18, r24
    26ac:	ad 01       	movw	r20, r26
    26ae:	80 e0       	ldi	r24, 0x00	; 0
    26b0:	92 e1       	ldi	r25, 0x12	; 18
    26b2:	aa e7       	ldi	r26, 0x7A	; 122
    26b4:	b0 e0       	ldi	r27, 0x00	; 0
    26b6:	bc 01       	movw	r22, r24
    26b8:	cd 01       	movw	r24, r26
    26ba:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__udivmodsi4>
    26be:	da 01       	movw	r26, r20
    26c0:	c9 01       	movw	r24, r18
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	9a 83       	std	Y+2, r25	; 0x02
    26c6:	89 83       	std	Y+1, r24	; 0x01
	/* Calculate the UBRR register value */


	UBRRH = ( ubrr_value>>8 );
    26c8:	e0 e4       	ldi	r30, 0x40	; 64
    26ca:	f0 e0       	ldi	r31, 0x00	; 0
    26cc:	89 81       	ldd	r24, Y+1	; 0x01
    26ce:	9a 81       	ldd	r25, Y+2	; 0x02
    26d0:	89 2f       	mov	r24, r25
    26d2:	99 27       	eor	r25, r25
    26d4:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    26d6:	e9 e2       	ldi	r30, 0x29	; 41
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	89 81       	ldd	r24, Y+1	; 0x01
    26dc:	80 83       	st	Z, r24
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH
	 * Because they are not consecutive */
}
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	0f 90       	pop	r0
    26e4:	0f 90       	pop	r0
    26e6:	cf 91       	pop	r28
    26e8:	df 91       	pop	r29
    26ea:	08 95       	ret

000026ec <UART_sendByte>:
/*
 * Description :
 * Function for sending byte to another device by using UART .
 */
void UART_sendByte( const uint8 data)
{
    26ec:	df 93       	push	r29
    26ee:	cf 93       	push	r28
    26f0:	0f 92       	push	r0
    26f2:	cd b7       	in	r28, 0x3d	; 61
    26f4:	de b7       	in	r29, 0x3e	; 62
    26f6:	89 83       	std	Y+1, r24	; 0x01
	while( BIT_IS_CLEAR(UCSRA,UDRE) ){}
    26f8:	eb e2       	ldi	r30, 0x2B	; 43
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	80 81       	ld	r24, Z
    26fe:	88 2f       	mov	r24, r24
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	80 72       	andi	r24, 0x20	; 32
    2704:	90 70       	andi	r25, 0x00	; 0
    2706:	00 97       	sbiw	r24, 0x00	; 0
    2708:	b9 f3       	breq	.-18     	; 0x26f8 <UART_sendByte+0xc>
	/*	Polling to check that data register is clear ( no operation is going on )
	 * 	UDRE flag is set when the Tx buffer (UDR) is empty
	 */

	UDR=data;
    270a:	ec e2       	ldi	r30, 0x2C	; 44
    270c:	f0 e0       	ldi	r31, 0x00	; 0
    270e:	89 81       	ldd	r24, Y+1	; 0x01
    2710:	80 83       	st	Z, r24
	/*	Transfer the data from the memory to the data register */

}
    2712:	0f 90       	pop	r0
    2714:	cf 91       	pop	r28
    2716:	df 91       	pop	r29
    2718:	08 95       	ret

0000271a <UART_receiveByte>:
/*
 * Description :
 * Function for receive byte from another device by using UART .
 */
uint8 UART_receiveByte(void)
{
    271a:	df 93       	push	r29
    271c:	cf 93       	push	r28
    271e:	cd b7       	in	r28, 0x3d	; 61
    2720:	de b7       	in	r29, 0x3e	; 62
	while( BIT_IS_CLEAR(UCSRA,RXC) ){}
    2722:	eb e2       	ldi	r30, 0x2B	; 43
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	80 81       	ld	r24, Z
    2728:	88 23       	and	r24, r24
    272a:	dc f7       	brge	.-10     	; 0x2722 <UART_receiveByte+0x8>
	/*	Polling to check that receive register is full and unread
	 *  RXC flag is set when the UART receiving data is done
	 */

	return UDR;
    272c:	ec e2       	ldi	r30, 0x2C	; 44
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	80 81       	ld	r24, Z
	/*	Transfer the data from the data register to the memory */

}
    2732:	cf 91       	pop	r28
    2734:	df 91       	pop	r29
    2736:	08 95       	ret

00002738 <UART_sendString>:
/*
 * Description :
 * Function for sending string to another device by using UART .
 */
void UART_sendString( const uint8 * a_Str)
{
    2738:	df 93       	push	r29
    273a:	cf 93       	push	r28
    273c:	00 d0       	rcall	.+0      	; 0x273e <UART_sendString+0x6>
    273e:	cd b7       	in	r28, 0x3d	; 61
    2740:	de b7       	in	r29, 0x3e	; 62
    2742:	9a 83       	std	Y+2, r25	; 0x02
    2744:	89 83       	std	Y+1, r24	; 0x01
    2746:	0a c0       	rjmp	.+20     	; 0x275c <UART_sendString+0x24>
	while( *a_Str != '\0' )
	{
		UART_sendByte( *a_Str );
    2748:	e9 81       	ldd	r30, Y+1	; 0x01
    274a:	fa 81       	ldd	r31, Y+2	; 0x02
    274c:	80 81       	ld	r24, Z
    274e:	0e 94 76 13 	call	0x26ec	; 0x26ec <UART_sendByte>
		a_Str++;
    2752:	89 81       	ldd	r24, Y+1	; 0x01
    2754:	9a 81       	ldd	r25, Y+2	; 0x02
    2756:	01 96       	adiw	r24, 0x01	; 1
    2758:	9a 83       	std	Y+2, r25	; 0x02
    275a:	89 83       	std	Y+1, r24	; 0x01
 * Description :
 * Function for sending string to another device by using UART .
 */
void UART_sendString( const uint8 * a_Str)
{
	while( *a_Str != '\0' )
    275c:	e9 81       	ldd	r30, Y+1	; 0x01
    275e:	fa 81       	ldd	r31, Y+2	; 0x02
    2760:	80 81       	ld	r24, Z
    2762:	88 23       	and	r24, r24
    2764:	89 f7       	brne	.-30     	; 0x2748 <UART_sendString+0x10>
		a_Str++;
	}
	/*	Looping on the string with sending it byte by byte
	 *  By calling UART_sendByte function every iteration
	 */
}
    2766:	0f 90       	pop	r0
    2768:	0f 90       	pop	r0
    276a:	cf 91       	pop	r28
    276c:	df 91       	pop	r29
    276e:	08 95       	ret

00002770 <UART_receiveString>:
/*
 * Description :
 * Function for receive string from another device by using UART .
 */
void UART_receiveString( uint8 * a_Str )
{
    2770:	df 93       	push	r29
    2772:	cf 93       	push	r28
    2774:	00 d0       	rcall	.+0      	; 0x2776 <UART_receiveString+0x6>
    2776:	cd b7       	in	r28, 0x3d	; 61
    2778:	de b7       	in	r29, 0x3e	; 62
    277a:	9a 83       	std	Y+2, r25	; 0x02
    277c:	89 83       	std	Y+1, r24	; 0x01

	*a_Str=UART_receiveByte();
    277e:	0e 94 8d 13 	call	0x271a	; 0x271a <UART_receiveByte>
    2782:	e9 81       	ldd	r30, Y+1	; 0x01
    2784:	fa 81       	ldd	r31, Y+2	; 0x02
    2786:	80 83       	st	Z, r24
    2788:	0a c0       	rjmp	.+20     	; 0x279e <UART_receiveString+0x2e>

	while( *a_Str != '#' )
	{
		a_Str++;
    278a:	89 81       	ldd	r24, Y+1	; 0x01
    278c:	9a 81       	ldd	r25, Y+2	; 0x02
    278e:	01 96       	adiw	r24, 0x01	; 1
    2790:	9a 83       	std	Y+2, r25	; 0x02
    2792:	89 83       	std	Y+1, r24	; 0x01

		*a_Str=UART_receiveByte();
    2794:	0e 94 8d 13 	call	0x271a	; 0x271a <UART_receiveByte>
    2798:	e9 81       	ldd	r30, Y+1	; 0x01
    279a:	fa 81       	ldd	r31, Y+2	; 0x02
    279c:	80 83       	st	Z, r24
void UART_receiveString( uint8 * a_Str )
{

	*a_Str=UART_receiveByte();

	while( *a_Str != '#' )
    279e:	e9 81       	ldd	r30, Y+1	; 0x01
    27a0:	fa 81       	ldd	r31, Y+2	; 0x02
    27a2:	80 81       	ld	r24, Z
    27a4:	83 32       	cpi	r24, 0x23	; 35
    27a6:	89 f7       	brne	.-30     	; 0x278a <UART_receiveString+0x1a>
	/*	Looping on the string until '#' with receiving
	 *  It byte by byte by calling UART_receiveByte function
	 *  Every iteration and save it in the array
	 */

	*a_Str = '\0';
    27a8:	e9 81       	ldd	r30, Y+1	; 0x01
    27aa:	fa 81       	ldd	r31, Y+2	; 0x02
    27ac:	10 82       	st	Z, r1
	/* After receive the array we replace the '#' with '\0' because its string */
}
    27ae:	0f 90       	pop	r0
    27b0:	0f 90       	pop	r0
    27b2:	cf 91       	pop	r28
    27b4:	df 91       	pop	r29
    27b6:	08 95       	ret

000027b8 <UART_receiveStringBacktoBack>:
 * Description :
 * Function for receive string from another device by using UART
 * That string will be sending again to another device by using UART
 */
void UART_receiveStringBacktoBack( uint8 * a_Str )
{
    27b8:	df 93       	push	r29
    27ba:	cf 93       	push	r28
    27bc:	00 d0       	rcall	.+0      	; 0x27be <UART_receiveStringBacktoBack+0x6>
    27be:	cd b7       	in	r28, 0x3d	; 61
    27c0:	de b7       	in	r29, 0x3e	; 62
    27c2:	9a 83       	std	Y+2, r25	; 0x02
    27c4:	89 83       	std	Y+1, r24	; 0x01
	*a_Str=UART_receiveByte();
    27c6:	0e 94 8d 13 	call	0x271a	; 0x271a <UART_receiveByte>
    27ca:	e9 81       	ldd	r30, Y+1	; 0x01
    27cc:	fa 81       	ldd	r31, Y+2	; 0x02
    27ce:	80 83       	st	Z, r24
    27d0:	0a c0       	rjmp	.+20     	; 0x27e6 <UART_receiveStringBacktoBack+0x2e>

	while( *a_Str != '#' )
	{
		a_Str++;
    27d2:	89 81       	ldd	r24, Y+1	; 0x01
    27d4:	9a 81       	ldd	r25, Y+2	; 0x02
    27d6:	01 96       	adiw	r24, 0x01	; 1
    27d8:	9a 83       	std	Y+2, r25	; 0x02
    27da:	89 83       	std	Y+1, r24	; 0x01

		*a_Str=UART_receiveByte();
    27dc:	0e 94 8d 13 	call	0x271a	; 0x271a <UART_receiveByte>
    27e0:	e9 81       	ldd	r30, Y+1	; 0x01
    27e2:	fa 81       	ldd	r31, Y+2	; 0x02
    27e4:	80 83       	st	Z, r24
 */
void UART_receiveStringBacktoBack( uint8 * a_Str )
{
	*a_Str=UART_receiveByte();

	while( *a_Str != '#' )
    27e6:	e9 81       	ldd	r30, Y+1	; 0x01
    27e8:	fa 81       	ldd	r31, Y+2	; 0x02
    27ea:	80 81       	ld	r24, Z
    27ec:	83 32       	cpi	r24, 0x23	; 35
    27ee:	89 f7       	brne	.-30     	; 0x27d2 <UART_receiveStringBacktoBack+0x1a>
		a_Str++;

		*a_Str=UART_receiveByte();
	}

	a_Str++;
    27f0:	89 81       	ldd	r24, Y+1	; 0x01
    27f2:	9a 81       	ldd	r25, Y+2	; 0x02
    27f4:	01 96       	adiw	r24, 0x01	; 1
    27f6:	9a 83       	std	Y+2, r25	; 0x02
    27f8:	89 83       	std	Y+1, r24	; 0x01

	*a_Str = '\0';
    27fa:	e9 81       	ldd	r30, Y+1	; 0x01
    27fc:	fa 81       	ldd	r31, Y+2	; 0x02
    27fe:	10 82       	st	Z, r1
}
    2800:	0f 90       	pop	r0
    2802:	0f 90       	pop	r0
    2804:	cf 91       	pop	r28
    2806:	df 91       	pop	r29
    2808:	08 95       	ret

0000280a <UART_sendArray>:
/*
 * Description :
 * Function for sending array to another device by using UART .
 */
void UART_sendArray( const uint8 * a_array ,uint8 a_size )
{
    280a:	df 93       	push	r29
    280c:	cf 93       	push	r28
    280e:	00 d0       	rcall	.+0      	; 0x2810 <UART_sendArray+0x6>
    2810:	00 d0       	rcall	.+0      	; 0x2812 <UART_sendArray+0x8>
    2812:	cd b7       	in	r28, 0x3d	; 61
    2814:	de b7       	in	r29, 0x3e	; 62
    2816:	9b 83       	std	Y+3, r25	; 0x03
    2818:	8a 83       	std	Y+2, r24	; 0x02
    281a:	6c 83       	std	Y+4, r22	; 0x04
	uint8 counter = 0 ;
    281c:	19 82       	std	Y+1, r1	; 0x01
    281e:	0e c0       	rjmp	.+28     	; 0x283c <UART_sendArray+0x32>

	/* Looping to send the array */
	while( counter < a_size )
	{
		UART_sendByte(a_array[counter]) ;
    2820:	89 81       	ldd	r24, Y+1	; 0x01
    2822:	28 2f       	mov	r18, r24
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	8a 81       	ldd	r24, Y+2	; 0x02
    2828:	9b 81       	ldd	r25, Y+3	; 0x03
    282a:	fc 01       	movw	r30, r24
    282c:	e2 0f       	add	r30, r18
    282e:	f3 1f       	adc	r31, r19
    2830:	80 81       	ld	r24, Z
    2832:	0e 94 76 13 	call	0x26ec	; 0x26ec <UART_sendByte>

		counter++;
    2836:	89 81       	ldd	r24, Y+1	; 0x01
    2838:	8f 5f       	subi	r24, 0xFF	; 255
    283a:	89 83       	std	Y+1, r24	; 0x01
void UART_sendArray( const uint8 * a_array ,uint8 a_size )
{
	uint8 counter = 0 ;

	/* Looping to send the array */
	while( counter < a_size )
    283c:	99 81       	ldd	r25, Y+1	; 0x01
    283e:	8c 81       	ldd	r24, Y+4	; 0x04
    2840:	98 17       	cp	r25, r24
    2842:	70 f3       	brcs	.-36     	; 0x2820 <UART_sendArray+0x16>
	{
		UART_sendByte(a_array[counter]) ;

		counter++;
	}
}
    2844:	0f 90       	pop	r0
    2846:	0f 90       	pop	r0
    2848:	0f 90       	pop	r0
    284a:	0f 90       	pop	r0
    284c:	cf 91       	pop	r28
    284e:	df 91       	pop	r29
    2850:	08 95       	ret

00002852 <UART_receiveArray>:
/*
 * Description :
 * Function for receive array from another device by using UART .
 */
void UART_receiveArray( uint8 * a_array ,uint8 a_size )
{
    2852:	0f 93       	push	r16
    2854:	1f 93       	push	r17
    2856:	df 93       	push	r29
    2858:	cf 93       	push	r28
    285a:	00 d0       	rcall	.+0      	; 0x285c <UART_receiveArray+0xa>
    285c:	00 d0       	rcall	.+0      	; 0x285e <UART_receiveArray+0xc>
    285e:	cd b7       	in	r28, 0x3d	; 61
    2860:	de b7       	in	r29, 0x3e	; 62
    2862:	9b 83       	std	Y+3, r25	; 0x03
    2864:	8a 83       	std	Y+2, r24	; 0x02
    2866:	6c 83       	std	Y+4, r22	; 0x04
	uint8 counter = 0 ;
    2868:	19 82       	std	Y+1, r1	; 0x01
    286a:	0f c0       	rjmp	.+30     	; 0x288a <UART_receiveArray+0x38>

	/* Looping to send the array */
	while( counter < a_size )
	{
		a_array[counter] = UART_receiveByte() ;
    286c:	89 81       	ldd	r24, Y+1	; 0x01
    286e:	28 2f       	mov	r18, r24
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	8a 81       	ldd	r24, Y+2	; 0x02
    2874:	9b 81       	ldd	r25, Y+3	; 0x03
    2876:	8c 01       	movw	r16, r24
    2878:	02 0f       	add	r16, r18
    287a:	13 1f       	adc	r17, r19
    287c:	0e 94 8d 13 	call	0x271a	; 0x271a <UART_receiveByte>
    2880:	f8 01       	movw	r30, r16
    2882:	80 83       	st	Z, r24

		counter++;
    2884:	89 81       	ldd	r24, Y+1	; 0x01
    2886:	8f 5f       	subi	r24, 0xFF	; 255
    2888:	89 83       	std	Y+1, r24	; 0x01
void UART_receiveArray( uint8 * a_array ,uint8 a_size )
{
	uint8 counter = 0 ;

	/* Looping to send the array */
	while( counter < a_size )
    288a:	99 81       	ldd	r25, Y+1	; 0x01
    288c:	8c 81       	ldd	r24, Y+4	; 0x04
    288e:	98 17       	cp	r25, r24
    2890:	68 f3       	brcs	.-38     	; 0x286c <UART_receiveArray+0x1a>
	{
		a_array[counter] = UART_receiveByte() ;

		counter++;
	}
}
    2892:	0f 90       	pop	r0
    2894:	0f 90       	pop	r0
    2896:	0f 90       	pop	r0
    2898:	0f 90       	pop	r0
    289a:	cf 91       	pop	r28
    289c:	df 91       	pop	r29
    289e:	1f 91       	pop	r17
    28a0:	0f 91       	pop	r16
    28a2:	08 95       	ret

000028a4 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    28a4:	df 93       	push	r29
    28a6:	cf 93       	push	r28
    28a8:	00 d0       	rcall	.+0      	; 0x28aa <GPIO_setupPinDirection+0x6>
    28aa:	00 d0       	rcall	.+0      	; 0x28ac <GPIO_setupPinDirection+0x8>
    28ac:	0f 92       	push	r0
    28ae:	cd b7       	in	r28, 0x3d	; 61
    28b0:	de b7       	in	r29, 0x3e	; 62
    28b2:	89 83       	std	Y+1, r24	; 0x01
    28b4:	6a 83       	std	Y+2, r22	; 0x02
    28b6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    28b8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ba:	88 30       	cpi	r24, 0x08	; 8
    28bc:	08 f0       	brcs	.+2      	; 0x28c0 <GPIO_setupPinDirection+0x1c>
    28be:	d5 c0       	rjmp	.+426    	; 0x2a6a <GPIO_setupPinDirection+0x1c6>
    28c0:	89 81       	ldd	r24, Y+1	; 0x01
    28c2:	84 30       	cpi	r24, 0x04	; 4
    28c4:	08 f0       	brcs	.+2      	; 0x28c8 <GPIO_setupPinDirection+0x24>
    28c6:	d1 c0       	rjmp	.+418    	; 0x2a6a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    28c8:	89 81       	ldd	r24, Y+1	; 0x01
    28ca:	28 2f       	mov	r18, r24
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	3d 83       	std	Y+5, r19	; 0x05
    28d0:	2c 83       	std	Y+4, r18	; 0x04
    28d2:	8c 81       	ldd	r24, Y+4	; 0x04
    28d4:	9d 81       	ldd	r25, Y+5	; 0x05
    28d6:	81 30       	cpi	r24, 0x01	; 1
    28d8:	91 05       	cpc	r25, r1
    28da:	09 f4       	brne	.+2      	; 0x28de <GPIO_setupPinDirection+0x3a>
    28dc:	43 c0       	rjmp	.+134    	; 0x2964 <GPIO_setupPinDirection+0xc0>
    28de:	2c 81       	ldd	r18, Y+4	; 0x04
    28e0:	3d 81       	ldd	r19, Y+5	; 0x05
    28e2:	22 30       	cpi	r18, 0x02	; 2
    28e4:	31 05       	cpc	r19, r1
    28e6:	2c f4       	brge	.+10     	; 0x28f2 <GPIO_setupPinDirection+0x4e>
    28e8:	8c 81       	ldd	r24, Y+4	; 0x04
    28ea:	9d 81       	ldd	r25, Y+5	; 0x05
    28ec:	00 97       	sbiw	r24, 0x00	; 0
    28ee:	71 f0       	breq	.+28     	; 0x290c <GPIO_setupPinDirection+0x68>
    28f0:	bc c0       	rjmp	.+376    	; 0x2a6a <GPIO_setupPinDirection+0x1c6>
    28f2:	2c 81       	ldd	r18, Y+4	; 0x04
    28f4:	3d 81       	ldd	r19, Y+5	; 0x05
    28f6:	22 30       	cpi	r18, 0x02	; 2
    28f8:	31 05       	cpc	r19, r1
    28fa:	09 f4       	brne	.+2      	; 0x28fe <GPIO_setupPinDirection+0x5a>
    28fc:	5f c0       	rjmp	.+190    	; 0x29bc <GPIO_setupPinDirection+0x118>
    28fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2900:	9d 81       	ldd	r25, Y+5	; 0x05
    2902:	83 30       	cpi	r24, 0x03	; 3
    2904:	91 05       	cpc	r25, r1
    2906:	09 f4       	brne	.+2      	; 0x290a <GPIO_setupPinDirection+0x66>
    2908:	85 c0       	rjmp	.+266    	; 0x2a14 <GPIO_setupPinDirection+0x170>
    290a:	af c0       	rjmp	.+350    	; 0x2a6a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    290c:	8b 81       	ldd	r24, Y+3	; 0x03
    290e:	81 30       	cpi	r24, 0x01	; 1
    2910:	a1 f4       	brne	.+40     	; 0x293a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    2912:	aa e3       	ldi	r26, 0x3A	; 58
    2914:	b0 e0       	ldi	r27, 0x00	; 0
    2916:	ea e3       	ldi	r30, 0x3A	; 58
    2918:	f0 e0       	ldi	r31, 0x00	; 0
    291a:	80 81       	ld	r24, Z
    291c:	48 2f       	mov	r20, r24
    291e:	8a 81       	ldd	r24, Y+2	; 0x02
    2920:	28 2f       	mov	r18, r24
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	02 2e       	mov	r0, r18
    292a:	02 c0       	rjmp	.+4      	; 0x2930 <GPIO_setupPinDirection+0x8c>
    292c:	88 0f       	add	r24, r24
    292e:	99 1f       	adc	r25, r25
    2930:	0a 94       	dec	r0
    2932:	e2 f7       	brpl	.-8      	; 0x292c <GPIO_setupPinDirection+0x88>
    2934:	84 2b       	or	r24, r20
    2936:	8c 93       	st	X, r24
    2938:	98 c0       	rjmp	.+304    	; 0x2a6a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    293a:	aa e3       	ldi	r26, 0x3A	; 58
    293c:	b0 e0       	ldi	r27, 0x00	; 0
    293e:	ea e3       	ldi	r30, 0x3A	; 58
    2940:	f0 e0       	ldi	r31, 0x00	; 0
    2942:	80 81       	ld	r24, Z
    2944:	48 2f       	mov	r20, r24
    2946:	8a 81       	ldd	r24, Y+2	; 0x02
    2948:	28 2f       	mov	r18, r24
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	81 e0       	ldi	r24, 0x01	; 1
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	02 2e       	mov	r0, r18
    2952:	02 c0       	rjmp	.+4      	; 0x2958 <GPIO_setupPinDirection+0xb4>
    2954:	88 0f       	add	r24, r24
    2956:	99 1f       	adc	r25, r25
    2958:	0a 94       	dec	r0
    295a:	e2 f7       	brpl	.-8      	; 0x2954 <GPIO_setupPinDirection+0xb0>
    295c:	80 95       	com	r24
    295e:	84 23       	and	r24, r20
    2960:	8c 93       	st	X, r24
    2962:	83 c0       	rjmp	.+262    	; 0x2a6a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    2964:	8b 81       	ldd	r24, Y+3	; 0x03
    2966:	81 30       	cpi	r24, 0x01	; 1
    2968:	a1 f4       	brne	.+40     	; 0x2992 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    296a:	a7 e3       	ldi	r26, 0x37	; 55
    296c:	b0 e0       	ldi	r27, 0x00	; 0
    296e:	e7 e3       	ldi	r30, 0x37	; 55
    2970:	f0 e0       	ldi	r31, 0x00	; 0
    2972:	80 81       	ld	r24, Z
    2974:	48 2f       	mov	r20, r24
    2976:	8a 81       	ldd	r24, Y+2	; 0x02
    2978:	28 2f       	mov	r18, r24
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	81 e0       	ldi	r24, 0x01	; 1
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	02 2e       	mov	r0, r18
    2982:	02 c0       	rjmp	.+4      	; 0x2988 <GPIO_setupPinDirection+0xe4>
    2984:	88 0f       	add	r24, r24
    2986:	99 1f       	adc	r25, r25
    2988:	0a 94       	dec	r0
    298a:	e2 f7       	brpl	.-8      	; 0x2984 <GPIO_setupPinDirection+0xe0>
    298c:	84 2b       	or	r24, r20
    298e:	8c 93       	st	X, r24
    2990:	6c c0       	rjmp	.+216    	; 0x2a6a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    2992:	a7 e3       	ldi	r26, 0x37	; 55
    2994:	b0 e0       	ldi	r27, 0x00	; 0
    2996:	e7 e3       	ldi	r30, 0x37	; 55
    2998:	f0 e0       	ldi	r31, 0x00	; 0
    299a:	80 81       	ld	r24, Z
    299c:	48 2f       	mov	r20, r24
    299e:	8a 81       	ldd	r24, Y+2	; 0x02
    29a0:	28 2f       	mov	r18, r24
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	81 e0       	ldi	r24, 0x01	; 1
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	02 2e       	mov	r0, r18
    29aa:	02 c0       	rjmp	.+4      	; 0x29b0 <GPIO_setupPinDirection+0x10c>
    29ac:	88 0f       	add	r24, r24
    29ae:	99 1f       	adc	r25, r25
    29b0:	0a 94       	dec	r0
    29b2:	e2 f7       	brpl	.-8      	; 0x29ac <GPIO_setupPinDirection+0x108>
    29b4:	80 95       	com	r24
    29b6:	84 23       	and	r24, r20
    29b8:	8c 93       	st	X, r24
    29ba:	57 c0       	rjmp	.+174    	; 0x2a6a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    29bc:	8b 81       	ldd	r24, Y+3	; 0x03
    29be:	81 30       	cpi	r24, 0x01	; 1
    29c0:	a1 f4       	brne	.+40     	; 0x29ea <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    29c2:	a4 e3       	ldi	r26, 0x34	; 52
    29c4:	b0 e0       	ldi	r27, 0x00	; 0
    29c6:	e4 e3       	ldi	r30, 0x34	; 52
    29c8:	f0 e0       	ldi	r31, 0x00	; 0
    29ca:	80 81       	ld	r24, Z
    29cc:	48 2f       	mov	r20, r24
    29ce:	8a 81       	ldd	r24, Y+2	; 0x02
    29d0:	28 2f       	mov	r18, r24
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	81 e0       	ldi	r24, 0x01	; 1
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	02 2e       	mov	r0, r18
    29da:	02 c0       	rjmp	.+4      	; 0x29e0 <GPIO_setupPinDirection+0x13c>
    29dc:	88 0f       	add	r24, r24
    29de:	99 1f       	adc	r25, r25
    29e0:	0a 94       	dec	r0
    29e2:	e2 f7       	brpl	.-8      	; 0x29dc <GPIO_setupPinDirection+0x138>
    29e4:	84 2b       	or	r24, r20
    29e6:	8c 93       	st	X, r24
    29e8:	40 c0       	rjmp	.+128    	; 0x2a6a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    29ea:	a4 e3       	ldi	r26, 0x34	; 52
    29ec:	b0 e0       	ldi	r27, 0x00	; 0
    29ee:	e4 e3       	ldi	r30, 0x34	; 52
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	80 81       	ld	r24, Z
    29f4:	48 2f       	mov	r20, r24
    29f6:	8a 81       	ldd	r24, Y+2	; 0x02
    29f8:	28 2f       	mov	r18, r24
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	81 e0       	ldi	r24, 0x01	; 1
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	02 2e       	mov	r0, r18
    2a02:	02 c0       	rjmp	.+4      	; 0x2a08 <GPIO_setupPinDirection+0x164>
    2a04:	88 0f       	add	r24, r24
    2a06:	99 1f       	adc	r25, r25
    2a08:	0a 94       	dec	r0
    2a0a:	e2 f7       	brpl	.-8      	; 0x2a04 <GPIO_setupPinDirection+0x160>
    2a0c:	80 95       	com	r24
    2a0e:	84 23       	and	r24, r20
    2a10:	8c 93       	st	X, r24
    2a12:	2b c0       	rjmp	.+86     	; 0x2a6a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    2a14:	8b 81       	ldd	r24, Y+3	; 0x03
    2a16:	81 30       	cpi	r24, 0x01	; 1
    2a18:	a1 f4       	brne	.+40     	; 0x2a42 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2a1a:	a1 e3       	ldi	r26, 0x31	; 49
    2a1c:	b0 e0       	ldi	r27, 0x00	; 0
    2a1e:	e1 e3       	ldi	r30, 0x31	; 49
    2a20:	f0 e0       	ldi	r31, 0x00	; 0
    2a22:	80 81       	ld	r24, Z
    2a24:	48 2f       	mov	r20, r24
    2a26:	8a 81       	ldd	r24, Y+2	; 0x02
    2a28:	28 2f       	mov	r18, r24
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	81 e0       	ldi	r24, 0x01	; 1
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	02 2e       	mov	r0, r18
    2a32:	02 c0       	rjmp	.+4      	; 0x2a38 <GPIO_setupPinDirection+0x194>
    2a34:	88 0f       	add	r24, r24
    2a36:	99 1f       	adc	r25, r25
    2a38:	0a 94       	dec	r0
    2a3a:	e2 f7       	brpl	.-8      	; 0x2a34 <GPIO_setupPinDirection+0x190>
    2a3c:	84 2b       	or	r24, r20
    2a3e:	8c 93       	st	X, r24
    2a40:	14 c0       	rjmp	.+40     	; 0x2a6a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    2a42:	a1 e3       	ldi	r26, 0x31	; 49
    2a44:	b0 e0       	ldi	r27, 0x00	; 0
    2a46:	e1 e3       	ldi	r30, 0x31	; 49
    2a48:	f0 e0       	ldi	r31, 0x00	; 0
    2a4a:	80 81       	ld	r24, Z
    2a4c:	48 2f       	mov	r20, r24
    2a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a50:	28 2f       	mov	r18, r24
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	02 2e       	mov	r0, r18
    2a5a:	02 c0       	rjmp	.+4      	; 0x2a60 <GPIO_setupPinDirection+0x1bc>
    2a5c:	88 0f       	add	r24, r24
    2a5e:	99 1f       	adc	r25, r25
    2a60:	0a 94       	dec	r0
    2a62:	e2 f7       	brpl	.-8      	; 0x2a5c <GPIO_setupPinDirection+0x1b8>
    2a64:	80 95       	com	r24
    2a66:	84 23       	and	r24, r20
    2a68:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2a6a:	0f 90       	pop	r0
    2a6c:	0f 90       	pop	r0
    2a6e:	0f 90       	pop	r0
    2a70:	0f 90       	pop	r0
    2a72:	0f 90       	pop	r0
    2a74:	cf 91       	pop	r28
    2a76:	df 91       	pop	r29
    2a78:	08 95       	ret

00002a7a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2a7a:	df 93       	push	r29
    2a7c:	cf 93       	push	r28
    2a7e:	00 d0       	rcall	.+0      	; 0x2a80 <GPIO_writePin+0x6>
    2a80:	00 d0       	rcall	.+0      	; 0x2a82 <GPIO_writePin+0x8>
    2a82:	0f 92       	push	r0
    2a84:	cd b7       	in	r28, 0x3d	; 61
    2a86:	de b7       	in	r29, 0x3e	; 62
    2a88:	89 83       	std	Y+1, r24	; 0x01
    2a8a:	6a 83       	std	Y+2, r22	; 0x02
    2a8c:	4b 83       	std	Y+3, r20	; 0x03

	if( (pin_num >= NUM_OF_PINS_PER_PORT) || ( port_num >= NUM_OF_PORTS) )
    2a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a90:	88 30       	cpi	r24, 0x08	; 8
    2a92:	08 f0       	brcs	.+2      	; 0x2a96 <GPIO_writePin+0x1c>
    2a94:	d5 c0       	rjmp	.+426    	; 0x2c40 <GPIO_writePin+0x1c6>
    2a96:	89 81       	ldd	r24, Y+1	; 0x01
    2a98:	84 30       	cpi	r24, 0x04	; 4
    2a9a:	08 f0       	brcs	.+2      	; 0x2a9e <GPIO_writePin+0x24>
    2a9c:	d1 c0       	rjmp	.+418    	; 0x2c40 <GPIO_writePin+0x1c6>
	{
	}

	else
	{
		switch(port_num)
    2a9e:	89 81       	ldd	r24, Y+1	; 0x01
    2aa0:	28 2f       	mov	r18, r24
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	3d 83       	std	Y+5, r19	; 0x05
    2aa6:	2c 83       	std	Y+4, r18	; 0x04
    2aa8:	8c 81       	ldd	r24, Y+4	; 0x04
    2aaa:	9d 81       	ldd	r25, Y+5	; 0x05
    2aac:	81 30       	cpi	r24, 0x01	; 1
    2aae:	91 05       	cpc	r25, r1
    2ab0:	09 f4       	brne	.+2      	; 0x2ab4 <GPIO_writePin+0x3a>
    2ab2:	43 c0       	rjmp	.+134    	; 0x2b3a <GPIO_writePin+0xc0>
    2ab4:	2c 81       	ldd	r18, Y+4	; 0x04
    2ab6:	3d 81       	ldd	r19, Y+5	; 0x05
    2ab8:	22 30       	cpi	r18, 0x02	; 2
    2aba:	31 05       	cpc	r19, r1
    2abc:	2c f4       	brge	.+10     	; 0x2ac8 <GPIO_writePin+0x4e>
    2abe:	8c 81       	ldd	r24, Y+4	; 0x04
    2ac0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ac2:	00 97       	sbiw	r24, 0x00	; 0
    2ac4:	71 f0       	breq	.+28     	; 0x2ae2 <GPIO_writePin+0x68>
    2ac6:	bc c0       	rjmp	.+376    	; 0x2c40 <GPIO_writePin+0x1c6>
    2ac8:	2c 81       	ldd	r18, Y+4	; 0x04
    2aca:	3d 81       	ldd	r19, Y+5	; 0x05
    2acc:	22 30       	cpi	r18, 0x02	; 2
    2ace:	31 05       	cpc	r19, r1
    2ad0:	09 f4       	brne	.+2      	; 0x2ad4 <GPIO_writePin+0x5a>
    2ad2:	5f c0       	rjmp	.+190    	; 0x2b92 <GPIO_writePin+0x118>
    2ad4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ad6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ad8:	83 30       	cpi	r24, 0x03	; 3
    2ada:	91 05       	cpc	r25, r1
    2adc:	09 f4       	brne	.+2      	; 0x2ae0 <GPIO_writePin+0x66>
    2ade:	85 c0       	rjmp	.+266    	; 0x2bea <GPIO_writePin+0x170>
    2ae0:	af c0       	rjmp	.+350    	; 0x2c40 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
					if(value == LOGIC_HIGH)
    2ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae4:	81 30       	cpi	r24, 0x01	; 1
    2ae6:	a1 f4       	brne	.+40     	; 0x2b10 <GPIO_writePin+0x96>
					{
						SET_BIT(PORTA,pin_num);
    2ae8:	ab e3       	ldi	r26, 0x3B	; 59
    2aea:	b0 e0       	ldi	r27, 0x00	; 0
    2aec:	eb e3       	ldi	r30, 0x3B	; 59
    2aee:	f0 e0       	ldi	r31, 0x00	; 0
    2af0:	80 81       	ld	r24, Z
    2af2:	48 2f       	mov	r20, r24
    2af4:	8a 81       	ldd	r24, Y+2	; 0x02
    2af6:	28 2f       	mov	r18, r24
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	81 e0       	ldi	r24, 0x01	; 1
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	02 2e       	mov	r0, r18
    2b00:	02 c0       	rjmp	.+4      	; 0x2b06 <GPIO_writePin+0x8c>
    2b02:	88 0f       	add	r24, r24
    2b04:	99 1f       	adc	r25, r25
    2b06:	0a 94       	dec	r0
    2b08:	e2 f7       	brpl	.-8      	; 0x2b02 <GPIO_writePin+0x88>
    2b0a:	84 2b       	or	r24, r20
    2b0c:	8c 93       	st	X, r24
    2b0e:	98 c0       	rjmp	.+304    	; 0x2c40 <GPIO_writePin+0x1c6>
					}
					else
					{
						CLEAR_BIT(PORTA,pin_num);
    2b10:	ab e3       	ldi	r26, 0x3B	; 59
    2b12:	b0 e0       	ldi	r27, 0x00	; 0
    2b14:	eb e3       	ldi	r30, 0x3B	; 59
    2b16:	f0 e0       	ldi	r31, 0x00	; 0
    2b18:	80 81       	ld	r24, Z
    2b1a:	48 2f       	mov	r20, r24
    2b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1e:	28 2f       	mov	r18, r24
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	81 e0       	ldi	r24, 0x01	; 1
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	02 2e       	mov	r0, r18
    2b28:	02 c0       	rjmp	.+4      	; 0x2b2e <GPIO_writePin+0xb4>
    2b2a:	88 0f       	add	r24, r24
    2b2c:	99 1f       	adc	r25, r25
    2b2e:	0a 94       	dec	r0
    2b30:	e2 f7       	brpl	.-8      	; 0x2b2a <GPIO_writePin+0xb0>
    2b32:	80 95       	com	r24
    2b34:	84 23       	and	r24, r20
    2b36:	8c 93       	st	X, r24
    2b38:	83 c0       	rjmp	.+262    	; 0x2c40 <GPIO_writePin+0x1c6>
					}
					break;
		case PORTB_ID:
							if(value == LOGIC_HIGH)
    2b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3c:	81 30       	cpi	r24, 0x01	; 1
    2b3e:	a1 f4       	brne	.+40     	; 0x2b68 <GPIO_writePin+0xee>
							{
								SET_BIT(PORTB,pin_num);
    2b40:	a8 e3       	ldi	r26, 0x38	; 56
    2b42:	b0 e0       	ldi	r27, 0x00	; 0
    2b44:	e8 e3       	ldi	r30, 0x38	; 56
    2b46:	f0 e0       	ldi	r31, 0x00	; 0
    2b48:	80 81       	ld	r24, Z
    2b4a:	48 2f       	mov	r20, r24
    2b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4e:	28 2f       	mov	r18, r24
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	81 e0       	ldi	r24, 0x01	; 1
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	02 2e       	mov	r0, r18
    2b58:	02 c0       	rjmp	.+4      	; 0x2b5e <GPIO_writePin+0xe4>
    2b5a:	88 0f       	add	r24, r24
    2b5c:	99 1f       	adc	r25, r25
    2b5e:	0a 94       	dec	r0
    2b60:	e2 f7       	brpl	.-8      	; 0x2b5a <GPIO_writePin+0xe0>
    2b62:	84 2b       	or	r24, r20
    2b64:	8c 93       	st	X, r24
    2b66:	6c c0       	rjmp	.+216    	; 0x2c40 <GPIO_writePin+0x1c6>
							}
							else
							{
								CLEAR_BIT(PORTB,pin_num);
    2b68:	a8 e3       	ldi	r26, 0x38	; 56
    2b6a:	b0 e0       	ldi	r27, 0x00	; 0
    2b6c:	e8 e3       	ldi	r30, 0x38	; 56
    2b6e:	f0 e0       	ldi	r31, 0x00	; 0
    2b70:	80 81       	ld	r24, Z
    2b72:	48 2f       	mov	r20, r24
    2b74:	8a 81       	ldd	r24, Y+2	; 0x02
    2b76:	28 2f       	mov	r18, r24
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	02 2e       	mov	r0, r18
    2b80:	02 c0       	rjmp	.+4      	; 0x2b86 <GPIO_writePin+0x10c>
    2b82:	88 0f       	add	r24, r24
    2b84:	99 1f       	adc	r25, r25
    2b86:	0a 94       	dec	r0
    2b88:	e2 f7       	brpl	.-8      	; 0x2b82 <GPIO_writePin+0x108>
    2b8a:	80 95       	com	r24
    2b8c:	84 23       	and	r24, r20
    2b8e:	8c 93       	st	X, r24
    2b90:	57 c0       	rjmp	.+174    	; 0x2c40 <GPIO_writePin+0x1c6>
							}
							break;
		case PORTC_ID:
							if(value == LOGIC_HIGH)
    2b92:	8b 81       	ldd	r24, Y+3	; 0x03
    2b94:	81 30       	cpi	r24, 0x01	; 1
    2b96:	a1 f4       	brne	.+40     	; 0x2bc0 <GPIO_writePin+0x146>
							{
								SET_BIT(PORTC,pin_num);
    2b98:	a5 e3       	ldi	r26, 0x35	; 53
    2b9a:	b0 e0       	ldi	r27, 0x00	; 0
    2b9c:	e5 e3       	ldi	r30, 0x35	; 53
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	80 81       	ld	r24, Z
    2ba2:	48 2f       	mov	r20, r24
    2ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba6:	28 2f       	mov	r18, r24
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	81 e0       	ldi	r24, 0x01	; 1
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	02 2e       	mov	r0, r18
    2bb0:	02 c0       	rjmp	.+4      	; 0x2bb6 <GPIO_writePin+0x13c>
    2bb2:	88 0f       	add	r24, r24
    2bb4:	99 1f       	adc	r25, r25
    2bb6:	0a 94       	dec	r0
    2bb8:	e2 f7       	brpl	.-8      	; 0x2bb2 <GPIO_writePin+0x138>
    2bba:	84 2b       	or	r24, r20
    2bbc:	8c 93       	st	X, r24
    2bbe:	40 c0       	rjmp	.+128    	; 0x2c40 <GPIO_writePin+0x1c6>
							}
							else
							{
								CLEAR_BIT(PORTC,pin_num);
    2bc0:	a5 e3       	ldi	r26, 0x35	; 53
    2bc2:	b0 e0       	ldi	r27, 0x00	; 0
    2bc4:	e5 e3       	ldi	r30, 0x35	; 53
    2bc6:	f0 e0       	ldi	r31, 0x00	; 0
    2bc8:	80 81       	ld	r24, Z
    2bca:	48 2f       	mov	r20, r24
    2bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bce:	28 2f       	mov	r18, r24
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	81 e0       	ldi	r24, 0x01	; 1
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	02 2e       	mov	r0, r18
    2bd8:	02 c0       	rjmp	.+4      	; 0x2bde <GPIO_writePin+0x164>
    2bda:	88 0f       	add	r24, r24
    2bdc:	99 1f       	adc	r25, r25
    2bde:	0a 94       	dec	r0
    2be0:	e2 f7       	brpl	.-8      	; 0x2bda <GPIO_writePin+0x160>
    2be2:	80 95       	com	r24
    2be4:	84 23       	and	r24, r20
    2be6:	8c 93       	st	X, r24
    2be8:	2b c0       	rjmp	.+86     	; 0x2c40 <GPIO_writePin+0x1c6>
							}
							break;
		case PORTD_ID:
							if(value == LOGIC_HIGH)
    2bea:	8b 81       	ldd	r24, Y+3	; 0x03
    2bec:	81 30       	cpi	r24, 0x01	; 1
    2bee:	a1 f4       	brne	.+40     	; 0x2c18 <GPIO_writePin+0x19e>
							{
								SET_BIT(PORTD,pin_num);
    2bf0:	a2 e3       	ldi	r26, 0x32	; 50
    2bf2:	b0 e0       	ldi	r27, 0x00	; 0
    2bf4:	e2 e3       	ldi	r30, 0x32	; 50
    2bf6:	f0 e0       	ldi	r31, 0x00	; 0
    2bf8:	80 81       	ld	r24, Z
    2bfa:	48 2f       	mov	r20, r24
    2bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfe:	28 2f       	mov	r18, r24
    2c00:	30 e0       	ldi	r19, 0x00	; 0
    2c02:	81 e0       	ldi	r24, 0x01	; 1
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	02 2e       	mov	r0, r18
    2c08:	02 c0       	rjmp	.+4      	; 0x2c0e <GPIO_writePin+0x194>
    2c0a:	88 0f       	add	r24, r24
    2c0c:	99 1f       	adc	r25, r25
    2c0e:	0a 94       	dec	r0
    2c10:	e2 f7       	brpl	.-8      	; 0x2c0a <GPIO_writePin+0x190>
    2c12:	84 2b       	or	r24, r20
    2c14:	8c 93       	st	X, r24
    2c16:	14 c0       	rjmp	.+40     	; 0x2c40 <GPIO_writePin+0x1c6>
							}
							else
							{
								CLEAR_BIT(PORTD,pin_num);
    2c18:	a2 e3       	ldi	r26, 0x32	; 50
    2c1a:	b0 e0       	ldi	r27, 0x00	; 0
    2c1c:	e2 e3       	ldi	r30, 0x32	; 50
    2c1e:	f0 e0       	ldi	r31, 0x00	; 0
    2c20:	80 81       	ld	r24, Z
    2c22:	48 2f       	mov	r20, r24
    2c24:	8a 81       	ldd	r24, Y+2	; 0x02
    2c26:	28 2f       	mov	r18, r24
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	81 e0       	ldi	r24, 0x01	; 1
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	02 2e       	mov	r0, r18
    2c30:	02 c0       	rjmp	.+4      	; 0x2c36 <GPIO_writePin+0x1bc>
    2c32:	88 0f       	add	r24, r24
    2c34:	99 1f       	adc	r25, r25
    2c36:	0a 94       	dec	r0
    2c38:	e2 f7       	brpl	.-8      	; 0x2c32 <GPIO_writePin+0x1b8>
    2c3a:	80 95       	com	r24
    2c3c:	84 23       	and	r24, r20
    2c3e:	8c 93       	st	X, r24
							}
							break;
		}
	}

}
    2c40:	0f 90       	pop	r0
    2c42:	0f 90       	pop	r0
    2c44:	0f 90       	pop	r0
    2c46:	0f 90       	pop	r0
    2c48:	0f 90       	pop	r0
    2c4a:	cf 91       	pop	r28
    2c4c:	df 91       	pop	r29
    2c4e:	08 95       	ret

00002c50 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2c50:	df 93       	push	r29
    2c52:	cf 93       	push	r28
    2c54:	00 d0       	rcall	.+0      	; 0x2c56 <GPIO_readPin+0x6>
    2c56:	00 d0       	rcall	.+0      	; 0x2c58 <GPIO_readPin+0x8>
    2c58:	00 d0       	rcall	.+0      	; 0x2c5a <GPIO_readPin+0xa>
    2c5a:	cd b7       	in	r28, 0x3d	; 61
    2c5c:	de b7       	in	r29, 0x3e	; 62
    2c5e:	89 83       	std	Y+1, r24	; 0x01
    2c60:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2c62:	8a 81       	ldd	r24, Y+2	; 0x02
    2c64:	88 30       	cpi	r24, 0x08	; 8
    2c66:	08 f0       	brcs	.+2      	; 0x2c6a <GPIO_readPin+0x1a>
    2c68:	85 c0       	rjmp	.+266    	; 0x2d74 <GPIO_readPin+0x124>
    2c6a:	89 81       	ldd	r24, Y+1	; 0x01
    2c6c:	84 30       	cpi	r24, 0x04	; 4
    2c6e:	08 f0       	brcs	.+2      	; 0x2c72 <GPIO_readPin+0x22>
    2c70:	81 c0       	rjmp	.+258    	; 0x2d74 <GPIO_readPin+0x124>
			/* Do Nothing */
		}
		else
		{
			/* Setup the pin direction as required */
			switch(port_num)
    2c72:	89 81       	ldd	r24, Y+1	; 0x01
    2c74:	28 2f       	mov	r18, r24
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	3d 83       	std	Y+5, r19	; 0x05
    2c7a:	2c 83       	std	Y+4, r18	; 0x04
    2c7c:	4c 81       	ldd	r20, Y+4	; 0x04
    2c7e:	5d 81       	ldd	r21, Y+5	; 0x05
    2c80:	41 30       	cpi	r20, 0x01	; 1
    2c82:	51 05       	cpc	r21, r1
    2c84:	79 f1       	breq	.+94     	; 0x2ce4 <GPIO_readPin+0x94>
    2c86:	8c 81       	ldd	r24, Y+4	; 0x04
    2c88:	9d 81       	ldd	r25, Y+5	; 0x05
    2c8a:	82 30       	cpi	r24, 0x02	; 2
    2c8c:	91 05       	cpc	r25, r1
    2c8e:	34 f4       	brge	.+12     	; 0x2c9c <GPIO_readPin+0x4c>
    2c90:	2c 81       	ldd	r18, Y+4	; 0x04
    2c92:	3d 81       	ldd	r19, Y+5	; 0x05
    2c94:	21 15       	cp	r18, r1
    2c96:	31 05       	cpc	r19, r1
    2c98:	69 f0       	breq	.+26     	; 0x2cb4 <GPIO_readPin+0x64>
    2c9a:	6c c0       	rjmp	.+216    	; 0x2d74 <GPIO_readPin+0x124>
    2c9c:	4c 81       	ldd	r20, Y+4	; 0x04
    2c9e:	5d 81       	ldd	r21, Y+5	; 0x05
    2ca0:	42 30       	cpi	r20, 0x02	; 2
    2ca2:	51 05       	cpc	r21, r1
    2ca4:	b9 f1       	breq	.+110    	; 0x2d14 <GPIO_readPin+0xc4>
    2ca6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ca8:	9d 81       	ldd	r25, Y+5	; 0x05
    2caa:	83 30       	cpi	r24, 0x03	; 3
    2cac:	91 05       	cpc	r25, r1
    2cae:	09 f4       	brne	.+2      	; 0x2cb2 <GPIO_readPin+0x62>
    2cb0:	49 c0       	rjmp	.+146    	; 0x2d44 <GPIO_readPin+0xf4>
    2cb2:	60 c0       	rjmp	.+192    	; 0x2d74 <GPIO_readPin+0x124>
			{
			case PORTA_ID:
				if( BIT_IS_SET(PINA,pin_num) )
    2cb4:	e9 e3       	ldi	r30, 0x39	; 57
    2cb6:	f0 e0       	ldi	r31, 0x00	; 0
    2cb8:	80 81       	ld	r24, Z
    2cba:	28 2f       	mov	r18, r24
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc0:	88 2f       	mov	r24, r24
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	a9 01       	movw	r20, r18
    2cc6:	02 c0       	rjmp	.+4      	; 0x2ccc <GPIO_readPin+0x7c>
    2cc8:	55 95       	asr	r21
    2cca:	47 95       	ror	r20
    2ccc:	8a 95       	dec	r24
    2cce:	e2 f7       	brpl	.-8      	; 0x2cc8 <GPIO_readPin+0x78>
    2cd0:	ca 01       	movw	r24, r20
    2cd2:	81 70       	andi	r24, 0x01	; 1
    2cd4:	90 70       	andi	r25, 0x00	; 0
    2cd6:	88 23       	and	r24, r24
    2cd8:	19 f0       	breq	.+6      	; 0x2ce0 <GPIO_readPin+0x90>
				{
					return LOGIC_HIGH ;
    2cda:	51 e0       	ldi	r21, 0x01	; 1
    2cdc:	5b 83       	std	Y+3, r21	; 0x03
    2cde:	4b c0       	rjmp	.+150    	; 0x2d76 <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW ;
    2ce0:	1b 82       	std	Y+3, r1	; 0x03
    2ce2:	49 c0       	rjmp	.+146    	; 0x2d76 <GPIO_readPin+0x126>
				}
				break;
			case PORTB_ID:
				if( BIT_IS_SET(PINB,pin_num) )
    2ce4:	e6 e3       	ldi	r30, 0x36	; 54
    2ce6:	f0 e0       	ldi	r31, 0x00	; 0
    2ce8:	80 81       	ld	r24, Z
    2cea:	28 2f       	mov	r18, r24
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf0:	88 2f       	mov	r24, r24
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	a9 01       	movw	r20, r18
    2cf6:	02 c0       	rjmp	.+4      	; 0x2cfc <GPIO_readPin+0xac>
    2cf8:	55 95       	asr	r21
    2cfa:	47 95       	ror	r20
    2cfc:	8a 95       	dec	r24
    2cfe:	e2 f7       	brpl	.-8      	; 0x2cf8 <GPIO_readPin+0xa8>
    2d00:	ca 01       	movw	r24, r20
    2d02:	81 70       	andi	r24, 0x01	; 1
    2d04:	90 70       	andi	r25, 0x00	; 0
    2d06:	88 23       	and	r24, r24
    2d08:	19 f0       	breq	.+6      	; 0x2d10 <GPIO_readPin+0xc0>
				{
					return LOGIC_HIGH ;
    2d0a:	51 e0       	ldi	r21, 0x01	; 1
    2d0c:	5b 83       	std	Y+3, r21	; 0x03
    2d0e:	33 c0       	rjmp	.+102    	; 0x2d76 <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW ;
    2d10:	1b 82       	std	Y+3, r1	; 0x03
    2d12:	31 c0       	rjmp	.+98     	; 0x2d76 <GPIO_readPin+0x126>
				}
				break;
			case PORTC_ID:
				if( BIT_IS_SET(PINC,pin_num) )
    2d14:	e3 e3       	ldi	r30, 0x33	; 51
    2d16:	f0 e0       	ldi	r31, 0x00	; 0
    2d18:	80 81       	ld	r24, Z
    2d1a:	28 2f       	mov	r18, r24
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d20:	88 2f       	mov	r24, r24
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	a9 01       	movw	r20, r18
    2d26:	02 c0       	rjmp	.+4      	; 0x2d2c <GPIO_readPin+0xdc>
    2d28:	55 95       	asr	r21
    2d2a:	47 95       	ror	r20
    2d2c:	8a 95       	dec	r24
    2d2e:	e2 f7       	brpl	.-8      	; 0x2d28 <GPIO_readPin+0xd8>
    2d30:	ca 01       	movw	r24, r20
    2d32:	81 70       	andi	r24, 0x01	; 1
    2d34:	90 70       	andi	r25, 0x00	; 0
    2d36:	88 23       	and	r24, r24
    2d38:	19 f0       	breq	.+6      	; 0x2d40 <GPIO_readPin+0xf0>
				{
					return LOGIC_HIGH ;
    2d3a:	51 e0       	ldi	r21, 0x01	; 1
    2d3c:	5b 83       	std	Y+3, r21	; 0x03
    2d3e:	1b c0       	rjmp	.+54     	; 0x2d76 <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW ;
    2d40:	1b 82       	std	Y+3, r1	; 0x03
    2d42:	19 c0       	rjmp	.+50     	; 0x2d76 <GPIO_readPin+0x126>
				}
				break;
			case PORTD_ID:
				if( BIT_IS_SET(PIND,pin_num) )
    2d44:	e0 e3       	ldi	r30, 0x30	; 48
    2d46:	f0 e0       	ldi	r31, 0x00	; 0
    2d48:	80 81       	ld	r24, Z
    2d4a:	28 2f       	mov	r18, r24
    2d4c:	30 e0       	ldi	r19, 0x00	; 0
    2d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d50:	88 2f       	mov	r24, r24
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	a9 01       	movw	r20, r18
    2d56:	02 c0       	rjmp	.+4      	; 0x2d5c <GPIO_readPin+0x10c>
    2d58:	55 95       	asr	r21
    2d5a:	47 95       	ror	r20
    2d5c:	8a 95       	dec	r24
    2d5e:	e2 f7       	brpl	.-8      	; 0x2d58 <GPIO_readPin+0x108>
    2d60:	ca 01       	movw	r24, r20
    2d62:	81 70       	andi	r24, 0x01	; 1
    2d64:	90 70       	andi	r25, 0x00	; 0
    2d66:	88 23       	and	r24, r24
    2d68:	19 f0       	breq	.+6      	; 0x2d70 <GPIO_readPin+0x120>
				{
					return LOGIC_HIGH ;
    2d6a:	51 e0       	ldi	r21, 0x01	; 1
    2d6c:	5b 83       	std	Y+3, r21	; 0x03
    2d6e:	03 c0       	rjmp	.+6      	; 0x2d76 <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW ;
    2d70:	1b 82       	std	Y+3, r1	; 0x03
    2d72:	01 c0       	rjmp	.+2      	; 0x2d76 <GPIO_readPin+0x126>
    2d74:	02 c0       	rjmp	.+4      	; 0x2d7a <GPIO_readPin+0x12a>
				}
				break;
			}
		}

}
    2d76:	8b 81       	ldd	r24, Y+3	; 0x03
    2d78:	8e 83       	std	Y+6, r24	; 0x06
    2d7a:	8e 81       	ldd	r24, Y+6	; 0x06
    2d7c:	26 96       	adiw	r28, 0x06	; 6
    2d7e:	0f b6       	in	r0, 0x3f	; 63
    2d80:	f8 94       	cli
    2d82:	de bf       	out	0x3e, r29	; 62
    2d84:	0f be       	out	0x3f, r0	; 63
    2d86:	cd bf       	out	0x3d, r28	; 61
    2d88:	cf 91       	pop	r28
    2d8a:	df 91       	pop	r29
    2d8c:	08 95       	ret

00002d8e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2d8e:	df 93       	push	r29
    2d90:	cf 93       	push	r28
    2d92:	00 d0       	rcall	.+0      	; 0x2d94 <GPIO_setupPortDirection+0x6>
    2d94:	00 d0       	rcall	.+0      	; 0x2d96 <GPIO_setupPortDirection+0x8>
    2d96:	cd b7       	in	r28, 0x3d	; 61
    2d98:	de b7       	in	r29, 0x3e	; 62
    2d9a:	89 83       	std	Y+1, r24	; 0x01
    2d9c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2d9e:	89 81       	ldd	r24, Y+1	; 0x01
    2da0:	84 30       	cpi	r24, 0x04	; 4
    2da2:	90 f5       	brcc	.+100    	; 0x2e08 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2da4:	89 81       	ldd	r24, Y+1	; 0x01
    2da6:	28 2f       	mov	r18, r24
    2da8:	30 e0       	ldi	r19, 0x00	; 0
    2daa:	3c 83       	std	Y+4, r19	; 0x04
    2dac:	2b 83       	std	Y+3, r18	; 0x03
    2dae:	8b 81       	ldd	r24, Y+3	; 0x03
    2db0:	9c 81       	ldd	r25, Y+4	; 0x04
    2db2:	81 30       	cpi	r24, 0x01	; 1
    2db4:	91 05       	cpc	r25, r1
    2db6:	d1 f0       	breq	.+52     	; 0x2dec <GPIO_setupPortDirection+0x5e>
    2db8:	2b 81       	ldd	r18, Y+3	; 0x03
    2dba:	3c 81       	ldd	r19, Y+4	; 0x04
    2dbc:	22 30       	cpi	r18, 0x02	; 2
    2dbe:	31 05       	cpc	r19, r1
    2dc0:	2c f4       	brge	.+10     	; 0x2dcc <GPIO_setupPortDirection+0x3e>
    2dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc4:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc6:	00 97       	sbiw	r24, 0x00	; 0
    2dc8:	61 f0       	breq	.+24     	; 0x2de2 <GPIO_setupPortDirection+0x54>
    2dca:	1e c0       	rjmp	.+60     	; 0x2e08 <GPIO_setupPortDirection+0x7a>
    2dcc:	2b 81       	ldd	r18, Y+3	; 0x03
    2dce:	3c 81       	ldd	r19, Y+4	; 0x04
    2dd0:	22 30       	cpi	r18, 0x02	; 2
    2dd2:	31 05       	cpc	r19, r1
    2dd4:	81 f0       	breq	.+32     	; 0x2df6 <GPIO_setupPortDirection+0x68>
    2dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd8:	9c 81       	ldd	r25, Y+4	; 0x04
    2dda:	83 30       	cpi	r24, 0x03	; 3
    2ddc:	91 05       	cpc	r25, r1
    2dde:	81 f0       	breq	.+32     	; 0x2e00 <GPIO_setupPortDirection+0x72>
    2de0:	13 c0       	rjmp	.+38     	; 0x2e08 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2de2:	ea e3       	ldi	r30, 0x3A	; 58
    2de4:	f0 e0       	ldi	r31, 0x00	; 0
    2de6:	8a 81       	ldd	r24, Y+2	; 0x02
    2de8:	80 83       	st	Z, r24
    2dea:	0e c0       	rjmp	.+28     	; 0x2e08 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2dec:	e7 e3       	ldi	r30, 0x37	; 55
    2dee:	f0 e0       	ldi	r31, 0x00	; 0
    2df0:	8a 81       	ldd	r24, Y+2	; 0x02
    2df2:	80 83       	st	Z, r24
    2df4:	09 c0       	rjmp	.+18     	; 0x2e08 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2df6:	e4 e3       	ldi	r30, 0x34	; 52
    2df8:	f0 e0       	ldi	r31, 0x00	; 0
    2dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfc:	80 83       	st	Z, r24
    2dfe:	04 c0       	rjmp	.+8      	; 0x2e08 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2e00:	e1 e3       	ldi	r30, 0x31	; 49
    2e02:	f0 e0       	ldi	r31, 0x00	; 0
    2e04:	8a 81       	ldd	r24, Y+2	; 0x02
    2e06:	80 83       	st	Z, r24
			break;
		}
	}
}
    2e08:	0f 90       	pop	r0
    2e0a:	0f 90       	pop	r0
    2e0c:	0f 90       	pop	r0
    2e0e:	0f 90       	pop	r0
    2e10:	cf 91       	pop	r28
    2e12:	df 91       	pop	r29
    2e14:	08 95       	ret

00002e16 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2e16:	df 93       	push	r29
    2e18:	cf 93       	push	r28
    2e1a:	00 d0       	rcall	.+0      	; 0x2e1c <GPIO_writePort+0x6>
    2e1c:	00 d0       	rcall	.+0      	; 0x2e1e <GPIO_writePort+0x8>
    2e1e:	cd b7       	in	r28, 0x3d	; 61
    2e20:	de b7       	in	r29, 0x3e	; 62
    2e22:	89 83       	std	Y+1, r24	; 0x01
    2e24:	6a 83       	std	Y+2, r22	; 0x02
	if(( port_num >= NUM_OF_PORTS) )
    2e26:	89 81       	ldd	r24, Y+1	; 0x01
    2e28:	84 30       	cpi	r24, 0x04	; 4
    2e2a:	90 f5       	brcc	.+100    	; 0x2e90 <GPIO_writePort+0x7a>
		{
		}

		else
		{
			switch(port_num)
    2e2c:	89 81       	ldd	r24, Y+1	; 0x01
    2e2e:	28 2f       	mov	r18, r24
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	3c 83       	std	Y+4, r19	; 0x04
    2e34:	2b 83       	std	Y+3, r18	; 0x03
    2e36:	8b 81       	ldd	r24, Y+3	; 0x03
    2e38:	9c 81       	ldd	r25, Y+4	; 0x04
    2e3a:	81 30       	cpi	r24, 0x01	; 1
    2e3c:	91 05       	cpc	r25, r1
    2e3e:	d1 f0       	breq	.+52     	; 0x2e74 <GPIO_writePort+0x5e>
    2e40:	2b 81       	ldd	r18, Y+3	; 0x03
    2e42:	3c 81       	ldd	r19, Y+4	; 0x04
    2e44:	22 30       	cpi	r18, 0x02	; 2
    2e46:	31 05       	cpc	r19, r1
    2e48:	2c f4       	brge	.+10     	; 0x2e54 <GPIO_writePort+0x3e>
    2e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e4e:	00 97       	sbiw	r24, 0x00	; 0
    2e50:	61 f0       	breq	.+24     	; 0x2e6a <GPIO_writePort+0x54>
    2e52:	1e c0       	rjmp	.+60     	; 0x2e90 <GPIO_writePort+0x7a>
    2e54:	2b 81       	ldd	r18, Y+3	; 0x03
    2e56:	3c 81       	ldd	r19, Y+4	; 0x04
    2e58:	22 30       	cpi	r18, 0x02	; 2
    2e5a:	31 05       	cpc	r19, r1
    2e5c:	81 f0       	breq	.+32     	; 0x2e7e <GPIO_writePort+0x68>
    2e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e60:	9c 81       	ldd	r25, Y+4	; 0x04
    2e62:	83 30       	cpi	r24, 0x03	; 3
    2e64:	91 05       	cpc	r25, r1
    2e66:	81 f0       	breq	.+32     	; 0x2e88 <GPIO_writePort+0x72>
    2e68:	13 c0       	rjmp	.+38     	; 0x2e90 <GPIO_writePort+0x7a>
			{
			case PORTA_ID:
								PORTA =value;
    2e6a:	eb e3       	ldi	r30, 0x3B	; 59
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e70:	80 83       	st	Z, r24
    2e72:	0e c0       	rjmp	.+28     	; 0x2e90 <GPIO_writePort+0x7a>
								break;
			case PORTB_ID:
								PORTB=value;
    2e74:	e8 e3       	ldi	r30, 0x38	; 56
    2e76:	f0 e0       	ldi	r31, 0x00	; 0
    2e78:	8a 81       	ldd	r24, Y+2	; 0x02
    2e7a:	80 83       	st	Z, r24
    2e7c:	09 c0       	rjmp	.+18     	; 0x2e90 <GPIO_writePort+0x7a>
								break;
			case PORTC_ID:
								PORTC=value;
    2e7e:	e5 e3       	ldi	r30, 0x35	; 53
    2e80:	f0 e0       	ldi	r31, 0x00	; 0
    2e82:	8a 81       	ldd	r24, Y+2	; 0x02
    2e84:	80 83       	st	Z, r24
    2e86:	04 c0       	rjmp	.+8      	; 0x2e90 <GPIO_writePort+0x7a>
								break;
			case PORTD_ID:
								PORTD=value;
    2e88:	e2 e3       	ldi	r30, 0x32	; 50
    2e8a:	f0 e0       	ldi	r31, 0x00	; 0
    2e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8e:	80 83       	st	Z, r24
								break;
			}
		}
}
    2e90:	0f 90       	pop	r0
    2e92:	0f 90       	pop	r0
    2e94:	0f 90       	pop	r0
    2e96:	0f 90       	pop	r0
    2e98:	cf 91       	pop	r28
    2e9a:	df 91       	pop	r29
    2e9c:	08 95       	ret

00002e9e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2e9e:	df 93       	push	r29
    2ea0:	cf 93       	push	r28
    2ea2:	00 d0       	rcall	.+0      	; 0x2ea4 <GPIO_readPort+0x6>
    2ea4:	00 d0       	rcall	.+0      	; 0x2ea6 <GPIO_readPort+0x8>
    2ea6:	0f 92       	push	r0
    2ea8:	cd b7       	in	r28, 0x3d	; 61
    2eaa:	de b7       	in	r29, 0x3e	; 62
    2eac:	89 83       	std	Y+1, r24	; 0x01

	if(( port_num >= NUM_OF_PORTS) )
    2eae:	89 81       	ldd	r24, Y+1	; 0x01
    2eb0:	84 30       	cpi	r24, 0x04	; 4
    2eb2:	98 f5       	brcc	.+102    	; 0x2f1a <GPIO_readPort+0x7c>
		{
		}

		else
		{
			switch(port_num)
    2eb4:	89 81       	ldd	r24, Y+1	; 0x01
    2eb6:	28 2f       	mov	r18, r24
    2eb8:	30 e0       	ldi	r19, 0x00	; 0
    2eba:	3c 83       	std	Y+4, r19	; 0x04
    2ebc:	2b 83       	std	Y+3, r18	; 0x03
    2ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ec2:	81 30       	cpi	r24, 0x01	; 1
    2ec4:	91 05       	cpc	r25, r1
    2ec6:	d1 f0       	breq	.+52     	; 0x2efc <GPIO_readPort+0x5e>
    2ec8:	2b 81       	ldd	r18, Y+3	; 0x03
    2eca:	3c 81       	ldd	r19, Y+4	; 0x04
    2ecc:	22 30       	cpi	r18, 0x02	; 2
    2ece:	31 05       	cpc	r19, r1
    2ed0:	2c f4       	brge	.+10     	; 0x2edc <GPIO_readPort+0x3e>
    2ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed6:	00 97       	sbiw	r24, 0x00	; 0
    2ed8:	61 f0       	breq	.+24     	; 0x2ef2 <GPIO_readPort+0x54>
    2eda:	1f c0       	rjmp	.+62     	; 0x2f1a <GPIO_readPort+0x7c>
    2edc:	2b 81       	ldd	r18, Y+3	; 0x03
    2ede:	3c 81       	ldd	r19, Y+4	; 0x04
    2ee0:	22 30       	cpi	r18, 0x02	; 2
    2ee2:	31 05       	cpc	r19, r1
    2ee4:	81 f0       	breq	.+32     	; 0x2f06 <GPIO_readPort+0x68>
    2ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee8:	9c 81       	ldd	r25, Y+4	; 0x04
    2eea:	83 30       	cpi	r24, 0x03	; 3
    2eec:	91 05       	cpc	r25, r1
    2eee:	81 f0       	breq	.+32     	; 0x2f10 <GPIO_readPort+0x72>
    2ef0:	14 c0       	rjmp	.+40     	; 0x2f1a <GPIO_readPort+0x7c>
			{
			case PORTA_ID:
						return (PINA & 0xFF);
    2ef2:	e9 e3       	ldi	r30, 0x39	; 57
    2ef4:	f0 e0       	ldi	r31, 0x00	; 0
    2ef6:	90 81       	ld	r25, Z
    2ef8:	9a 83       	std	Y+2, r25	; 0x02
    2efa:	10 c0       	rjmp	.+32     	; 0x2f1c <GPIO_readPort+0x7e>
						break;
			case PORTB_ID:
						return (PINB & 0xFF);
    2efc:	e6 e3       	ldi	r30, 0x36	; 54
    2efe:	f0 e0       	ldi	r31, 0x00	; 0
    2f00:	20 81       	ld	r18, Z
    2f02:	2a 83       	std	Y+2, r18	; 0x02
    2f04:	0b c0       	rjmp	.+22     	; 0x2f1c <GPIO_readPort+0x7e>
								break;
			case PORTC_ID:
						return (PINC & 0xFF);
    2f06:	e3 e3       	ldi	r30, 0x33	; 51
    2f08:	f0 e0       	ldi	r31, 0x00	; 0
    2f0a:	30 81       	ld	r19, Z
    2f0c:	3a 83       	std	Y+2, r19	; 0x02
    2f0e:	06 c0       	rjmp	.+12     	; 0x2f1c <GPIO_readPort+0x7e>

								break;
			case PORTD_ID:
						return (PIND & 0xFF);
    2f10:	e0 e3       	ldi	r30, 0x30	; 48
    2f12:	f0 e0       	ldi	r31, 0x00	; 0
    2f14:	80 81       	ld	r24, Z
    2f16:	8a 83       	std	Y+2, r24	; 0x02
    2f18:	01 c0       	rjmp	.+2      	; 0x2f1c <GPIO_readPort+0x7e>
    2f1a:	02 c0       	rjmp	.+4      	; 0x2f20 <GPIO_readPort+0x82>

								break;
			}
		}
}
    2f1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f1e:	9d 83       	std	Y+5, r25	; 0x05
    2f20:	8d 81       	ldd	r24, Y+5	; 0x05
    2f22:	0f 90       	pop	r0
    2f24:	0f 90       	pop	r0
    2f26:	0f 90       	pop	r0
    2f28:	0f 90       	pop	r0
    2f2a:	0f 90       	pop	r0
    2f2c:	cf 91       	pop	r28
    2f2e:	df 91       	pop	r29
    2f30:	08 95       	ret

00002f32 <__udivmodsi4>:
    2f32:	a1 e2       	ldi	r26, 0x21	; 33
    2f34:	1a 2e       	mov	r1, r26
    2f36:	aa 1b       	sub	r26, r26
    2f38:	bb 1b       	sub	r27, r27
    2f3a:	fd 01       	movw	r30, r26
    2f3c:	0d c0       	rjmp	.+26     	; 0x2f58 <__udivmodsi4_ep>

00002f3e <__udivmodsi4_loop>:
    2f3e:	aa 1f       	adc	r26, r26
    2f40:	bb 1f       	adc	r27, r27
    2f42:	ee 1f       	adc	r30, r30
    2f44:	ff 1f       	adc	r31, r31
    2f46:	a2 17       	cp	r26, r18
    2f48:	b3 07       	cpc	r27, r19
    2f4a:	e4 07       	cpc	r30, r20
    2f4c:	f5 07       	cpc	r31, r21
    2f4e:	20 f0       	brcs	.+8      	; 0x2f58 <__udivmodsi4_ep>
    2f50:	a2 1b       	sub	r26, r18
    2f52:	b3 0b       	sbc	r27, r19
    2f54:	e4 0b       	sbc	r30, r20
    2f56:	f5 0b       	sbc	r31, r21

00002f58 <__udivmodsi4_ep>:
    2f58:	66 1f       	adc	r22, r22
    2f5a:	77 1f       	adc	r23, r23
    2f5c:	88 1f       	adc	r24, r24
    2f5e:	99 1f       	adc	r25, r25
    2f60:	1a 94       	dec	r1
    2f62:	69 f7       	brne	.-38     	; 0x2f3e <__udivmodsi4_loop>
    2f64:	60 95       	com	r22
    2f66:	70 95       	com	r23
    2f68:	80 95       	com	r24
    2f6a:	90 95       	com	r25
    2f6c:	9b 01       	movw	r18, r22
    2f6e:	ac 01       	movw	r20, r24
    2f70:	bd 01       	movw	r22, r26
    2f72:	cf 01       	movw	r24, r30
    2f74:	08 95       	ret

00002f76 <__prologue_saves__>:
    2f76:	2f 92       	push	r2
    2f78:	3f 92       	push	r3
    2f7a:	4f 92       	push	r4
    2f7c:	5f 92       	push	r5
    2f7e:	6f 92       	push	r6
    2f80:	7f 92       	push	r7
    2f82:	8f 92       	push	r8
    2f84:	9f 92       	push	r9
    2f86:	af 92       	push	r10
    2f88:	bf 92       	push	r11
    2f8a:	cf 92       	push	r12
    2f8c:	df 92       	push	r13
    2f8e:	ef 92       	push	r14
    2f90:	ff 92       	push	r15
    2f92:	0f 93       	push	r16
    2f94:	1f 93       	push	r17
    2f96:	cf 93       	push	r28
    2f98:	df 93       	push	r29
    2f9a:	cd b7       	in	r28, 0x3d	; 61
    2f9c:	de b7       	in	r29, 0x3e	; 62
    2f9e:	ca 1b       	sub	r28, r26
    2fa0:	db 0b       	sbc	r29, r27
    2fa2:	0f b6       	in	r0, 0x3f	; 63
    2fa4:	f8 94       	cli
    2fa6:	de bf       	out	0x3e, r29	; 62
    2fa8:	0f be       	out	0x3f, r0	; 63
    2faa:	cd bf       	out	0x3d, r28	; 61
    2fac:	09 94       	ijmp

00002fae <__epilogue_restores__>:
    2fae:	2a 88       	ldd	r2, Y+18	; 0x12
    2fb0:	39 88       	ldd	r3, Y+17	; 0x11
    2fb2:	48 88       	ldd	r4, Y+16	; 0x10
    2fb4:	5f 84       	ldd	r5, Y+15	; 0x0f
    2fb6:	6e 84       	ldd	r6, Y+14	; 0x0e
    2fb8:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fba:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fbc:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fbe:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fc0:	b9 84       	ldd	r11, Y+9	; 0x09
    2fc2:	c8 84       	ldd	r12, Y+8	; 0x08
    2fc4:	df 80       	ldd	r13, Y+7	; 0x07
    2fc6:	ee 80       	ldd	r14, Y+6	; 0x06
    2fc8:	fd 80       	ldd	r15, Y+5	; 0x05
    2fca:	0c 81       	ldd	r16, Y+4	; 0x04
    2fcc:	1b 81       	ldd	r17, Y+3	; 0x03
    2fce:	aa 81       	ldd	r26, Y+2	; 0x02
    2fd0:	b9 81       	ldd	r27, Y+1	; 0x01
    2fd2:	ce 0f       	add	r28, r30
    2fd4:	d1 1d       	adc	r29, r1
    2fd6:	0f b6       	in	r0, 0x3f	; 63
    2fd8:	f8 94       	cli
    2fda:	de bf       	out	0x3e, r29	; 62
    2fdc:	0f be       	out	0x3f, r0	; 63
    2fde:	cd bf       	out	0x3d, r28	; 61
    2fe0:	ed 01       	movw	r28, r26
    2fe2:	08 95       	ret

00002fe4 <itoa>:
    2fe4:	fb 01       	movw	r30, r22
    2fe6:	9f 01       	movw	r18, r30
    2fe8:	e8 94       	clt
    2fea:	42 30       	cpi	r20, 0x02	; 2
    2fec:	c4 f0       	brlt	.+48     	; 0x301e <itoa+0x3a>
    2fee:	45 32       	cpi	r20, 0x25	; 37
    2ff0:	b4 f4       	brge	.+44     	; 0x301e <itoa+0x3a>
    2ff2:	4a 30       	cpi	r20, 0x0A	; 10
    2ff4:	29 f4       	brne	.+10     	; 0x3000 <itoa+0x1c>
    2ff6:	97 fb       	bst	r25, 7
    2ff8:	1e f4       	brtc	.+6      	; 0x3000 <itoa+0x1c>
    2ffa:	90 95       	com	r25
    2ffc:	81 95       	neg	r24
    2ffe:	9f 4f       	sbci	r25, 0xFF	; 255
    3000:	64 2f       	mov	r22, r20
    3002:	77 27       	eor	r23, r23
    3004:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodhi4>
    3008:	80 5d       	subi	r24, 0xD0	; 208
    300a:	8a 33       	cpi	r24, 0x3A	; 58
    300c:	0c f0       	brlt	.+2      	; 0x3010 <itoa+0x2c>
    300e:	89 5d       	subi	r24, 0xD9	; 217
    3010:	81 93       	st	Z+, r24
    3012:	cb 01       	movw	r24, r22
    3014:	00 97       	sbiw	r24, 0x00	; 0
    3016:	a1 f7       	brne	.-24     	; 0x3000 <itoa+0x1c>
    3018:	16 f4       	brtc	.+4      	; 0x301e <itoa+0x3a>
    301a:	5d e2       	ldi	r21, 0x2D	; 45
    301c:	51 93       	st	Z+, r21
    301e:	10 82       	st	Z, r1
    3020:	c9 01       	movw	r24, r18
    3022:	0c 94 13 18 	jmp	0x3026	; 0x3026 <strrev>

00003026 <strrev>:
    3026:	dc 01       	movw	r26, r24
    3028:	fc 01       	movw	r30, r24
    302a:	67 2f       	mov	r22, r23
    302c:	71 91       	ld	r23, Z+
    302e:	77 23       	and	r23, r23
    3030:	e1 f7       	brne	.-8      	; 0x302a <strrev+0x4>
    3032:	32 97       	sbiw	r30, 0x02	; 2
    3034:	04 c0       	rjmp	.+8      	; 0x303e <strrev+0x18>
    3036:	7c 91       	ld	r23, X
    3038:	6d 93       	st	X+, r22
    303a:	70 83       	st	Z, r23
    303c:	62 91       	ld	r22, -Z
    303e:	ae 17       	cp	r26, r30
    3040:	bf 07       	cpc	r27, r31
    3042:	c8 f3       	brcs	.-14     	; 0x3036 <strrev+0x10>
    3044:	08 95       	ret

00003046 <__udivmodhi4>:
    3046:	aa 1b       	sub	r26, r26
    3048:	bb 1b       	sub	r27, r27
    304a:	51 e1       	ldi	r21, 0x11	; 17
    304c:	07 c0       	rjmp	.+14     	; 0x305c <__udivmodhi4_ep>

0000304e <__udivmodhi4_loop>:
    304e:	aa 1f       	adc	r26, r26
    3050:	bb 1f       	adc	r27, r27
    3052:	a6 17       	cp	r26, r22
    3054:	b7 07       	cpc	r27, r23
    3056:	10 f0       	brcs	.+4      	; 0x305c <__udivmodhi4_ep>
    3058:	a6 1b       	sub	r26, r22
    305a:	b7 0b       	sbc	r27, r23

0000305c <__udivmodhi4_ep>:
    305c:	88 1f       	adc	r24, r24
    305e:	99 1f       	adc	r25, r25
    3060:	5a 95       	dec	r21
    3062:	a9 f7       	brne	.-22     	; 0x304e <__udivmodhi4_loop>
    3064:	80 95       	com	r24
    3066:	90 95       	com	r25
    3068:	bc 01       	movw	r22, r24
    306a:	cd 01       	movw	r24, r26
    306c:	08 95       	ret

0000306e <_exit>:
    306e:	f8 94       	cli

00003070 <__stop_program>:
    3070:	ff cf       	rjmp	.-2      	; 0x3070 <__stop_program>
