
Final_Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010e  00800060  000022ee  00002382  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080016e  0080016e  00002490  2**0
                  ALLOC
  3 .stab         00002514  00000000  00000000  00002490  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013a7  00000000  00000000  000049a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00005d4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  00005ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  000080ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  0000920d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000a210  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  0000a3b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  0000a66e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000af7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 af 0b 	jmp	0x175e	; 0x175e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ee       	ldi	r30, 0xEE	; 238
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 37       	cpi	r26, 0x72	; 114
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 60 07 	call	0xec0	; 0xec0 <main>
      8a:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3e 11 	jmp	0x227c	; 0x227c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5a 11 	jmp	0x22b4	; 0x22b4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4a 11 	jmp	0x2294	; 0x2294 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 66 11 	jmp	0x22cc	; 0x22cc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4a 11 	jmp	0x2294	; 0x2294 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 66 11 	jmp	0x22cc	; 0x22cc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3e 11 	jmp	0x227c	; 0x227c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5a 11 	jmp	0x22b4	; 0x22b4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4a 11 	jmp	0x2294	; 0x2294 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 66 11 	jmp	0x22cc	; 0x22cc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 4a 11 	jmp	0x2294	; 0x2294 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 66 11 	jmp	0x22cc	; 0x22cc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 4a 11 	jmp	0x2294	; 0x2294 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 66 11 	jmp	0x22cc	; 0x22cc <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 47 11 	jmp	0x228e	; 0x228e <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 63 11 	jmp	0x22c6	; 0x22c6 <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 4e 11 	jmp	0x229c	; 0x229c <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 6a 11 	jmp	0x22d4	; 0x22d4 <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e8 59       	subi	r30, 0x98	; 152
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <Buzzer_init>:
 * Description : function for initiate the Buzzer by :
 * 1. Setup pin Direction .
 * 2. Turn off the buzzer .
 */
void Buzzer_init(void)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID , DCMOTOR_PIN_ID , PIN_OUTPUT);
     ca8:	82 e0       	ldi	r24, 0x02	; 2
     caa:	67 e0       	ldi	r22, 0x07	; 7
     cac:	41 e0       	ldi	r20, 0x01	; 1
     cae:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <GPIO_setupPinDirection>

	GPIO_writePin(BUZZER_PORT_ID , DCMOTOR_PIN_ID , LOGIC_LOW);
     cb2:	82 e0       	ldi	r24, 0x02	; 2
     cb4:	67 e0       	ldi	r22, 0x07	; 7
     cb6:	40 e0       	ldi	r20, 0x00	; 0
     cb8:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <GPIO_writePin>

}
     cbc:	cf 91       	pop	r28
     cbe:	df 91       	pop	r29
     cc0:	08 95       	ret

00000cc2 <Buzzer_on>:

/*
 * Description : function for turn on the buzzer .
 */
void Buzzer_on(void)
{
     cc2:	df 93       	push	r29
     cc4:	cf 93       	push	r28
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID , DCMOTOR_PIN_ID , LOGIC_HIGH);
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	67 e0       	ldi	r22, 0x07	; 7
     cce:	41 e0       	ldi	r20, 0x01	; 1
     cd0:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <GPIO_writePin>

}
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <Buzzer_off>:

/*
 * Description : function for turn off the buzzer .
 */
void Buzzer_off(void)
{
     cda:	df 93       	push	r29
     cdc:	cf 93       	push	r28
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID , DCMOTOR_PIN_ID , LOGIC_LOW);
     ce2:	82 e0       	ldi	r24, 0x02	; 2
     ce4:	67 e0       	ldi	r22, 0x07	; 7
     ce6:	40 e0       	ldi	r20, 0x00	; 0
     ce8:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <GPIO_writePin>

}
     cec:	cf 91       	pop	r28
     cee:	df 91       	pop	r29
     cf0:	08 95       	ret

00000cf2 <Passwords_check>:

/*
 * Description : function for passwords match checking .
 */
uint8 Passwords_check(uint8 * a_array  ,uint8 a_size )
{
     cf2:	df 93       	push	r29
     cf4:	cf 93       	push	r28
     cf6:	cd b7       	in	r28, 0x3d	; 61
     cf8:	de b7       	in	r29, 0x3e	; 62
     cfa:	2d 97       	sbiw	r28, 0x0d	; 13
     cfc:	0f b6       	in	r0, 0x3f	; 63
     cfe:	f8 94       	cli
     d00:	de bf       	out	0x3e, r29	; 62
     d02:	0f be       	out	0x3f, r0	; 63
     d04:	cd bf       	out	0x3d, r28	; 61
     d06:	9d 83       	std	Y+5, r25	; 0x05
     d08:	8c 83       	std	Y+4, r24	; 0x04
     d0a:	6e 83       	std	Y+6, r22	; 0x06
		/* if passwords are matched function will return MATCHED_PASSWORDS */
		counter++;
	}

	return MATCHED_PASSWORDS;
}
     d0c:	2d b7       	in	r18, 0x3d	; 61
     d0e:	3e b7       	in	r19, 0x3e	; 62
     d10:	3d 87       	std	Y+13, r19	; 0x0d
     d12:	2c 87       	std	Y+12, r18	; 0x0c

/*
 * Description : function for passwords match checking .
 */
uint8 Passwords_check(uint8 * a_array  ,uint8 a_size )
{
     d14:	8d b7       	in	r24, 0x3d	; 61
     d16:	9e b7       	in	r25, 0x3e	; 62
     d18:	98 87       	std	Y+8, r25	; 0x08
     d1a:	8f 83       	std	Y+7, r24	; 0x07
	uint8 a_array2[a_size],counter = 0 ;
     d1c:	8e 81       	ldd	r24, Y+6	; 0x06
     d1e:	88 2f       	mov	r24, r24
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	2d b7       	in	r18, 0x3d	; 61
     d24:	3e b7       	in	r19, 0x3e	; 62
     d26:	28 1b       	sub	r18, r24
     d28:	39 0b       	sbc	r19, r25
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	f8 94       	cli
     d2e:	3e bf       	out	0x3e, r19	; 62
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	2d bf       	out	0x3d, r18	; 61
     d34:	8d b7       	in	r24, 0x3d	; 61
     d36:	9e b7       	in	r25, 0x3e	; 62
     d38:	01 96       	adiw	r24, 0x01	; 1
     d3a:	9b 87       	std	Y+11, r25	; 0x0b
     d3c:	8a 87       	std	Y+10, r24	; 0x0a
     d3e:	8a 85       	ldd	r24, Y+10	; 0x0a
     d40:	9b 85       	ldd	r25, Y+11	; 0x0b
     d42:	00 96       	adiw	r24, 0x00	; 0
     d44:	9b 87       	std	Y+11, r25	; 0x0b
     d46:	8a 87       	std	Y+10, r24	; 0x0a
     d48:	2a 85       	ldd	r18, Y+10	; 0x0a
     d4a:	3b 85       	ldd	r19, Y+11	; 0x0b
     d4c:	3b 83       	std	Y+3, r19	; 0x03
     d4e:	2a 83       	std	Y+2, r18	; 0x02
     d50:	19 82       	std	Y+1, r1	; 0x01
	/*
	 *  a_array2 : is the second password from EEPROM .
	 */

	EEPROM_readArray(0x00 , a_array2 , a_size);
     d52:	2a 81       	ldd	r18, Y+2	; 0x02
     d54:	3b 81       	ldd	r19, Y+3	; 0x03
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	b9 01       	movw	r22, r18
     d5c:	4e 81       	ldd	r20, Y+6	; 0x06
     d5e:	0e 94 48 0a 	call	0x1490	; 0x1490 <EEPROM_readArray>
     d62:	19 c0       	rjmp	.+50     	; 0xd96 <Passwords_check+0xa4>


	/* Looping on the password compare each element from EEPROM to received password */
	while( counter < a_size )
	{
		if( a_array[counter] == a_array2[counter] )
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	8c 81       	ldd	r24, Y+4	; 0x04
     d6c:	9d 81       	ldd	r25, Y+5	; 0x05
     d6e:	fc 01       	movw	r30, r24
     d70:	e2 0f       	add	r30, r18
     d72:	f3 1f       	adc	r31, r19
     d74:	40 81       	ld	r20, Z
     d76:	89 81       	ldd	r24, Y+1	; 0x01
     d78:	28 2f       	mov	r18, r24
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	8a 81       	ldd	r24, Y+2	; 0x02
     d7e:	9b 81       	ldd	r25, Y+3	; 0x03
     d80:	fc 01       	movw	r30, r24
     d82:	e2 0f       	add	r30, r18
     d84:	f3 1f       	adc	r31, r19
     d86:	80 81       	ld	r24, Z
     d88:	48 17       	cp	r20, r24
     d8a:	11 f0       	breq	.+4      	; 0xd90 <Passwords_check+0x9e>

		}

		else
		{
			return UNMATCHED_PASSWORDS ;
     d8c:	19 86       	std	Y+9, r1	; 0x09
     d8e:	09 c0       	rjmp	.+18     	; 0xda2 <Passwords_check+0xb0>
		}
		/* if passwords are matched function will return MATCHED_PASSWORDS */
		counter++;
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	8f 5f       	subi	r24, 0xFF	; 255
     d94:	89 83       	std	Y+1, r24	; 0x01

	EEPROM_readArray(0x00 , a_array2 , a_size);


	/* Looping on the password compare each element from EEPROM to received password */
	while( counter < a_size )
     d96:	99 81       	ldd	r25, Y+1	; 0x01
     d98:	8e 81       	ldd	r24, Y+6	; 0x06
     d9a:	98 17       	cp	r25, r24
     d9c:	18 f3       	brcs	.-58     	; 0xd64 <Passwords_check+0x72>
		}
		/* if passwords are matched function will return MATCHED_PASSWORDS */
		counter++;
	}

	return MATCHED_PASSWORDS;
     d9e:	3a e0       	ldi	r19, 0x0A	; 10
     da0:	39 87       	std	Y+9, r19	; 0x09
     da2:	8f 81       	ldd	r24, Y+7	; 0x07
     da4:	98 85       	ldd	r25, Y+8	; 0x08
     da6:	0f b6       	in	r0, 0x3f	; 63
     da8:	f8 94       	cli
     daa:	9e bf       	out	0x3e, r25	; 62
     dac:	0f be       	out	0x3f, r0	; 63
     dae:	8d bf       	out	0x3d, r24	; 61
     db0:	89 85       	ldd	r24, Y+9	; 0x09
}
     db2:	2c 85       	ldd	r18, Y+12	; 0x0c
     db4:	3d 85       	ldd	r19, Y+13	; 0x0d
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	f8 94       	cli
     dba:	3e bf       	out	0x3e, r19	; 62
     dbc:	0f be       	out	0x3f, r0	; 63
     dbe:	2d bf       	out	0x3d, r18	; 61
     dc0:	2d 96       	adiw	r28, 0x0d	; 13
     dc2:	0f b6       	in	r0, 0x3f	; 63
     dc4:	f8 94       	cli
     dc6:	de bf       	out	0x3e, r29	; 62
     dc8:	0f be       	out	0x3f, r0	; 63
     dca:	cd bf       	out	0x3d, r28	; 61
     dcc:	cf 91       	pop	r28
     dce:	df 91       	pop	r29
     dd0:	08 95       	ret

00000dd2 <Creat_password>:

/*
 * Description : function for creating new password .
 */
uint8 Creat_password( uint8 * a_array1 ,uint8 a_size )
{
     dd2:	df 93       	push	r29
     dd4:	cf 93       	push	r28
     dd6:	00 d0       	rcall	.+0      	; 0xdd8 <Creat_password+0x6>
     dd8:	00 d0       	rcall	.+0      	; 0xdda <Creat_password+0x8>
     dda:	cd b7       	in	r28, 0x3d	; 61
     ddc:	de b7       	in	r29, 0x3e	; 62
     dde:	9a 83       	std	Y+2, r25	; 0x02
     de0:	89 83       	std	Y+1, r24	; 0x01
     de2:	6b 83       	std	Y+3, r22	; 0x03
		while( UART_receiveByte() != HMI_READY);
     de4:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <UART_receiveByte>
     de8:	80 3f       	cpi	r24, 0xF0	; 240
     dea:	e1 f7       	brne	.-8      	; 0xde4 <Creat_password+0x12>

		UART_receiveArray( a_array1 , SIZE);
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	9a 81       	ldd	r25, Y+2	; 0x02
     df0:	65 e0       	ldi	r22, 0x05	; 5
     df2:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <UART_receiveArray>

		EEPROM_writeArray(0x00 , a_array1 , SIZE);
     df6:	29 81       	ldd	r18, Y+1	; 0x01
     df8:	3a 81       	ldd	r19, Y+2	; 0x02
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	b9 01       	movw	r22, r18
     e00:	45 e0       	ldi	r20, 0x05	; 5
     e02:	0e 94 99 09 	call	0x1332	; 0x1332 <EEPROM_writeArray>

		/******************** first password received by UART and saved in EEPROM ************/

		while( UART_receiveByte() != HMI_READY);
     e06:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <UART_receiveByte>
     e0a:	80 3f       	cpi	r24, 0xF0	; 240
     e0c:	e1 f7       	brne	.-8      	; 0xe06 <Creat_password+0x34>

		UART_receiveArray( a_array1 , SIZE);
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
     e10:	9a 81       	ldd	r25, Y+2	; 0x02
     e12:	65 e0       	ldi	r22, 0x05	; 5
     e14:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <UART_receiveArray>

		/******************** second password received by UART ************/

		if(Passwords_check(a_array1 ,a_size ) )
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	9a 81       	ldd	r25, Y+2	; 0x02
     e1c:	6b 81       	ldd	r22, Y+3	; 0x03
     e1e:	0e 94 79 06 	call	0xcf2	; 0xcf2 <Passwords_check>
     e22:	88 23       	and	r24, r24
     e24:	31 f0       	breq	.+12     	; 0xe32 <Creat_password+0x60>
		{
			UART_sendByte(MATCHED_PASSWORDS);
     e26:	8a e0       	ldi	r24, 0x0A	; 10
     e28:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <UART_sendByte>
			return UNMATCHED_PASSWORDS ;
		}
		/* if the function returned ( matched = True = 0x0A ) program will reply matched
		 * if returned ( unmatched = False = 0 )  program will reply unmatched .
		 */
		return MATCHED_PASSWORDS;
     e2c:	8a e0       	ldi	r24, 0x0A	; 10
     e2e:	8c 83       	std	Y+4, r24	; 0x04
     e30:	04 c0       	rjmp	.+8      	; 0xe3a <Creat_password+0x68>
		{
			UART_sendByte(MATCHED_PASSWORDS);
		}
		else
		{
			UART_sendByte(UNMATCHED_PASSWORDS);
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <UART_sendByte>
			return UNMATCHED_PASSWORDS ;
     e38:	1c 82       	std	Y+4, r1	; 0x04
     e3a:	8c 81       	ldd	r24, Y+4	; 0x04
		 * if returned ( unmatched = False = 0 )  program will reply unmatched .
		 */
		return MATCHED_PASSWORDS;

		/******************** passwords checking  ************/
}
     e3c:	0f 90       	pop	r0
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
     e42:	0f 90       	pop	r0
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <Password_login>:

/*
 * Description : function for checking the password received by UART .
 */
uint8 Password_login(uint8 * a_array1 ,uint8 a_size )
{
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	00 d0       	rcall	.+0      	; 0xe50 <Password_login+0x6>
     e50:	00 d0       	rcall	.+0      	; 0xe52 <Password_login+0x8>
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
     e56:	9a 83       	std	Y+2, r25	; 0x02
     e58:	89 83       	std	Y+1, r24	; 0x01
     e5a:	6b 83       	std	Y+3, r22	; 0x03

			while( UART_receiveByte() != HMI_READY);
     e5c:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <UART_receiveByte>
     e60:	80 3f       	cpi	r24, 0xF0	; 240
     e62:	e1 f7       	brne	.-8      	; 0xe5c <Password_login+0x12>

			UART_receiveArray( a_array1 , SIZE);
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	9a 81       	ldd	r25, Y+2	; 0x02
     e68:	65 e0       	ldi	r22, 0x05	; 5
     e6a:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <UART_receiveArray>

			/********************  password received by UART ************/

			if(Passwords_check(a_array1 ,a_size ) )
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	9a 81       	ldd	r25, Y+2	; 0x02
     e72:	6b 81       	ldd	r22, Y+3	; 0x03
     e74:	0e 94 79 06 	call	0xcf2	; 0xcf2 <Passwords_check>
     e78:	88 23       	and	r24, r24
     e7a:	31 f0       	breq	.+12     	; 0xe88 <Password_login+0x3e>
			{
				UART_sendByte(MATCHED_PASSWORDS);
     e7c:	8a e0       	ldi	r24, 0x0A	; 10
     e7e:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <UART_sendByte>
				return UNMATCHED_PASSWORDS ;
			}
			/* if the function returned ( matched = True = 0x0A ) program will reply matched
			 * if returned ( unmatched = False = 0 )  program will reply unmatched .
			 */
			return MATCHED_PASSWORDS;
     e82:	8a e0       	ldi	r24, 0x0A	; 10
     e84:	8c 83       	std	Y+4, r24	; 0x04
     e86:	04 c0       	rjmp	.+8      	; 0xe90 <Password_login+0x46>
			{
				UART_sendByte(MATCHED_PASSWORDS);
			}
			else
			{
				UART_sendByte(UNMATCHED_PASSWORDS);
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <UART_sendByte>
				return UNMATCHED_PASSWORDS ;
     e8e:	1c 82       	std	Y+4, r1	; 0x04
     e90:	8c 81       	ldd	r24, Y+4	; 0x04
			 */
			return MATCHED_PASSWORDS;

			/******************** passwords checking  ************/

}
     e92:	0f 90       	pop	r0
     e94:	0f 90       	pop	r0
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	cf 91       	pop	r28
     e9c:	df 91       	pop	r29
     e9e:	08 95       	ret

00000ea0 <TIMER_counter>:

void TIMER_counter(void)
{
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
     ea8:	80 91 6e 01 	lds	r24, 0x016E
     eac:	90 91 6f 01 	lds	r25, 0x016F
     eb0:	01 96       	adiw	r24, 0x01	; 1
     eb2:	90 93 6f 01 	sts	0x016F, r25
     eb6:	80 93 6e 01 	sts	0x016E, r24
}
     eba:	cf 91       	pop	r28
     ebc:	df 91       	pop	r29
     ebe:	08 95       	ret

00000ec0 <main>:

int main()
{
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	a6 97       	sbiw	r28, 0x26	; 38
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
	uint8 Arr1[SIZE] , key = 0 , counter =0 ;
     ed4:	18 8a       	std	Y+16, r1	; 0x10
     ed6:	1f 86       	std	Y+15, r1	; 0x0f
;
	/*
	 * Array 1 : is the first password .
	 */

	Timer1_ConfigType Timer1_configs = { 0 , 8000 , TIMER1_1024_PRESCALER , TIMER1_CTC_MODE };
     ed8:	ce 01       	movw	r24, r28
     eda:	46 96       	adiw	r24, 0x16	; 22
     edc:	9b a3       	std	Y+35, r25	; 0x23
     ede:	8a a3       	std	Y+34, r24	; 0x22
     ee0:	e8 e6       	ldi	r30, 0x68	; 104
     ee2:	f1 e0       	ldi	r31, 0x01	; 1
     ee4:	fd a3       	std	Y+37, r31	; 0x25
     ee6:	ec a3       	std	Y+36, r30	; 0x24
     ee8:	f6 e0       	ldi	r31, 0x06	; 6
     eea:	fe a3       	std	Y+38, r31	; 0x26
     eec:	ec a1       	ldd	r30, Y+36	; 0x24
     eee:	fd a1       	ldd	r31, Y+37	; 0x25
     ef0:	00 80       	ld	r0, Z
     ef2:	8c a1       	ldd	r24, Y+36	; 0x24
     ef4:	9d a1       	ldd	r25, Y+37	; 0x25
     ef6:	01 96       	adiw	r24, 0x01	; 1
     ef8:	9d a3       	std	Y+37, r25	; 0x25
     efa:	8c a3       	std	Y+36, r24	; 0x24
     efc:	ea a1       	ldd	r30, Y+34	; 0x22
     efe:	fb a1       	ldd	r31, Y+35	; 0x23
     f00:	00 82       	st	Z, r0
     f02:	8a a1       	ldd	r24, Y+34	; 0x22
     f04:	9b a1       	ldd	r25, Y+35	; 0x23
     f06:	01 96       	adiw	r24, 0x01	; 1
     f08:	9b a3       	std	Y+35, r25	; 0x23
     f0a:	8a a3       	std	Y+34, r24	; 0x22
     f0c:	9e a1       	ldd	r25, Y+38	; 0x26
     f0e:	91 50       	subi	r25, 0x01	; 1
     f10:	9e a3       	std	Y+38, r25	; 0x26
     f12:	ee a1       	ldd	r30, Y+38	; 0x26
     f14:	ee 23       	and	r30, r30
     f16:	51 f7       	brne	.-44     	; 0xeec <main+0x2c>
	/* timer1 configurations : initial value , compare value , prescaler , timer mode */

	TWI_ConfigType TWI_Configs = { 0x10 , 2 };
     f18:	80 e1       	ldi	r24, 0x10	; 16
     f1a:	8c 8f       	std	Y+28, r24	; 0x1c
     f1c:	82 e0       	ldi	r24, 0x02	; 2
     f1e:	8d 8f       	std	Y+29, r24	; 0x1d

	UART_ConfigType UART_Configs = {UART_8bits,UART_parityEven,UART_1StopBit,9600};
     f20:	83 e0       	ldi	r24, 0x03	; 3
     f22:	8e 8f       	std	Y+30, r24	; 0x1e
     f24:	82 e0       	ldi	r24, 0x02	; 2
     f26:	8f 8f       	std	Y+31, r24	; 0x1f
     f28:	18 a2       	std	Y+32, r1	; 0x20
     f2a:	80 e8       	ldi	r24, 0x80	; 128
     f2c:	89 a3       	std	Y+33, r24	; 0x21
	/* UART configurations : number of bits , parity bit , stop bit , baud rate . */

	UART_init(&UART_Configs);
     f2e:	ce 01       	movw	r24, r28
     f30:	4e 96       	adiw	r24, 0x1e	; 30
     f32:	0e 94 8a 0c 	call	0x1914	; 0x1914 <UART_init>
	/* UART initialization */

	TWI_init( &TWI_Configs );
     f36:	ce 01       	movw	r24, r28
     f38:	4c 96       	adiw	r24, 0x1c	; 28
     f3a:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <TWI_init>
	/* TWI initialization */

	DcMotor_Init();
     f3e:	0e 94 98 08 	call	0x1130	; 0x1130 <DcMotor_Init>
	/* DC motor initialization */

	Buzzer_init();
     f42:	0e 94 50 06 	call	0xca0	; 0xca0 <Buzzer_init>
	/* Buzzer initialization */

	Timer1_init( &Timer1_configs );
     f46:	ce 01       	movw	r24, r28
     f48:	46 96       	adiw	r24, 0x16	; 22
     f4a:	0e 94 15 0c 	call	0x182a	; 0x182a <Timer1_init>
	/* Timer 1 initialization */

	Timer1_setCallBack(TIMER_counter);
     f4e:	80 e5       	ldi	r24, 0x50	; 80
     f50:	97 e0       	ldi	r25, 0x07	; 7
     f52:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <Timer1_setCallBack>
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	a0 e2       	ldi	r26, 0x20	; 32
     f5c:	b1 e4       	ldi	r27, 0x41	; 65
     f5e:	8b 87       	std	Y+11, r24	; 0x0b
     f60:	9c 87       	std	Y+12, r25	; 0x0c
     f62:	ad 87       	std	Y+13, r26	; 0x0d
     f64:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f66:	6b 85       	ldd	r22, Y+11	; 0x0b
     f68:	7c 85       	ldd	r23, Y+12	; 0x0c
     f6a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f6c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	4a ef       	ldi	r20, 0xFA	; 250
     f74:	54 e4       	ldi	r21, 0x44	; 68
     f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f7a:	dc 01       	movw	r26, r24
     f7c:	cb 01       	movw	r24, r22
     f7e:	8f 83       	std	Y+7, r24	; 0x07
     f80:	98 87       	std	Y+8, r25	; 0x08
     f82:	a9 87       	std	Y+9, r26	; 0x09
     f84:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f86:	6f 81       	ldd	r22, Y+7	; 0x07
     f88:	78 85       	ldd	r23, Y+8	; 0x08
     f8a:	89 85       	ldd	r24, Y+9	; 0x09
     f8c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	40 e8       	ldi	r20, 0x80	; 128
     f94:	5f e3       	ldi	r21, 0x3F	; 63
     f96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f9a:	88 23       	and	r24, r24
     f9c:	2c f4       	brge	.+10     	; 0xfa8 <main+0xe8>
		__ticks = 1;
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	9e 83       	std	Y+6, r25	; 0x06
     fa4:	8d 83       	std	Y+5, r24	; 0x05
     fa6:	3f c0       	rjmp	.+126    	; 0x1026 <main+0x166>
	else if (__tmp > 65535)
     fa8:	6f 81       	ldd	r22, Y+7	; 0x07
     faa:	78 85       	ldd	r23, Y+8	; 0x08
     fac:	89 85       	ldd	r24, Y+9	; 0x09
     fae:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	3f ef       	ldi	r19, 0xFF	; 255
     fb4:	4f e7       	ldi	r20, 0x7F	; 127
     fb6:	57 e4       	ldi	r21, 0x47	; 71
     fb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fbc:	18 16       	cp	r1, r24
     fbe:	4c f5       	brge	.+82     	; 0x1012 <main+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fc0:	6b 85       	ldd	r22, Y+11	; 0x0b
     fc2:	7c 85       	ldd	r23, Y+12	; 0x0c
     fc4:	8d 85       	ldd	r24, Y+13	; 0x0d
     fc6:	9e 85       	ldd	r25, Y+14	; 0x0e
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	40 e2       	ldi	r20, 0x20	; 32
     fce:	51 e4       	ldi	r21, 0x41	; 65
     fd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fd4:	dc 01       	movw	r26, r24
     fd6:	cb 01       	movw	r24, r22
     fd8:	bc 01       	movw	r22, r24
     fda:	cd 01       	movw	r24, r26
     fdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe0:	dc 01       	movw	r26, r24
     fe2:	cb 01       	movw	r24, r22
     fe4:	9e 83       	std	Y+6, r25	; 0x06
     fe6:	8d 83       	std	Y+5, r24	; 0x05
     fe8:	0f c0       	rjmp	.+30     	; 0x1008 <main+0x148>
     fea:	88 ec       	ldi	r24, 0xC8	; 200
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	9c 83       	std	Y+4, r25	; 0x04
     ff0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	9c 81       	ldd	r25, Y+4	; 0x04
     ff6:	01 97       	sbiw	r24, 0x01	; 1
     ff8:	f1 f7       	brne	.-4      	; 0xff6 <main+0x136>
     ffa:	9c 83       	std	Y+4, r25	; 0x04
     ffc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    1000:	9e 81       	ldd	r25, Y+6	; 0x06
    1002:	01 97       	sbiw	r24, 0x01	; 1
    1004:	9e 83       	std	Y+6, r25	; 0x06
    1006:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1008:	8d 81       	ldd	r24, Y+5	; 0x05
    100a:	9e 81       	ldd	r25, Y+6	; 0x06
    100c:	00 97       	sbiw	r24, 0x00	; 0
    100e:	69 f7       	brne	.-38     	; 0xfea <main+0x12a>
    1010:	14 c0       	rjmp	.+40     	; 0x103a <main+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1012:	6f 81       	ldd	r22, Y+7	; 0x07
    1014:	78 85       	ldd	r23, Y+8	; 0x08
    1016:	89 85       	ldd	r24, Y+9	; 0x09
    1018:	9a 85       	ldd	r25, Y+10	; 0x0a
    101a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    101e:	dc 01       	movw	r26, r24
    1020:	cb 01       	movw	r24, r22
    1022:	9e 83       	std	Y+6, r25	; 0x06
    1024:	8d 83       	std	Y+5, r24	; 0x05
    1026:	8d 81       	ldd	r24, Y+5	; 0x05
    1028:	9e 81       	ldd	r25, Y+6	; 0x06
    102a:	9a 83       	std	Y+2, r25	; 0x02
    102c:	89 83       	std	Y+1, r24	; 0x01
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	9a 81       	ldd	r25, Y+2	; 0x02
    1032:	01 97       	sbiw	r24, 0x01	; 1
    1034:	f1 f7       	brne	.-4      	; 0x1032 <main+0x172>
    1036:	9a 83       	std	Y+2, r25	; 0x02
    1038:	89 83       	std	Y+1, r24	; 0x01
	/* Timer 1 callback setting which used in timer 1 ISR */

	_delay_ms(10);
	/* Delay for EEPROM */

	SREG |= (1<<7);
    103a:	af e5       	ldi	r26, 0x5F	; 95
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	ef e5       	ldi	r30, 0x5F	; 95
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	80 68       	ori	r24, 0x80	; 128
    1046:	8c 93       	st	X, r24
	/*  I-bit enabled */

	while(  Creat_password( Arr1 ,SIZE ) != MATCHED_PASSWORDS );
    1048:	ce 01       	movw	r24, r28
    104a:	41 96       	adiw	r24, 0x11	; 17
    104c:	65 e0       	ldi	r22, 0x05	; 5
    104e:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <Creat_password>
    1052:	8a 30       	cpi	r24, 0x0A	; 10
    1054:	c9 f7       	brne	.-14     	; 0x1048 <main+0x188>
	 */


	while(1)
	{
		counter = 3;
    1056:	83 e0       	ldi	r24, 0x03	; 3
    1058:	8f 87       	std	Y+15, r24	; 0x0f
		/* number of chance to lock the system */

		key = UART_receiveByte() ;
    105a:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <UART_receiveByte>
    105e:	88 8b       	std	Y+16, r24	; 0x10
		/****************** main options ******************************************/

		if( key != '+' && key !='-' )
    1060:	88 89       	ldd	r24, Y+16	; 0x10
    1062:	8b 32       	cpi	r24, 0x2B	; 43
    1064:	31 f1       	breq	.+76     	; 0x10b2 <main+0x1f2>
    1066:	88 89       	ldd	r24, Y+16	; 0x10
    1068:	8d 32       	cpi	r24, 0x2D	; 45
    106a:	a9 f7       	brne	.-22     	; 0x1056 <main+0x196>
    106c:	22 c0       	rjmp	.+68     	; 0x10b2 <main+0x1f2>
		 * else program will do nothing .
		 */

		while ( Password_login(Arr1,SIZE) != MATCHED_PASSWORDS)
		{
			counter--;
    106e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1070:	81 50       	subi	r24, 0x01	; 1
    1072:	8f 87       	std	Y+15, r24	; 0x0f

			if( counter == 0 )
    1074:	8f 85       	ldd	r24, Y+15	; 0x0f
    1076:	88 23       	and	r24, r24
    1078:	e1 f4       	brne	.+56     	; 0x10b2 <main+0x1f2>
			{
				g_ticks=0;
    107a:	10 92 6f 01 	sts	0x016F, r1
    107e:	10 92 6e 01 	sts	0x016E, r1
    1082:	0d c0       	rjmp	.+26     	; 0x109e <main+0x1de>

				while( g_ticks <= 60)
				{
					if( g_ticks & 1 )
    1084:	80 91 6e 01 	lds	r24, 0x016E
    1088:	90 91 6f 01 	lds	r25, 0x016F
    108c:	81 70       	andi	r24, 0x01	; 1
    108e:	90 70       	andi	r25, 0x00	; 0
    1090:	88 23       	and	r24, r24
    1092:	19 f0       	breq	.+6      	; 0x109a <main+0x1da>
					{
						Buzzer_on();
    1094:	0e 94 61 06 	call	0xcc2	; 0xcc2 <Buzzer_on>
    1098:	02 c0       	rjmp	.+4      	; 0x109e <main+0x1de>
					}

					else
					{
						Buzzer_off();
    109a:	0e 94 6d 06 	call	0xcda	; 0xcda <Buzzer_off>

			if( counter == 0 )
			{
				g_ticks=0;

				while( g_ticks <= 60)
    109e:	80 91 6e 01 	lds	r24, 0x016E
    10a2:	90 91 6f 01 	lds	r25, 0x016F
    10a6:	8d 33       	cpi	r24, 0x3D	; 61
    10a8:	91 05       	cpc	r25, r1
    10aa:	60 f3       	brcs	.-40     	; 0x1084 <main+0x1c4>
					 * XXXX XXX0 & 1 = FALSE: if even second buzzer OFF.
					 */
				}
				/* alarm system ON after 3 consecutive wrong passwords for 60 seconds */

				Buzzer_off();
    10ac:	0e 94 6d 06 	call	0xcda	; 0xcda <Buzzer_off>
    10b0:	07 c0       	rjmp	.+14     	; 0x10c0 <main+0x200>
		}
		/* to make sure key is '-' or '+' only
		 * else program will do nothing .
		 */

		while ( Password_login(Arr1,SIZE) != MATCHED_PASSWORDS)
    10b2:	ce 01       	movw	r24, r28
    10b4:	41 96       	adiw	r24, 0x11	; 17
    10b6:	65 e0       	ldi	r22, 0x05	; 5
    10b8:	0e 94 25 07 	call	0xe4a	; 0xe4a <Password_login>
    10bc:	8a 30       	cpi	r24, 0x0A	; 10
    10be:	b9 f6       	brne	.-82     	; 0x106e <main+0x1ae>
		}
		/* if the Password_login function returned ( matched = True = 0x0A ) program will continue
		 * if returned ( unmatched = False = 0 )  program will ask again 2 more times  .
		 */

		if( counter == 0 )
    10c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    10c2:	88 23       	and	r24, r24
    10c4:	41 f2       	breq	.-112    	; 0x1056 <main+0x196>
		{
			continue;
		}
		/* to go back to main options*/

		if( key == '+' )
    10c6:	88 89       	ldd	r24, Y+16	; 0x10
    10c8:	8b 32       	cpi	r24, 0x2B	; 43
    10ca:	51 f5       	brne	.+84     	; 0x1120 <main+0x260>
			{
				g_ticks=0;
    10cc:	10 92 6f 01 	sts	0x016F, r1
    10d0:	10 92 6e 01 	sts	0x016E, r1

				DcMotor_Rotate( DC_MOTOR_CW ,100);
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	64 e6       	ldi	r22, 0x64	; 100
    10d8:	0e 94 bd 08 	call	0x117a	; 0x117a <DcMotor_Rotate>
				while( g_ticks != 15);
    10dc:	80 91 6e 01 	lds	r24, 0x016E
    10e0:	90 91 6f 01 	lds	r25, 0x016F
    10e4:	8f 30       	cpi	r24, 0x0F	; 15
    10e6:	91 05       	cpc	r25, r1
    10e8:	c9 f7       	brne	.-14     	; 0x10dc <main+0x21c>
				/* motor running clockwise for 15 sec */

				DcMotor_Rotate( DC_MOTOR_STOP ,0);
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	60 e0       	ldi	r22, 0x00	; 0
    10ee:	0e 94 bd 08 	call	0x117a	; 0x117a <DcMotor_Rotate>
				while( g_ticks != 18);
    10f2:	80 91 6e 01 	lds	r24, 0x016E
    10f6:	90 91 6f 01 	lds	r25, 0x016F
    10fa:	82 31       	cpi	r24, 0x12	; 18
    10fc:	91 05       	cpc	r25, r1
    10fe:	c9 f7       	brne	.-14     	; 0x10f2 <main+0x232>
				/* motor stopping for 3 sec */

				DcMotor_Rotate( DC_MOTOR_ACW ,100);
    1100:	82 e0       	ldi	r24, 0x02	; 2
    1102:	64 e6       	ldi	r22, 0x64	; 100
    1104:	0e 94 bd 08 	call	0x117a	; 0x117a <DcMotor_Rotate>
				while( g_ticks != 33);
    1108:	80 91 6e 01 	lds	r24, 0x016E
    110c:	90 91 6f 01 	lds	r25, 0x016F
    1110:	81 32       	cpi	r24, 0x21	; 33
    1112:	91 05       	cpc	r25, r1
    1114:	c9 f7       	brne	.-14     	; 0x1108 <main+0x248>
				/* motor running anti-clockwise for 15 sec */

				DcMotor_Rotate( DC_MOTOR_STOP ,0);
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	60 e0       	ldi	r22, 0x00	; 0
    111a:	0e 94 bd 08 	call	0x117a	; 0x117a <DcMotor_Rotate>
    111e:	9b cf       	rjmp	.-202    	; 0x1056 <main+0x196>
			}

		else
		{
			while(  Creat_password( Arr1 ,SIZE ) != MATCHED_PASSWORDS );
    1120:	ce 01       	movw	r24, r28
    1122:	41 96       	adiw	r24, 0x11	; 17
    1124:	65 e0       	ldi	r22, 0x05	; 5
    1126:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <Creat_password>
    112a:	8a 30       	cpi	r24, 0x0A	; 10
    112c:	c9 f7       	brne	.-14     	; 0x1120 <main+0x260>
    112e:	93 cf       	rjmp	.-218    	; 0x1056 <main+0x196>

00001130 <DcMotor_Init>:
#include "DcMotor.h"
#include"PWM.h"


void DcMotor_Init(void)
{
    1130:	df 93       	push	r29
    1132:	cf 93       	push	r28
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DCMOTOR_INT1_PORT,DCMOTOR_INT1_PIN, PIN_OUTPUT);
    1138:	83 e0       	ldi	r24, 0x03	; 3
    113a:	65 e0       	ldi	r22, 0x05	; 5
    113c:	41 e0       	ldi	r20, 0x01	; 1
    113e:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DCMOTOR_INT2_PORT,DCMOTOR_INT2_PIN, PIN_OUTPUT);
    1142:	83 e0       	ldi	r24, 0x03	; 3
    1144:	66 e0       	ldi	r22, 0x06	; 6
    1146:	41 e0       	ldi	r20, 0x01	; 1
    1148:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DCMOTOR_ENABLE1_PORT,DCMOTOR_ENABLE1_PIN, PIN_OUTPUT);
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	63 e0       	ldi	r22, 0x03	; 3
    1150:	41 e0       	ldi	r20, 0x01	; 1
    1152:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <GPIO_setupPinDirection>

	/*
	 * configure input1 , input2 and enable pin as O/P pins
	 */

	GPIO_writePin(DCMOTOR_INT1_PORT,DCMOTOR_INT1_PIN, LOGIC_LOW );
    1156:	83 e0       	ldi	r24, 0x03	; 3
    1158:	65 e0       	ldi	r22, 0x05	; 5
    115a:	40 e0       	ldi	r20, 0x00	; 0
    115c:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <GPIO_writePin>
	GPIO_writePin(DCMOTOR_INT2_PORT,DCMOTOR_INT2_PIN, LOGIC_LOW );
    1160:	83 e0       	ldi	r24, 0x03	; 3
    1162:	66 e0       	ldi	r22, 0x06	; 6
    1164:	40 e0       	ldi	r20, 0x00	; 0
    1166:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <GPIO_writePin>
	/*
	 * clearing input1 and input2 pins ( Motor is OFF )
	 */

	GPIO_writePin(DCMOTOR_ENABLE1_PORT,DCMOTOR_ENABLE1_PIN, LOGIC_LOW );
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	63 e0       	ldi	r22, 0x03	; 3
    116e:	40 e0       	ldi	r20, 0x00	; 0
    1170:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <GPIO_writePin>
	/* Clearing the enable1 pin */

}
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	08 95       	ret

0000117a <DcMotor_Rotate>:

void DcMotor_Rotate( DcMotor_State state , DcMotor_dutyCylce duty_cycle)
{
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	00 d0       	rcall	.+0      	; 0x1180 <DcMotor_Rotate+0x6>
    1180:	00 d0       	rcall	.+0      	; 0x1182 <DcMotor_Rotate+0x8>
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
    1186:	89 83       	std	Y+1, r24	; 0x01
    1188:	6a 83       	std	Y+2, r22	; 0x02
	switch(state)
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	3c 83       	std	Y+4, r19	; 0x04
    1192:	2b 83       	std	Y+3, r18	; 0x03
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	9c 81       	ldd	r25, Y+4	; 0x04
    1198:	81 30       	cpi	r24, 0x01	; 1
    119a:	91 05       	cpc	r25, r1
    119c:	a1 f0       	breq	.+40     	; 0x11c6 <DcMotor_Rotate+0x4c>
    119e:	2b 81       	ldd	r18, Y+3	; 0x03
    11a0:	3c 81       	ldd	r19, Y+4	; 0x04
    11a2:	22 30       	cpi	r18, 0x02	; 2
    11a4:	31 05       	cpc	r19, r1
    11a6:	a9 f0       	breq	.+42     	; 0x11d2 <DcMotor_Rotate+0x58>
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	9c 81       	ldd	r25, Y+4	; 0x04
    11ac:	00 97       	sbiw	r24, 0x00	; 0
    11ae:	b1 f4       	brne	.+44     	; 0x11dc <DcMotor_Rotate+0x62>
	{
	case 0 :
		GPIO_writePin(DCMOTOR_INT1_PORT,DCMOTOR_INT1_PIN, LOGIC_LOW );
    11b0:	83 e0       	ldi	r24, 0x03	; 3
    11b2:	65 e0       	ldi	r22, 0x05	; 5
    11b4:	40 e0       	ldi	r20, 0x00	; 0
    11b6:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <GPIO_writePin>
		GPIO_writePin(DCMOTOR_INT2_PORT,DCMOTOR_INT2_PIN, LOGIC_LOW );
    11ba:	83 e0       	ldi	r24, 0x03	; 3
    11bc:	66 e0       	ldi	r22, 0x06	; 6
    11be:	40 e0       	ldi	r20, 0x00	; 0
    11c0:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <GPIO_writePin>
    11c4:	0b c0       	rjmp	.+22     	; 0x11dc <DcMotor_Rotate+0x62>
		/*
		 * clearing input1 and input2 ( Motor is OFF )
		 */

	case 1 :
			GPIO_writePin(DCMOTOR_INT2_PORT,DCMOTOR_INT2_PIN, LOGIC_HIGH );
    11c6:	83 e0       	ldi	r24, 0x03	; 3
    11c8:	66 e0       	ldi	r22, 0x06	; 6
    11ca:	41 e0       	ldi	r20, 0x01	; 1
    11cc:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <GPIO_writePin>
    11d0:	05 c0       	rjmp	.+10     	; 0x11dc <DcMotor_Rotate+0x62>
			/*
			 * SET input2 ( Motor is ON Clockwise )
			 */

	case 2 :
			GPIO_writePin(DCMOTOR_INT1_PORT,DCMOTOR_INT1_PIN, LOGIC_HIGH );
    11d2:	83 e0       	ldi	r24, 0x03	; 3
    11d4:	65 e0       	ldi	r22, 0x05	; 5
    11d6:	41 e0       	ldi	r20, 0x01	; 1
    11d8:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <GPIO_writePin>
			 * SET input1 ( Motor is ON Anti-Clockwise )
			 */

	}

	PWM_Timer0_Start(duty_cycle);
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <PWM_Timer0_Start>

}
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	cf 91       	pop	r28
    11ec:	df 91       	pop	r29
    11ee:	08 95       	ret

000011f0 <EEPROM_writeByte>:
/*
 * Description :
 * Function for sending byte to EEPROM device by using I2C .
 */
uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	00 d0       	rcall	.+0      	; 0x11f6 <EEPROM_writeByte+0x6>
    11f6:	00 d0       	rcall	.+0      	; 0x11f8 <EEPROM_writeByte+0x8>
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
    11fc:	9a 83       	std	Y+2, r25	; 0x02
    11fe:	89 83       	std	Y+1, r24	; 0x01
    1200:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1202:	0e 94 12 0b 	call	0x1624	; 0x1624 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1206:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <TWI_getStatus>
    120a:	88 30       	cpi	r24, 0x08	; 8
    120c:	11 f0       	breq	.+4      	; 0x1212 <EEPROM_writeByte+0x22>
        return ERROR;
    120e:	1c 82       	std	Y+4, r1	; 0x04
    1210:	28 c0       	rjmp	.+80     	; 0x1262 <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	9a 81       	ldd	r25, Y+2	; 0x02
    1216:	80 70       	andi	r24, 0x00	; 0
    1218:	97 70       	andi	r25, 0x07	; 7
    121a:	88 0f       	add	r24, r24
    121c:	89 2f       	mov	r24, r25
    121e:	88 1f       	adc	r24, r24
    1220:	99 0b       	sbc	r25, r25
    1222:	91 95       	neg	r25
    1224:	80 6a       	ori	r24, 0xA0	; 160
    1226:	0e 94 2d 0b 	call	0x165a	; 0x165a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    122a:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <TWI_getStatus>
    122e:	88 31       	cpi	r24, 0x18	; 24
    1230:	11 f0       	breq	.+4      	; 0x1236 <EEPROM_writeByte+0x46>
        return ERROR;
    1232:	1c 82       	std	Y+4, r1	; 0x04
    1234:	16 c0       	rjmp	.+44     	; 0x1262 <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	0e 94 2d 0b 	call	0x165a	; 0x165a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    123c:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <TWI_getStatus>
    1240:	88 32       	cpi	r24, 0x28	; 40
    1242:	11 f0       	breq	.+4      	; 0x1248 <EEPROM_writeByte+0x58>
        return ERROR;
    1244:	1c 82       	std	Y+4, r1	; 0x04
    1246:	0d c0       	rjmp	.+26     	; 0x1262 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	0e 94 2d 0b 	call	0x165a	; 0x165a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    124e:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <TWI_getStatus>
    1252:	88 32       	cpi	r24, 0x28	; 40
    1254:	11 f0       	breq	.+4      	; 0x125a <EEPROM_writeByte+0x6a>
        return ERROR;
    1256:	1c 82       	std	Y+4, r1	; 0x04
    1258:	04 c0       	rjmp	.+8      	; 0x1262 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    125a:	0e 94 22 0b 	call	0x1644	; 0x1644 <TWI_stop>

    return SUCCESS;
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	8c 83       	std	Y+4, r24	; 0x04
    1262:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	cf 91       	pop	r28
    126e:	df 91       	pop	r29
    1270:	08 95       	ret

00001272 <EEPROM_readByte>:
/*
 * Description :
 * Function for receiving byte from EEPROM device by using I2C .
 */
uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1272:	df 93       	push	r29
    1274:	cf 93       	push	r28
    1276:	00 d0       	rcall	.+0      	; 0x1278 <EEPROM_readByte+0x6>
    1278:	00 d0       	rcall	.+0      	; 0x127a <EEPROM_readByte+0x8>
    127a:	0f 92       	push	r0
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
    1280:	9a 83       	std	Y+2, r25	; 0x02
    1282:	89 83       	std	Y+1, r24	; 0x01
    1284:	7c 83       	std	Y+4, r23	; 0x04
    1286:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1288:	0e 94 12 0b 	call	0x1624	; 0x1624 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    128c:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <TWI_getStatus>
    1290:	88 30       	cpi	r24, 0x08	; 8
    1292:	11 f0       	breq	.+4      	; 0x1298 <EEPROM_readByte+0x26>
        return ERROR;
    1294:	1d 82       	std	Y+5, r1	; 0x05
    1296:	44 c0       	rjmp	.+136    	; 0x1320 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	9a 81       	ldd	r25, Y+2	; 0x02
    129c:	80 70       	andi	r24, 0x00	; 0
    129e:	97 70       	andi	r25, 0x07	; 7
    12a0:	88 0f       	add	r24, r24
    12a2:	89 2f       	mov	r24, r25
    12a4:	88 1f       	adc	r24, r24
    12a6:	99 0b       	sbc	r25, r25
    12a8:	91 95       	neg	r25
    12aa:	80 6a       	ori	r24, 0xA0	; 160
    12ac:	0e 94 2d 0b 	call	0x165a	; 0x165a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    12b0:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <TWI_getStatus>
    12b4:	88 31       	cpi	r24, 0x18	; 24
    12b6:	11 f0       	breq	.+4      	; 0x12bc <EEPROM_readByte+0x4a>
        return ERROR;
    12b8:	1d 82       	std	Y+5, r1	; 0x05
    12ba:	32 c0       	rjmp	.+100    	; 0x1320 <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	0e 94 2d 0b 	call	0x165a	; 0x165a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    12c2:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <TWI_getStatus>
    12c6:	88 32       	cpi	r24, 0x28	; 40
    12c8:	11 f0       	breq	.+4      	; 0x12ce <EEPROM_readByte+0x5c>
        return ERROR;
    12ca:	1d 82       	std	Y+5, r1	; 0x05
    12cc:	29 c0       	rjmp	.+82     	; 0x1320 <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    12ce:	0e 94 12 0b 	call	0x1624	; 0x1624 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    12d2:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <TWI_getStatus>
    12d6:	80 31       	cpi	r24, 0x10	; 16
    12d8:	11 f0       	breq	.+4      	; 0x12de <EEPROM_readByte+0x6c>
        return ERROR;
    12da:	1d 82       	std	Y+5, r1	; 0x05
    12dc:	21 c0       	rjmp	.+66     	; 0x1320 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    12de:	89 81       	ldd	r24, Y+1	; 0x01
    12e0:	9a 81       	ldd	r25, Y+2	; 0x02
    12e2:	80 70       	andi	r24, 0x00	; 0
    12e4:	97 70       	andi	r25, 0x07	; 7
    12e6:	88 0f       	add	r24, r24
    12e8:	89 2f       	mov	r24, r25
    12ea:	88 1f       	adc	r24, r24
    12ec:	99 0b       	sbc	r25, r25
    12ee:	91 95       	neg	r25
    12f0:	81 6a       	ori	r24, 0xA1	; 161
    12f2:	0e 94 2d 0b 	call	0x165a	; 0x165a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    12f6:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <TWI_getStatus>
    12fa:	80 34       	cpi	r24, 0x40	; 64
    12fc:	11 f0       	breq	.+4      	; 0x1302 <EEPROM_readByte+0x90>
        return ERROR;
    12fe:	1d 82       	std	Y+5, r1	; 0x05
    1300:	0f c0       	rjmp	.+30     	; 0x1320 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1302:	0e 94 57 0b 	call	0x16ae	; 0x16ae <TWI_readByteWithNACK>
    1306:	eb 81       	ldd	r30, Y+3	; 0x03
    1308:	fc 81       	ldd	r31, Y+4	; 0x04
    130a:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    130c:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <TWI_getStatus>
    1310:	88 35       	cpi	r24, 0x58	; 88
    1312:	11 f0       	breq	.+4      	; 0x1318 <EEPROM_readByte+0xa6>
        return ERROR;
    1314:	1d 82       	std	Y+5, r1	; 0x05
    1316:	04 c0       	rjmp	.+8      	; 0x1320 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1318:	0e 94 22 0b 	call	0x1644	; 0x1644 <TWI_stop>

    return SUCCESS;
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	8d 83       	std	Y+5, r24	; 0x05
    1320:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	cf 91       	pop	r28
    132e:	df 91       	pop	r29
    1330:	08 95       	ret

00001332 <EEPROM_writeArray>:

void EEPROM_writeArray(uint16 frist_address,const uint8 * a_array , uint8 size)
{
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	64 97       	sbiw	r28, 0x14	; 20
    133c:	0f b6       	in	r0, 0x3f	; 63
    133e:	f8 94       	cli
    1340:	de bf       	out	0x3e, r29	; 62
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	cd bf       	out	0x3d, r28	; 61
    1346:	99 8b       	std	Y+17, r25	; 0x11
    1348:	88 8b       	std	Y+16, r24	; 0x10
    134a:	7b 8b       	std	Y+19, r23	; 0x13
    134c:	6a 8b       	std	Y+18, r22	; 0x12
    134e:	4c 8b       	std	Y+20, r20	; 0x14
	uint8 counter=0;
    1350:	1f 86       	std	Y+15, r1	; 0x0f
    1352:	8a c0       	rjmp	.+276    	; 0x1468 <EEPROM_writeArray+0x136>

	while(counter <= (size-1) )
	{
		EEPROM_writeByte( ( counter + frist_address ) , a_array[counter]);
    1354:	8f 85       	ldd	r24, Y+15	; 0x0f
    1356:	28 2f       	mov	r18, r24
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	88 89       	ldd	r24, Y+16	; 0x10
    135c:	99 89       	ldd	r25, Y+17	; 0x11
    135e:	a9 01       	movw	r20, r18
    1360:	48 0f       	add	r20, r24
    1362:	59 1f       	adc	r21, r25
    1364:	8f 85       	ldd	r24, Y+15	; 0x0f
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	8a 89       	ldd	r24, Y+18	; 0x12
    136c:	9b 89       	ldd	r25, Y+19	; 0x13
    136e:	fc 01       	movw	r30, r24
    1370:	e2 0f       	add	r30, r18
    1372:	f3 1f       	adc	r31, r19
    1374:	20 81       	ld	r18, Z
    1376:	ca 01       	movw	r24, r20
    1378:	62 2f       	mov	r22, r18
    137a:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <EEPROM_writeByte>

		counter++;
    137e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1380:	8f 5f       	subi	r24, 0xFF	; 255
    1382:	8f 87       	std	Y+15, r24	; 0x0f
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	a0 e2       	ldi	r26, 0x20	; 32
    138a:	b1 e4       	ldi	r27, 0x41	; 65
    138c:	8b 87       	std	Y+11, r24	; 0x0b
    138e:	9c 87       	std	Y+12, r25	; 0x0c
    1390:	ad 87       	std	Y+13, r26	; 0x0d
    1392:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1394:	6b 85       	ldd	r22, Y+11	; 0x0b
    1396:	7c 85       	ldd	r23, Y+12	; 0x0c
    1398:	8d 85       	ldd	r24, Y+13	; 0x0d
    139a:	9e 85       	ldd	r25, Y+14	; 0x0e
    139c:	20 e0       	ldi	r18, 0x00	; 0
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	4a ef       	ldi	r20, 0xFA	; 250
    13a2:	54 e4       	ldi	r21, 0x44	; 68
    13a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a8:	dc 01       	movw	r26, r24
    13aa:	cb 01       	movw	r24, r22
    13ac:	8f 83       	std	Y+7, r24	; 0x07
    13ae:	98 87       	std	Y+8, r25	; 0x08
    13b0:	a9 87       	std	Y+9, r26	; 0x09
    13b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13b4:	6f 81       	ldd	r22, Y+7	; 0x07
    13b6:	78 85       	ldd	r23, Y+8	; 0x08
    13b8:	89 85       	ldd	r24, Y+9	; 0x09
    13ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	40 e8       	ldi	r20, 0x80	; 128
    13c2:	5f e3       	ldi	r21, 0x3F	; 63
    13c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13c8:	88 23       	and	r24, r24
    13ca:	2c f4       	brge	.+10     	; 0x13d6 <EEPROM_writeArray+0xa4>
		__ticks = 1;
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	9e 83       	std	Y+6, r25	; 0x06
    13d2:	8d 83       	std	Y+5, r24	; 0x05
    13d4:	3f c0       	rjmp	.+126    	; 0x1454 <EEPROM_writeArray+0x122>
	else if (__tmp > 65535)
    13d6:	6f 81       	ldd	r22, Y+7	; 0x07
    13d8:	78 85       	ldd	r23, Y+8	; 0x08
    13da:	89 85       	ldd	r24, Y+9	; 0x09
    13dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	3f ef       	ldi	r19, 0xFF	; 255
    13e2:	4f e7       	ldi	r20, 0x7F	; 127
    13e4:	57 e4       	ldi	r21, 0x47	; 71
    13e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13ea:	18 16       	cp	r1, r24
    13ec:	4c f5       	brge	.+82     	; 0x1440 <EEPROM_writeArray+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    13f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    13f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    13f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	40 e2       	ldi	r20, 0x20	; 32
    13fc:	51 e4       	ldi	r21, 0x41	; 65
    13fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1402:	dc 01       	movw	r26, r24
    1404:	cb 01       	movw	r24, r22
    1406:	bc 01       	movw	r22, r24
    1408:	cd 01       	movw	r24, r26
    140a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    140e:	dc 01       	movw	r26, r24
    1410:	cb 01       	movw	r24, r22
    1412:	9e 83       	std	Y+6, r25	; 0x06
    1414:	8d 83       	std	Y+5, r24	; 0x05
    1416:	0f c0       	rjmp	.+30     	; 0x1436 <EEPROM_writeArray+0x104>
    1418:	88 ec       	ldi	r24, 0xC8	; 200
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	9c 83       	std	Y+4, r25	; 0x04
    141e:	8b 83       	std	Y+3, r24	; 0x03
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	9c 81       	ldd	r25, Y+4	; 0x04
    1424:	01 97       	sbiw	r24, 0x01	; 1
    1426:	f1 f7       	brne	.-4      	; 0x1424 <EEPROM_writeArray+0xf2>
    1428:	9c 83       	std	Y+4, r25	; 0x04
    142a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    142c:	8d 81       	ldd	r24, Y+5	; 0x05
    142e:	9e 81       	ldd	r25, Y+6	; 0x06
    1430:	01 97       	sbiw	r24, 0x01	; 1
    1432:	9e 83       	std	Y+6, r25	; 0x06
    1434:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1436:	8d 81       	ldd	r24, Y+5	; 0x05
    1438:	9e 81       	ldd	r25, Y+6	; 0x06
    143a:	00 97       	sbiw	r24, 0x00	; 0
    143c:	69 f7       	brne	.-38     	; 0x1418 <EEPROM_writeArray+0xe6>
    143e:	14 c0       	rjmp	.+40     	; 0x1468 <EEPROM_writeArray+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1440:	6f 81       	ldd	r22, Y+7	; 0x07
    1442:	78 85       	ldd	r23, Y+8	; 0x08
    1444:	89 85       	ldd	r24, Y+9	; 0x09
    1446:	9a 85       	ldd	r25, Y+10	; 0x0a
    1448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    144c:	dc 01       	movw	r26, r24
    144e:	cb 01       	movw	r24, r22
    1450:	9e 83       	std	Y+6, r25	; 0x06
    1452:	8d 83       	std	Y+5, r24	; 0x05
    1454:	8d 81       	ldd	r24, Y+5	; 0x05
    1456:	9e 81       	ldd	r25, Y+6	; 0x06
    1458:	9a 83       	std	Y+2, r25	; 0x02
    145a:	89 83       	std	Y+1, r24	; 0x01
    145c:	89 81       	ldd	r24, Y+1	; 0x01
    145e:	9a 81       	ldd	r25, Y+2	; 0x02
    1460:	01 97       	sbiw	r24, 0x01	; 1
    1462:	f1 f7       	brne	.-4      	; 0x1460 <EEPROM_writeArray+0x12e>
    1464:	9a 83       	std	Y+2, r25	; 0x02
    1466:	89 83       	std	Y+1, r24	; 0x01

void EEPROM_writeArray(uint16 frist_address,const uint8 * a_array , uint8 size)
{
	uint8 counter=0;

	while(counter <= (size-1) )
    1468:	8f 85       	ldd	r24, Y+15	; 0x0f
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	8c 89       	ldd	r24, Y+20	; 0x14
    1470:	88 2f       	mov	r24, r24
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	01 97       	sbiw	r24, 0x01	; 1
    1476:	82 17       	cp	r24, r18
    1478:	93 07       	cpc	r25, r19
    147a:	0c f0       	brlt	.+2      	; 0x147e <EEPROM_writeArray+0x14c>
    147c:	6b cf       	rjmp	.-298    	; 0x1354 <EEPROM_writeArray+0x22>
		counter++;

		_delay_ms(10);

	}
}
    147e:	64 96       	adiw	r28, 0x14	; 20
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	f8 94       	cli
    1484:	de bf       	out	0x3e, r29	; 62
    1486:	0f be       	out	0x3f, r0	; 63
    1488:	cd bf       	out	0x3d, r28	; 61
    148a:	cf 91       	pop	r28
    148c:	df 91       	pop	r29
    148e:	08 95       	ret

00001490 <EEPROM_readArray>:

void EEPROM_readArray(uint16 frist_address,const uint8 * a_array , uint8 size)
{
    1490:	df 93       	push	r29
    1492:	cf 93       	push	r28
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
    1498:	64 97       	sbiw	r28, 0x14	; 20
    149a:	0f b6       	in	r0, 0x3f	; 63
    149c:	f8 94       	cli
    149e:	de bf       	out	0x3e, r29	; 62
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	cd bf       	out	0x3d, r28	; 61
    14a4:	99 8b       	std	Y+17, r25	; 0x11
    14a6:	88 8b       	std	Y+16, r24	; 0x10
    14a8:	7b 8b       	std	Y+19, r23	; 0x13
    14aa:	6a 8b       	std	Y+18, r22	; 0x12
    14ac:	4c 8b       	std	Y+20, r20	; 0x14
	uint8 counter=0;
    14ae:	1f 86       	std	Y+15, r1	; 0x0f
    14b0:	88 c0       	rjmp	.+272    	; 0x15c2 <EEPROM_readArray+0x132>

	while(counter <= (size-1) )
	{
		EEPROM_readByte( ( counter + frist_address ) , (a_array+counter) );
    14b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	88 89       	ldd	r24, Y+16	; 0x10
    14ba:	99 89       	ldd	r25, Y+17	; 0x11
    14bc:	a9 01       	movw	r20, r18
    14be:	48 0f       	add	r20, r24
    14c0:	59 1f       	adc	r21, r25
    14c2:	2a 89       	ldd	r18, Y+18	; 0x12
    14c4:	3b 89       	ldd	r19, Y+19	; 0x13
    14c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    14c8:	88 2f       	mov	r24, r24
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	28 0f       	add	r18, r24
    14ce:	39 1f       	adc	r19, r25
    14d0:	ca 01       	movw	r24, r20
    14d2:	b9 01       	movw	r22, r18
    14d4:	0e 94 39 09 	call	0x1272	; 0x1272 <EEPROM_readByte>

		counter++;
    14d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    14da:	8f 5f       	subi	r24, 0xFF	; 255
    14dc:	8f 87       	std	Y+15, r24	; 0x0f
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	a0 e2       	ldi	r26, 0x20	; 32
    14e4:	b1 e4       	ldi	r27, 0x41	; 65
    14e6:	8b 87       	std	Y+11, r24	; 0x0b
    14e8:	9c 87       	std	Y+12, r25	; 0x0c
    14ea:	ad 87       	std	Y+13, r26	; 0x0d
    14ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    14f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    14f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    14f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	4a ef       	ldi	r20, 0xFA	; 250
    14fc:	54 e4       	ldi	r21, 0x44	; 68
    14fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1502:	dc 01       	movw	r26, r24
    1504:	cb 01       	movw	r24, r22
    1506:	8f 83       	std	Y+7, r24	; 0x07
    1508:	98 87       	std	Y+8, r25	; 0x08
    150a:	a9 87       	std	Y+9, r26	; 0x09
    150c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    150e:	6f 81       	ldd	r22, Y+7	; 0x07
    1510:	78 85       	ldd	r23, Y+8	; 0x08
    1512:	89 85       	ldd	r24, Y+9	; 0x09
    1514:	9a 85       	ldd	r25, Y+10	; 0x0a
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	40 e8       	ldi	r20, 0x80	; 128
    151c:	5f e3       	ldi	r21, 0x3F	; 63
    151e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1522:	88 23       	and	r24, r24
    1524:	2c f4       	brge	.+10     	; 0x1530 <EEPROM_readArray+0xa0>
		__ticks = 1;
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	9e 83       	std	Y+6, r25	; 0x06
    152c:	8d 83       	std	Y+5, r24	; 0x05
    152e:	3f c0       	rjmp	.+126    	; 0x15ae <EEPROM_readArray+0x11e>
	else if (__tmp > 65535)
    1530:	6f 81       	ldd	r22, Y+7	; 0x07
    1532:	78 85       	ldd	r23, Y+8	; 0x08
    1534:	89 85       	ldd	r24, Y+9	; 0x09
    1536:	9a 85       	ldd	r25, Y+10	; 0x0a
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	3f ef       	ldi	r19, 0xFF	; 255
    153c:	4f e7       	ldi	r20, 0x7F	; 127
    153e:	57 e4       	ldi	r21, 0x47	; 71
    1540:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1544:	18 16       	cp	r1, r24
    1546:	4c f5       	brge	.+82     	; 0x159a <EEPROM_readArray+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1548:	6b 85       	ldd	r22, Y+11	; 0x0b
    154a:	7c 85       	ldd	r23, Y+12	; 0x0c
    154c:	8d 85       	ldd	r24, Y+13	; 0x0d
    154e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	40 e2       	ldi	r20, 0x20	; 32
    1556:	51 e4       	ldi	r21, 0x41	; 65
    1558:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    155c:	dc 01       	movw	r26, r24
    155e:	cb 01       	movw	r24, r22
    1560:	bc 01       	movw	r22, r24
    1562:	cd 01       	movw	r24, r26
    1564:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1568:	dc 01       	movw	r26, r24
    156a:	cb 01       	movw	r24, r22
    156c:	9e 83       	std	Y+6, r25	; 0x06
    156e:	8d 83       	std	Y+5, r24	; 0x05
    1570:	0f c0       	rjmp	.+30     	; 0x1590 <EEPROM_readArray+0x100>
    1572:	88 ec       	ldi	r24, 0xC8	; 200
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	9c 83       	std	Y+4, r25	; 0x04
    1578:	8b 83       	std	Y+3, r24	; 0x03
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	9c 81       	ldd	r25, Y+4	; 0x04
    157e:	01 97       	sbiw	r24, 0x01	; 1
    1580:	f1 f7       	brne	.-4      	; 0x157e <EEPROM_readArray+0xee>
    1582:	9c 83       	std	Y+4, r25	; 0x04
    1584:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1586:	8d 81       	ldd	r24, Y+5	; 0x05
    1588:	9e 81       	ldd	r25, Y+6	; 0x06
    158a:	01 97       	sbiw	r24, 0x01	; 1
    158c:	9e 83       	std	Y+6, r25	; 0x06
    158e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1590:	8d 81       	ldd	r24, Y+5	; 0x05
    1592:	9e 81       	ldd	r25, Y+6	; 0x06
    1594:	00 97       	sbiw	r24, 0x00	; 0
    1596:	69 f7       	brne	.-38     	; 0x1572 <EEPROM_readArray+0xe2>
    1598:	14 c0       	rjmp	.+40     	; 0x15c2 <EEPROM_readArray+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    159a:	6f 81       	ldd	r22, Y+7	; 0x07
    159c:	78 85       	ldd	r23, Y+8	; 0x08
    159e:	89 85       	ldd	r24, Y+9	; 0x09
    15a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a6:	dc 01       	movw	r26, r24
    15a8:	cb 01       	movw	r24, r22
    15aa:	9e 83       	std	Y+6, r25	; 0x06
    15ac:	8d 83       	std	Y+5, r24	; 0x05
    15ae:	8d 81       	ldd	r24, Y+5	; 0x05
    15b0:	9e 81       	ldd	r25, Y+6	; 0x06
    15b2:	9a 83       	std	Y+2, r25	; 0x02
    15b4:	89 83       	std	Y+1, r24	; 0x01
    15b6:	89 81       	ldd	r24, Y+1	; 0x01
    15b8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ba:	01 97       	sbiw	r24, 0x01	; 1
    15bc:	f1 f7       	brne	.-4      	; 0x15ba <EEPROM_readArray+0x12a>
    15be:	9a 83       	std	Y+2, r25	; 0x02
    15c0:	89 83       	std	Y+1, r24	; 0x01

void EEPROM_readArray(uint16 frist_address,const uint8 * a_array , uint8 size)
{
	uint8 counter=0;

	while(counter <= (size-1) )
    15c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	8c 89       	ldd	r24, Y+20	; 0x14
    15ca:	88 2f       	mov	r24, r24
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	01 97       	sbiw	r24, 0x01	; 1
    15d0:	82 17       	cp	r24, r18
    15d2:	93 07       	cpc	r25, r19
    15d4:	0c f0       	brlt	.+2      	; 0x15d8 <EEPROM_readArray+0x148>
    15d6:	6d cf       	rjmp	.-294    	; 0x14b2 <EEPROM_readArray+0x22>
		counter++;

		_delay_ms(10);

	}
}
    15d8:	64 96       	adiw	r28, 0x14	; 20
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	f8 94       	cli
    15de:	de bf       	out	0x3e, r29	; 62
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	cd bf       	out	0x3d, r28	; 61
    15e4:	cf 91       	pop	r28
    15e6:	df 91       	pop	r29
    15e8:	08 95       	ret

000015ea <TWI_init>:
 * 3.enable the TWI module .
 * note : we configured TWI pre-scaler = 1 which is default
 * 		  so we didn't need to initialize that .
 */
void TWI_init( const TWI_ConfigType * Config_Ptr )
{
    15ea:	df 93       	push	r29
    15ec:	cf 93       	push	r28
    15ee:	00 d0       	rcall	.+0      	; 0x15f0 <TWI_init+0x6>
    15f0:	cd b7       	in	r28, 0x3d	; 61
    15f2:	de b7       	in	r29, 0x3e	; 62
    15f4:	9a 83       	std	Y+2, r25	; 0x02
    15f6:	89 83       	std	Y+1, r24	; 0x01
	TWBR = Config_Ptr->bit_rate;
    15f8:	a0 e2       	ldi	r26, 0x20	; 32
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e9 81       	ldd	r30, Y+1	; 0x01
    15fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1600:	81 81       	ldd	r24, Z+1	; 0x01
    1602:	8c 93       	st	X, r24
	/* configure TWI bit rate by initialize ( TWBR ) register */

	TWAR = (Config_Ptr->address<<1);
    1604:	a2 e2       	ldi	r26, 0x22	; 34
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e9 81       	ldd	r30, Y+1	; 0x01
    160a:	fa 81       	ldd	r31, Y+2	; 0x02
    160c:	80 81       	ld	r24, Z
    160e:	88 0f       	add	r24, r24
    1610:	8c 93       	st	X, r24
	/* configure address by initialize ( TWAR ) register */

	TWCR = (1<<TWEN)  ;
    1612:	e6 e5       	ldi	r30, 0x56	; 86
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	84 e0       	ldi	r24, 0x04	; 4
    1618:	80 83       	st	Z, r24
	/* TWI module enabled by setting ( TWEN ) bit */
}
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	cf 91       	pop	r28
    1620:	df 91       	pop	r29
    1622:	08 95       	ret

00001624 <TWI_start>:

/*
 * description : function for starting TWI operation .
 */
void TWI_start(void)
{
    1624:	df 93       	push	r29
    1626:	cf 93       	push	r28
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWEN) | (1<<TWSTA) | (1<<TWINT);
    162c:	e6 e5       	ldi	r30, 0x56	; 86
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	84 ea       	ldi	r24, 0xA4	; 164
    1632:	80 83       	st	Z, r24
	 * 1.TWI module enabled by setting ( TWEN ) bit.
	 * 2.TWI start operation enabled by setting ( TWSTA ) bit.
	 * 3.TWI flag cleared by setting ( TWINT ) bit.
	 */

	while( BIT_IS_CLEAR(TWCR,TWINT) ){}
    1634:	e6 e5       	ldi	r30, 0x56	; 86
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	88 23       	and	r24, r24
    163c:	dc f7       	brge	.-10     	; 0x1634 <TWI_start+0x10>
	/* polling to make sure start operation completed by checking TWI flag ( TWINT ) bit */
}
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	08 95       	ret

00001644 <TWI_stop>:

/*
 * description : function for stopping TWI operation .
 */
void TWI_stop(void)
{
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWEN) | (1<<TWSTO) | (1<<TWINT);
    164c:	e6 e5       	ldi	r30, 0x56	; 86
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	84 e9       	ldi	r24, 0x94	; 148
    1652:	80 83       	st	Z, r24
	/*
	 * 1.TWI module enabled by setting ( TWEN ) bit.
	 * 2.TWI stop operation enabled by setting ( TWSTO ) bit.
	 * 3.TWI flag cleared by setting ( TWINT ) bit.
	 */
}
    1654:	cf 91       	pop	r28
    1656:	df 91       	pop	r29
    1658:	08 95       	ret

0000165a <TWI_writeByte>:
/*
 * Description :
 * Function for sending byte to another device by using I2C .
 */
void TWI_writeByte( uint8 data )
{
    165a:	df 93       	push	r29
    165c:	cf 93       	push	r28
    165e:	0f 92       	push	r0
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
    1664:	89 83       	std	Y+1, r24	; 0x01
	TWDR = data ;
    1666:	e3 e2       	ldi	r30, 0x23	; 35
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	80 83       	st	Z, r24
	/*	Transfer the data from the memory to the data register .
	 * 	note : TWDR contains the next byte to be transmitted or received .
	 */

	TWCR = (1<<TWEN) | (1<<TWINT);
    166e:	e6 e5       	ldi	r30, 0x56	; 86
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	84 e8       	ldi	r24, 0x84	; 132
    1674:	80 83       	st	Z, r24
		/*
		 * 1.TWI module enabled by setting ( TWEN ) bit.
		 * 2.TWI flag cleared by setting ( TWINT ) bit.
		 */
	while( BIT_IS_CLEAR(TWCR,TWINT) ){}
    1676:	e6 e5       	ldi	r30, 0x56	; 86
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	88 23       	and	r24, r24
    167e:	dc f7       	brge	.-10     	; 0x1676 <TWI_writeByte+0x1c>
	/* polling to make sure sending operation completed by checking TWI flag ( TWINT ) bit */
}
    1680:	0f 90       	pop	r0
    1682:	cf 91       	pop	r28
    1684:	df 91       	pop	r29
    1686:	08 95       	ret

00001688 <TWI_readByteWithACK>:
/*
 * Description :
 * Function for receiving byte from another device by using I2C .
 */
uint8 TWI_readByteWithACK( void )
{
    1688:	df 93       	push	r29
    168a:	cf 93       	push	r28
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWEA);
    1690:	e6 e5       	ldi	r30, 0x56	; 86
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	84 ec       	ldi	r24, 0xC4	; 196
    1696:	80 83       	st	Z, r24
		/*
		 * 1.TWI module enabled by setting ( TWEN ) bit.
		 * 2.TWI flag cleared by setting ( TWINT ) bit.
		 * 3.TWI Ack enabled by setting ( TWEA ) bit.
		 */
	while( BIT_IS_CLEAR(TWCR,TWINT) ){}
    1698:	e6 e5       	ldi	r30, 0x56	; 86
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	88 23       	and	r24, r24
    16a0:	dc f7       	brge	.-10     	; 0x1698 <TWI_readByteWithACK+0x10>
	/* polling to make sure receiving operation completed by checking TWI flag ( TWINT ) bit */

	return TWDR ;
    16a2:	e3 e2       	ldi	r30, 0x23	; 35
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
	/*	Transfer the data from the data register to the memory.
	 * 	note : TWDR contains the next byte to be transmitted or received .
	 */
}
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	08 95       	ret

000016ae <TWI_readByteWithNACK>:
 * Description :
 * Function for receiving byte from another device by using I2C .
 * note : ( only for master ) to end communication with slave.
 */
uint8 TWI_readByteWithNACK( void )
{
    16ae:	df 93       	push	r29
    16b0:	cf 93       	push	r28
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWEN) | (1<<TWINT) ;
    16b6:	e6 e5       	ldi	r30, 0x56	; 86
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	84 e8       	ldi	r24, 0x84	; 132
    16bc:	80 83       	st	Z, r24
		/*
		 * 1.TWI module enabled by setting ( TWEN ) bit.
		 * 2.TWI flag cleared by setting ( TWINT ) bit.
		 */
	while( BIT_IS_CLEAR(TWCR,TWINT) ){}
    16be:	e6 e5       	ldi	r30, 0x56	; 86
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	88 23       	and	r24, r24
    16c6:	dc f7       	brge	.-10     	; 0x16be <TWI_readByteWithNACK+0x10>
	/* polling to make sure receiving operation completed by checking TWI flag ( TWINT ) bit */

	return TWDR ;
    16c8:	e3 e2       	ldi	r30, 0x23	; 35
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
	/*	Transfer the data from the data register to the memory.
	 * 	note : TWDR contains the next byte to be transmitted or received .
	 */
}
    16ce:	cf 91       	pop	r28
    16d0:	df 91       	pop	r29
    16d2:	08 95       	ret

000016d4 <TWI_getStatus>:
/*
 * Description :
 * Function for receiving the status of the TWI module .
 */
uint8 TWI_getStatus( void )
{
    16d4:	df 93       	push	r29
    16d6:	cf 93       	push	r28
    16d8:	0f 92       	push	r0
    16da:	cd b7       	in	r28, 0x3d	; 61
    16dc:	de b7       	in	r29, 0x3e	; 62
	uint8 status ;

	status = ( TWSR & 0xF8 ) ;
    16de:	e1 e2       	ldi	r30, 0x21	; 33
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	88 7f       	andi	r24, 0xF8	; 248
    16e6:	89 83       	std	Y+1, r24	; 0x01
	/* masking to get status bits which are the last 5 bits of TWSR register */

	return status ;
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    16ea:	0f 90       	pop	r0
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	08 95       	ret

000016f2 <PWM_Timer0_Start>:
#include "common_macros.h"
#include"PWM.h"


void PWM_Timer0_Start(uint8 duty_cycle)
{
    16f2:	0f 93       	push	r16
    16f4:	1f 93       	push	r17
    16f6:	df 93       	push	r29
    16f8:	cf 93       	push	r28
    16fa:	0f 92       	push	r0
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
    1700:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01) ;
    1702:	e3 e5       	ldi	r30, 0x53	; 83
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	8a e6       	ldi	r24, 0x6A	; 106
    1708:	80 83       	st	Z, r24
	/*
	 *      MODE : FAST PWM | NON-INVERTING | N=8
	 */

	TCNT0=0; // initial value
    170a:	e2 e5       	ldi	r30, 0x52	; 82
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	10 82       	st	Z, r1

	OCR0= (duty_cycle * (2.55) );
    1710:	0c e5       	ldi	r16, 0x5C	; 92
    1712:	10 e0       	ldi	r17, 0x00	; 0
    1714:	89 81       	ldd	r24, Y+1	; 0x01
    1716:	88 2f       	mov	r24, r24
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	aa 27       	eor	r26, r26
    171c:	97 fd       	sbrc	r25, 7
    171e:	a0 95       	com	r26
    1720:	ba 2f       	mov	r27, r26
    1722:	bc 01       	movw	r22, r24
    1724:	cd 01       	movw	r24, r26
    1726:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    172a:	dc 01       	movw	r26, r24
    172c:	cb 01       	movw	r24, r22
    172e:	bc 01       	movw	r22, r24
    1730:	cd 01       	movw	r24, r26
    1732:	23 e3       	ldi	r18, 0x33	; 51
    1734:	33 e3       	ldi	r19, 0x33	; 51
    1736:	43 e2       	ldi	r20, 0x23	; 35
    1738:	50 e4       	ldi	r21, 0x40	; 64
    173a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	bc 01       	movw	r22, r24
    1744:	cd 01       	movw	r24, r26
    1746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	f8 01       	movw	r30, r16
    1750:	80 83       	st	Z, r24

	 duty cycle = 0% - 100% , OCR0 = 0-255

	 */

}
    1752:	0f 90       	pop	r0
    1754:	cf 91       	pop	r28
    1756:	df 91       	pop	r29
    1758:	1f 91       	pop	r17
    175a:	0f 91       	pop	r16
    175c:	08 95       	ret

0000175e <__vector_7>:
static volatile void (*g_callBackPtr)(void) = NULL_PTR;

/************************Interrupt Service Routines*****************/

ISR(TIMER1_COMPA_vect)
{
    175e:	1f 92       	push	r1
    1760:	0f 92       	push	r0
    1762:	0f b6       	in	r0, 0x3f	; 63
    1764:	0f 92       	push	r0
    1766:	11 24       	eor	r1, r1
    1768:	2f 93       	push	r18
    176a:	3f 93       	push	r19
    176c:	4f 93       	push	r20
    176e:	5f 93       	push	r21
    1770:	6f 93       	push	r22
    1772:	7f 93       	push	r23
    1774:	8f 93       	push	r24
    1776:	9f 93       	push	r25
    1778:	af 93       	push	r26
    177a:	bf 93       	push	r27
    177c:	ef 93       	push	r30
    177e:	ff 93       	push	r31
    1780:	df 93       	push	r29
    1782:	cf 93       	push	r28
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1788:	80 91 70 01 	lds	r24, 0x0170
    178c:	90 91 71 01 	lds	r25, 0x0171
    1790:	00 97       	sbiw	r24, 0x00	; 0
    1792:	29 f0       	breq	.+10     	; 0x179e <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1794:	e0 91 70 01 	lds	r30, 0x0170
    1798:	f0 91 71 01 	lds	r31, 0x0171
    179c:	09 95       	icall
	}
}
    179e:	cf 91       	pop	r28
    17a0:	df 91       	pop	r29
    17a2:	ff 91       	pop	r31
    17a4:	ef 91       	pop	r30
    17a6:	bf 91       	pop	r27
    17a8:	af 91       	pop	r26
    17aa:	9f 91       	pop	r25
    17ac:	8f 91       	pop	r24
    17ae:	7f 91       	pop	r23
    17b0:	6f 91       	pop	r22
    17b2:	5f 91       	pop	r21
    17b4:	4f 91       	pop	r20
    17b6:	3f 91       	pop	r19
    17b8:	2f 91       	pop	r18
    17ba:	0f 90       	pop	r0
    17bc:	0f be       	out	0x3f, r0	; 63
    17be:	0f 90       	pop	r0
    17c0:	1f 90       	pop	r1
    17c2:	18 95       	reti

000017c4 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    17c4:	1f 92       	push	r1
    17c6:	0f 92       	push	r0
    17c8:	0f b6       	in	r0, 0x3f	; 63
    17ca:	0f 92       	push	r0
    17cc:	11 24       	eor	r1, r1
    17ce:	2f 93       	push	r18
    17d0:	3f 93       	push	r19
    17d2:	4f 93       	push	r20
    17d4:	5f 93       	push	r21
    17d6:	6f 93       	push	r22
    17d8:	7f 93       	push	r23
    17da:	8f 93       	push	r24
    17dc:	9f 93       	push	r25
    17de:	af 93       	push	r26
    17e0:	bf 93       	push	r27
    17e2:	ef 93       	push	r30
    17e4:	ff 93       	push	r31
    17e6:	df 93       	push	r29
    17e8:	cf 93       	push	r28
    17ea:	cd b7       	in	r28, 0x3d	; 61
    17ec:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    17ee:	80 91 70 01 	lds	r24, 0x0170
    17f2:	90 91 71 01 	lds	r25, 0x0171
    17f6:	00 97       	sbiw	r24, 0x00	; 0
    17f8:	29 f0       	breq	.+10     	; 0x1804 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    17fa:	e0 91 70 01 	lds	r30, 0x0170
    17fe:	f0 91 71 01 	lds	r31, 0x0171
    1802:	09 95       	icall
	}
}
    1804:	cf 91       	pop	r28
    1806:	df 91       	pop	r29
    1808:	ff 91       	pop	r31
    180a:	ef 91       	pop	r30
    180c:	bf 91       	pop	r27
    180e:	af 91       	pop	r26
    1810:	9f 91       	pop	r25
    1812:	8f 91       	pop	r24
    1814:	7f 91       	pop	r23
    1816:	6f 91       	pop	r22
    1818:	5f 91       	pop	r21
    181a:	4f 91       	pop	r20
    181c:	3f 91       	pop	r19
    181e:	2f 91       	pop	r18
    1820:	0f 90       	pop	r0
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	0f 90       	pop	r0
    1826:	1f 90       	pop	r1
    1828:	18 95       	reti

0000182a <Timer1_init>:
 * 3. Setup the Timer1 initial value .
 * 4. enable the interrupt module .
 * 5. Setup the Timer1 compare value ( in compare mode only ) .
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	00 d0       	rcall	.+0      	; 0x1830 <Timer1_init+0x6>
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
    1834:	9a 83       	std	Y+2, r25	; 0x02
    1836:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A = (1<<FOC1A) | (1<<FOC1B) ;
    1838:	ef e4       	ldi	r30, 0x4F	; 79
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	8c e0       	ldi	r24, 0x0C	; 12
    183e:	80 83       	st	Z, r24
	/* for  non-PWM mode */

	TCCR1B = ( ( Config_Ptr->mode & 0x0C )<<1) | (Config_Ptr->prescaler);
    1840:	ae e4       	ldi	r26, 0x4E	; 78
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	e9 81       	ldd	r30, Y+1	; 0x01
    1846:	fa 81       	ldd	r31, Y+2	; 0x02
    1848:	85 81       	ldd	r24, Z+5	; 0x05
    184a:	88 2f       	mov	r24, r24
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	8c 70       	andi	r24, 0x0C	; 12
    1850:	90 70       	andi	r25, 0x00	; 0
    1852:	88 0f       	add	r24, r24
    1854:	99 1f       	adc	r25, r25
    1856:	98 2f       	mov	r25, r24
    1858:	e9 81       	ldd	r30, Y+1	; 0x01
    185a:	fa 81       	ldd	r31, Y+2	; 0x02
    185c:	84 81       	ldd	r24, Z+4	; 0x04
    185e:	89 2b       	or	r24, r25
    1860:	8c 93       	st	X, r24
	 * shift left by 1 to put them in WGM12 & WGM13 mode bits .
	 *
	 * 2. then set the pre-scaler .
	 */

	TCNT1 = Config_Ptr->initial_value;
    1862:	ac e4       	ldi	r26, 0x4C	; 76
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e9 81       	ldd	r30, Y+1	; 0x01
    1868:	fa 81       	ldd	r31, Y+2	; 0x02
    186a:	80 81       	ld	r24, Z
    186c:	91 81       	ldd	r25, Z+1	; 0x01
    186e:	11 96       	adiw	r26, 0x01	; 1
    1870:	9c 93       	st	X, r25
    1872:	8e 93       	st	-X, r24

	if( Config_Ptr->mode == TIMER1_CTC_MODE )
    1874:	e9 81       	ldd	r30, Y+1	; 0x01
    1876:	fa 81       	ldd	r31, Y+2	; 0x02
    1878:	85 81       	ldd	r24, Z+5	; 0x05
    187a:	84 30       	cpi	r24, 0x04	; 4
    187c:	89 f4       	brne	.+34     	; 0x18a0 <Timer1_init+0x76>
	{
		OCR1A = Config_Ptr->compare_value;
    187e:	aa e4       	ldi	r26, 0x4A	; 74
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	e9 81       	ldd	r30, Y+1	; 0x01
    1884:	fa 81       	ldd	r31, Y+2	; 0x02
    1886:	82 81       	ldd	r24, Z+2	; 0x02
    1888:	93 81       	ldd	r25, Z+3	; 0x03
    188a:	11 96       	adiw	r26, 0x01	; 1
    188c:	9c 93       	st	X, r25
    188e:	8e 93       	st	-X, r24
		TIMSK |= (1<<OCIE1A);
    1890:	a9 e5       	ldi	r26, 0x59	; 89
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	e9 e5       	ldi	r30, 0x59	; 89
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	80 61       	ori	r24, 0x10	; 16
    189c:	8c 93       	st	X, r24
    189e:	07 c0       	rjmp	.+14     	; 0x18ae <Timer1_init+0x84>
	 * 2. Compare interrupt module enabled .
	 */

	else
	{
		TIMSK |= (1<<TOIE1);
    18a0:	a9 e5       	ldi	r26, 0x59	; 89
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	e9 e5       	ldi	r30, 0x59	; 89
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	84 60       	ori	r24, 0x04	; 4
    18ac:	8c 93       	st	X, r24
	}
	/* ( if normal mode ON )
	 *  normal interrupt module enabled .
	 */
}
    18ae:	0f 90       	pop	r0
    18b0:	0f 90       	pop	r0
    18b2:	cf 91       	pop	r28
    18b4:	df 91       	pop	r29
    18b6:	08 95       	ret

000018b8 <Timer1_deInit>:
 * 1. Clear all Timer1 registers .
 * 2. disable the interrupt module .
 * 3. Reset the global pointer value .
 */
void Timer1_deInit(void)
{
    18b8:	df 93       	push	r29
    18ba:	cf 93       	push	r28
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62

	TCCR1A = 0;
    18c0:	ef e4       	ldi	r30, 0x4F	; 79
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	10 82       	st	Z, r1
	TCCR1B = 0;
    18c6:	ee e4       	ldi	r30, 0x4E	; 78
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	10 82       	st	Z, r1
	TCNT1 = 0;
    18cc:	ec e4       	ldi	r30, 0x4C	; 76
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	11 82       	std	Z+1, r1	; 0x01
    18d2:	10 82       	st	Z, r1
	/* Clear all Timer1 registers . */

	TIMSK &= ~(1<<TOIE1) & ~(1<<OCIE1A);
    18d4:	a9 e5       	ldi	r26, 0x59	; 89
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	e9 e5       	ldi	r30, 0x59	; 89
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	8b 7e       	andi	r24, 0xEB	; 235
    18e0:	8c 93       	st	X, r24
	/* Compare and normal interrupt modules disabled . */

	g_callBackPtr = NULL_PTR;
    18e2:	10 92 71 01 	sts	0x0171, r1
    18e6:	10 92 70 01 	sts	0x0170, r1
	/* Reset the global pointer value . */
}
    18ea:	cf 91       	pop	r28
    18ec:	df 91       	pop	r29
    18ee:	08 95       	ret

000018f0 <Timer1_setCallBack>:


void Timer1_setCallBack(void(*a_ptr)(void))
{
    18f0:	df 93       	push	r29
    18f2:	cf 93       	push	r28
    18f4:	00 d0       	rcall	.+0      	; 0x18f6 <Timer1_setCallBack+0x6>
    18f6:	cd b7       	in	r28, 0x3d	; 61
    18f8:	de b7       	in	r29, 0x3e	; 62
    18fa:	9a 83       	std	Y+2, r25	; 0x02
    18fc:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    18fe:	89 81       	ldd	r24, Y+1	; 0x01
    1900:	9a 81       	ldd	r25, Y+2	; 0x02
    1902:	90 93 71 01 	sts	0x0171, r25
    1906:	80 93 70 01 	sts	0x0170, r24
	/* Save the address of the Call back function in a global variable */
}
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	cf 91       	pop	r28
    1910:	df 91       	pop	r29
    1912:	08 95       	ret

00001914 <UART_init>:
 * 5. Setup the UART number of stop bits .
 * 6. Setup the UART baud rate .
 * 7.Enable the UART mask flags .
 */
void UART_init( const UART_ConfigType * Ptr_Configs )
{
    1914:	df 93       	push	r29
    1916:	cf 93       	push	r28
    1918:	00 d0       	rcall	.+0      	; 0x191a <UART_init+0x6>
    191a:	00 d0       	rcall	.+0      	; 0x191c <UART_init+0x8>
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
    1920:	9c 83       	std	Y+4, r25	; 0x04
    1922:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1924:	1a 82       	std	Y+2, r1	; 0x02
    1926:	19 82       	std	Y+1, r1	; 0x01

	UCSRA = (1<<U2X) ;
    1928:	eb e2       	ldi	r30, 0x2B	; 43
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	82 e0       	ldi	r24, 0x02	; 2
    192e:	80 83       	st	Z, r24
	/*	Configure the transmission speed which is double in Asynchronous mode only */

	UCSRB = (1<<RXEN) |(1<<TXEN) |  (Ptr_Configs->bit_data & 4) ;
    1930:	aa e2       	ldi	r26, 0x2A	; 42
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	eb 81       	ldd	r30, Y+3	; 0x03
    1936:	fc 81       	ldd	r31, Y+4	; 0x04
    1938:	80 81       	ld	r24, Z
    193a:	84 70       	andi	r24, 0x04	; 4
    193c:	88 61       	ori	r24, 0x18	; 24
    193e:	8c 93       	st	X, r24
	/* Receive Complete Interrupt and Data Register Empty Interrupt enabled
	 Receiver and  Transmitter Enabled , UCSZ2 is bit number 3 in the register which is also
	 bit number 3 in the Character size ( Character Size ANDing with 0000 0100 to get the 3rd bit ) */

	UCSRC = ( Ptr_Configs->parity <<UPM0) | (Ptr_Configs->stop_bit<<USBS)
    1940:	a0 e4       	ldi	r26, 0x40	; 64
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	eb 81       	ldd	r30, Y+3	; 0x03
    1946:	fc 81       	ldd	r31, Y+4	; 0x04
    1948:	81 81       	ldd	r24, Z+1	; 0x01
    194a:	88 2f       	mov	r24, r24
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	82 95       	swap	r24
    1950:	92 95       	swap	r25
    1952:	90 7f       	andi	r25, 0xF0	; 240
    1954:	98 27       	eor	r25, r24
    1956:	80 7f       	andi	r24, 0xF0	; 240
    1958:	98 27       	eor	r25, r24
    195a:	28 2f       	mov	r18, r24
    195c:	eb 81       	ldd	r30, Y+3	; 0x03
    195e:	fc 81       	ldd	r31, Y+4	; 0x04
    1960:	82 81       	ldd	r24, Z+2	; 0x02
    1962:	88 2f       	mov	r24, r24
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	88 0f       	add	r24, r24
    1968:	99 1f       	adc	r25, r25
    196a:	88 0f       	add	r24, r24
    196c:	99 1f       	adc	r25, r25
    196e:	88 0f       	add	r24, r24
    1970:	99 1f       	adc	r25, r25
    1972:	28 2b       	or	r18, r24
    1974:	eb 81       	ldd	r30, Y+3	; 0x03
    1976:	fc 81       	ldd	r31, Y+4	; 0x04
    1978:	80 81       	ld	r24, Z
    197a:	88 2f       	mov	r24, r24
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	83 70       	andi	r24, 0x03	; 3
    1980:	90 70       	andi	r25, 0x00	; 0
    1982:	88 0f       	add	r24, r24
    1984:	99 1f       	adc	r25, r25
    1986:	82 2b       	or	r24, r18
    1988:	8c 93       	st	X, r24
	/*	Mode selection ( synchronous or asynchronous )and partiy (disabled , even or odd)
	 *	And stop bit ( 1 bit or 2 bits) and the rest 2 bits of the Character size UCSZ0 and UCSZ1
	 *  ( Character Size ANDing with 0000 0011 to get the 1st 2 bits )
	 */

	ubrr_value = (uint16)(((F_CPU / (Ptr_Configs->baud_rate * 8UL))) - 1);
    198a:	eb 81       	ldd	r30, Y+3	; 0x03
    198c:	fc 81       	ldd	r31, Y+4	; 0x04
    198e:	83 81       	ldd	r24, Z+3	; 0x03
    1990:	88 2f       	mov	r24, r24
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	a0 e0       	ldi	r26, 0x00	; 0
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	88 0f       	add	r24, r24
    199a:	99 1f       	adc	r25, r25
    199c:	aa 1f       	adc	r26, r26
    199e:	bb 1f       	adc	r27, r27
    19a0:	88 0f       	add	r24, r24
    19a2:	99 1f       	adc	r25, r25
    19a4:	aa 1f       	adc	r26, r26
    19a6:	bb 1f       	adc	r27, r27
    19a8:	88 0f       	add	r24, r24
    19aa:	99 1f       	adc	r25, r25
    19ac:	aa 1f       	adc	r26, r26
    19ae:	bb 1f       	adc	r27, r27
    19b0:	9c 01       	movw	r18, r24
    19b2:	ad 01       	movw	r20, r26
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	92 e1       	ldi	r25, 0x12	; 18
    19b8:	aa e7       	ldi	r26, 0x7A	; 122
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	bc 01       	movw	r22, r24
    19be:	cd 01       	movw	r24, r26
    19c0:	0e 94 1c 11 	call	0x2238	; 0x2238 <__udivmodsi4>
    19c4:	da 01       	movw	r26, r20
    19c6:	c9 01       	movw	r24, r18
    19c8:	01 97       	sbiw	r24, 0x01	; 1
    19ca:	9a 83       	std	Y+2, r25	; 0x02
    19cc:	89 83       	std	Y+1, r24	; 0x01
	/* Calculate the UBRR register value */


	UBRRH = ( ubrr_value>>8 );
    19ce:	e0 e4       	ldi	r30, 0x40	; 64
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	9a 81       	ldd	r25, Y+2	; 0x02
    19d6:	89 2f       	mov	r24, r25
    19d8:	99 27       	eor	r25, r25
    19da:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    19dc:	e9 e2       	ldi	r30, 0x29	; 41
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
    19e2:	80 83       	st	Z, r24
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH
	 * Because they are not consecutive */
}
    19e4:	0f 90       	pop	r0
    19e6:	0f 90       	pop	r0
    19e8:	0f 90       	pop	r0
    19ea:	0f 90       	pop	r0
    19ec:	cf 91       	pop	r28
    19ee:	df 91       	pop	r29
    19f0:	08 95       	ret

000019f2 <UART_sendByte>:
/*
 * Description :
 * Function for sending byte to another device by using UART .
 */
void UART_sendByte( const uint8 data)
{
    19f2:	df 93       	push	r29
    19f4:	cf 93       	push	r28
    19f6:	0f 92       	push	r0
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62
    19fc:	89 83       	std	Y+1, r24	; 0x01
	while( BIT_IS_CLEAR(UCSRA,UDRE) ){}
    19fe:	eb e2       	ldi	r30, 0x2B	; 43
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	88 2f       	mov	r24, r24
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	80 72       	andi	r24, 0x20	; 32
    1a0a:	90 70       	andi	r25, 0x00	; 0
    1a0c:	00 97       	sbiw	r24, 0x00	; 0
    1a0e:	b9 f3       	breq	.-18     	; 0x19fe <UART_sendByte+0xc>
	/*	Polling to check that data register is clear ( no operation is going on )
	 * 	UDRE flag is set when the Tx buffer (UDR) is empty
	 */

	UDR=data;
    1a10:	ec e2       	ldi	r30, 0x2C	; 44
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	80 83       	st	Z, r24
	/*	Transfer the data from the memory to the data register */

}
    1a18:	0f 90       	pop	r0
    1a1a:	cf 91       	pop	r28
    1a1c:	df 91       	pop	r29
    1a1e:	08 95       	ret

00001a20 <UART_receiveByte>:
/*
 * Description :
 * Function for receive byte from another device by using UART .
 */
uint8 UART_receiveByte(void)
{
    1a20:	df 93       	push	r29
    1a22:	cf 93       	push	r28
    1a24:	cd b7       	in	r28, 0x3d	; 61
    1a26:	de b7       	in	r29, 0x3e	; 62
	while( BIT_IS_CLEAR(UCSRA,RXC) ){}
    1a28:	eb e2       	ldi	r30, 0x2B	; 43
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	88 23       	and	r24, r24
    1a30:	dc f7       	brge	.-10     	; 0x1a28 <UART_receiveByte+0x8>
	/*	Polling to check that receive register is full and unread
	 *  RXC flag is set when the UART receiving data is done
	 */

	return UDR;
    1a32:	ec e2       	ldi	r30, 0x2C	; 44
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
	/*	Transfer the data from the data register to the memory */

}
    1a38:	cf 91       	pop	r28
    1a3a:	df 91       	pop	r29
    1a3c:	08 95       	ret

00001a3e <UART_sendString>:
/*
 * Description :
 * Function for sending string to another device by using UART .
 */
void UART_sendString( const uint8 * a_Str)
{
    1a3e:	df 93       	push	r29
    1a40:	cf 93       	push	r28
    1a42:	00 d0       	rcall	.+0      	; 0x1a44 <UART_sendString+0x6>
    1a44:	cd b7       	in	r28, 0x3d	; 61
    1a46:	de b7       	in	r29, 0x3e	; 62
    1a48:	9a 83       	std	Y+2, r25	; 0x02
    1a4a:	89 83       	std	Y+1, r24	; 0x01
    1a4c:	0a c0       	rjmp	.+20     	; 0x1a62 <UART_sendString+0x24>
	while( *a_Str != '\0' )
	{
		UART_sendByte( *a_Str );
    1a4e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a50:	fa 81       	ldd	r31, Y+2	; 0x02
    1a52:	80 81       	ld	r24, Z
    1a54:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <UART_sendByte>
		a_Str++;
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
    1a5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5c:	01 96       	adiw	r24, 0x01	; 1
    1a5e:	9a 83       	std	Y+2, r25	; 0x02
    1a60:	89 83       	std	Y+1, r24	; 0x01
 * Description :
 * Function for sending string to another device by using UART .
 */
void UART_sendString( const uint8 * a_Str)
{
	while( *a_Str != '\0' )
    1a62:	e9 81       	ldd	r30, Y+1	; 0x01
    1a64:	fa 81       	ldd	r31, Y+2	; 0x02
    1a66:	80 81       	ld	r24, Z
    1a68:	88 23       	and	r24, r24
    1a6a:	89 f7       	brne	.-30     	; 0x1a4e <UART_sendString+0x10>
		a_Str++;
	}
	/*	Looping on the string with sending it byte by byte
	 *  By calling UART_sendByte function every iteration
	 */
}
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	cf 91       	pop	r28
    1a72:	df 91       	pop	r29
    1a74:	08 95       	ret

00001a76 <UART_receiveString>:
/*
 * Description :
 * Function for receive string from another device by using UART .
 */
void UART_receiveString( uint8 * a_Str )
{
    1a76:	df 93       	push	r29
    1a78:	cf 93       	push	r28
    1a7a:	00 d0       	rcall	.+0      	; 0x1a7c <UART_receiveString+0x6>
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
    1a80:	9a 83       	std	Y+2, r25	; 0x02
    1a82:	89 83       	std	Y+1, r24	; 0x01

	*a_Str=UART_receiveByte();
    1a84:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <UART_receiveByte>
    1a88:	e9 81       	ldd	r30, Y+1	; 0x01
    1a8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a8c:	80 83       	st	Z, r24
    1a8e:	0a c0       	rjmp	.+20     	; 0x1aa4 <UART_receiveString+0x2e>

	while( *a_Str != '#' )
	{
		a_Str++;
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	9a 81       	ldd	r25, Y+2	; 0x02
    1a94:	01 96       	adiw	r24, 0x01	; 1
    1a96:	9a 83       	std	Y+2, r25	; 0x02
    1a98:	89 83       	std	Y+1, r24	; 0x01

		*a_Str=UART_receiveByte();
    1a9a:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <UART_receiveByte>
    1a9e:	e9 81       	ldd	r30, Y+1	; 0x01
    1aa0:	fa 81       	ldd	r31, Y+2	; 0x02
    1aa2:	80 83       	st	Z, r24
void UART_receiveString( uint8 * a_Str )
{

	*a_Str=UART_receiveByte();

	while( *a_Str != '#' )
    1aa4:	e9 81       	ldd	r30, Y+1	; 0x01
    1aa6:	fa 81       	ldd	r31, Y+2	; 0x02
    1aa8:	80 81       	ld	r24, Z
    1aaa:	83 32       	cpi	r24, 0x23	; 35
    1aac:	89 f7       	brne	.-30     	; 0x1a90 <UART_receiveString+0x1a>
	/*	Looping on the string until '#' with receiving
	 *  It byte by byte by calling UART_receiveByte function
	 *  Every iteration and save it in the array
	 */

	*a_Str = '\0';
    1aae:	e9 81       	ldd	r30, Y+1	; 0x01
    1ab0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ab2:	10 82       	st	Z, r1
	/* After receive the array we replace the '#' with '\0' because its string */
}
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	cf 91       	pop	r28
    1aba:	df 91       	pop	r29
    1abc:	08 95       	ret

00001abe <UART_receiveStringBacktoBack>:
 * Description :
 * Function for receive string from another device by using UART
 * That string will be sending again to another device by using UART
 */
void UART_receiveStringBacktoBack( uint8 * a_Str )
{
    1abe:	df 93       	push	r29
    1ac0:	cf 93       	push	r28
    1ac2:	00 d0       	rcall	.+0      	; 0x1ac4 <UART_receiveStringBacktoBack+0x6>
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
    1ac8:	9a 83       	std	Y+2, r25	; 0x02
    1aca:	89 83       	std	Y+1, r24	; 0x01
	*a_Str=UART_receiveByte();
    1acc:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <UART_receiveByte>
    1ad0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ad2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ad4:	80 83       	st	Z, r24
    1ad6:	0a c0       	rjmp	.+20     	; 0x1aec <UART_receiveStringBacktoBack+0x2e>

	while( *a_Str != '#' )
	{
		a_Str++;
    1ad8:	89 81       	ldd	r24, Y+1	; 0x01
    1ada:	9a 81       	ldd	r25, Y+2	; 0x02
    1adc:	01 96       	adiw	r24, 0x01	; 1
    1ade:	9a 83       	std	Y+2, r25	; 0x02
    1ae0:	89 83       	std	Y+1, r24	; 0x01

		*a_Str=UART_receiveByte();
    1ae2:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <UART_receiveByte>
    1ae6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ae8:	fa 81       	ldd	r31, Y+2	; 0x02
    1aea:	80 83       	st	Z, r24
 */
void UART_receiveStringBacktoBack( uint8 * a_Str )
{
	*a_Str=UART_receiveByte();

	while( *a_Str != '#' )
    1aec:	e9 81       	ldd	r30, Y+1	; 0x01
    1aee:	fa 81       	ldd	r31, Y+2	; 0x02
    1af0:	80 81       	ld	r24, Z
    1af2:	83 32       	cpi	r24, 0x23	; 35
    1af4:	89 f7       	brne	.-30     	; 0x1ad8 <UART_receiveStringBacktoBack+0x1a>
		a_Str++;

		*a_Str=UART_receiveByte();
	}

	a_Str++;
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
    1af8:	9a 81       	ldd	r25, Y+2	; 0x02
    1afa:	01 96       	adiw	r24, 0x01	; 1
    1afc:	9a 83       	std	Y+2, r25	; 0x02
    1afe:	89 83       	std	Y+1, r24	; 0x01

	*a_Str = '\0';
    1b00:	e9 81       	ldd	r30, Y+1	; 0x01
    1b02:	fa 81       	ldd	r31, Y+2	; 0x02
    1b04:	10 82       	st	Z, r1
}
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
    1b0a:	cf 91       	pop	r28
    1b0c:	df 91       	pop	r29
    1b0e:	08 95       	ret

00001b10 <UART_sendArray>:
/*
 * Description :
 * Function for sending array to another device by using UART .
 */
void UART_sendArray( const uint8 * a_array ,uint8 a_size )
{
    1b10:	df 93       	push	r29
    1b12:	cf 93       	push	r28
    1b14:	00 d0       	rcall	.+0      	; 0x1b16 <UART_sendArray+0x6>
    1b16:	00 d0       	rcall	.+0      	; 0x1b18 <UART_sendArray+0x8>
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
    1b1c:	9b 83       	std	Y+3, r25	; 0x03
    1b1e:	8a 83       	std	Y+2, r24	; 0x02
    1b20:	6c 83       	std	Y+4, r22	; 0x04
	uint8 counter = 0 ;
    1b22:	19 82       	std	Y+1, r1	; 0x01
    1b24:	0e c0       	rjmp	.+28     	; 0x1b42 <UART_sendArray+0x32>

	/* Looping to send the array */
	while( counter < a_size )
	{
		UART_sendByte(a_array[counter]) ;
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b30:	fc 01       	movw	r30, r24
    1b32:	e2 0f       	add	r30, r18
    1b34:	f3 1f       	adc	r31, r19
    1b36:	80 81       	ld	r24, Z
    1b38:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <UART_sendByte>

		counter++;
    1b3c:	89 81       	ldd	r24, Y+1	; 0x01
    1b3e:	8f 5f       	subi	r24, 0xFF	; 255
    1b40:	89 83       	std	Y+1, r24	; 0x01
void UART_sendArray( const uint8 * a_array ,uint8 a_size )
{
	uint8 counter = 0 ;

	/* Looping to send the array */
	while( counter < a_size )
    1b42:	99 81       	ldd	r25, Y+1	; 0x01
    1b44:	8c 81       	ldd	r24, Y+4	; 0x04
    1b46:	98 17       	cp	r25, r24
    1b48:	70 f3       	brcs	.-36     	; 0x1b26 <UART_sendArray+0x16>
	{
		UART_sendByte(a_array[counter]) ;

		counter++;
	}
}
    1b4a:	0f 90       	pop	r0
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	0f 90       	pop	r0
    1b52:	cf 91       	pop	r28
    1b54:	df 91       	pop	r29
    1b56:	08 95       	ret

00001b58 <UART_receiveArray>:
/*
 * Description :
 * Function for receive array from another device by using UART .
 */
void UART_receiveArray( uint8 * a_array ,uint8 a_size )
{
    1b58:	0f 93       	push	r16
    1b5a:	1f 93       	push	r17
    1b5c:	df 93       	push	r29
    1b5e:	cf 93       	push	r28
    1b60:	00 d0       	rcall	.+0      	; 0x1b62 <UART_receiveArray+0xa>
    1b62:	00 d0       	rcall	.+0      	; 0x1b64 <UART_receiveArray+0xc>
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    1b68:	9b 83       	std	Y+3, r25	; 0x03
    1b6a:	8a 83       	std	Y+2, r24	; 0x02
    1b6c:	6c 83       	std	Y+4, r22	; 0x04
	uint8 counter = 0 ;
    1b6e:	19 82       	std	Y+1, r1	; 0x01
    1b70:	0f c0       	rjmp	.+30     	; 0x1b90 <UART_receiveArray+0x38>

	/* Looping to send the array */
	while( counter < a_size )
	{
		a_array[counter] = UART_receiveByte() ;
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	28 2f       	mov	r18, r24
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b7c:	8c 01       	movw	r16, r24
    1b7e:	02 0f       	add	r16, r18
    1b80:	13 1f       	adc	r17, r19
    1b82:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <UART_receiveByte>
    1b86:	f8 01       	movw	r30, r16
    1b88:	80 83       	st	Z, r24

		counter++;
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
    1b8c:	8f 5f       	subi	r24, 0xFF	; 255
    1b8e:	89 83       	std	Y+1, r24	; 0x01
void UART_receiveArray( uint8 * a_array ,uint8 a_size )
{
	uint8 counter = 0 ;

	/* Looping to send the array */
	while( counter < a_size )
    1b90:	99 81       	ldd	r25, Y+1	; 0x01
    1b92:	8c 81       	ldd	r24, Y+4	; 0x04
    1b94:	98 17       	cp	r25, r24
    1b96:	68 f3       	brcs	.-38     	; 0x1b72 <UART_receiveArray+0x1a>
	{
		a_array[counter] = UART_receiveByte() ;

		counter++;
	}
}
    1b98:	0f 90       	pop	r0
    1b9a:	0f 90       	pop	r0
    1b9c:	0f 90       	pop	r0
    1b9e:	0f 90       	pop	r0
    1ba0:	cf 91       	pop	r28
    1ba2:	df 91       	pop	r29
    1ba4:	1f 91       	pop	r17
    1ba6:	0f 91       	pop	r16
    1ba8:	08 95       	ret

00001baa <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1baa:	df 93       	push	r29
    1bac:	cf 93       	push	r28
    1bae:	00 d0       	rcall	.+0      	; 0x1bb0 <GPIO_setupPinDirection+0x6>
    1bb0:	00 d0       	rcall	.+0      	; 0x1bb2 <GPIO_setupPinDirection+0x8>
    1bb2:	0f 92       	push	r0
    1bb4:	cd b7       	in	r28, 0x3d	; 61
    1bb6:	de b7       	in	r29, 0x3e	; 62
    1bb8:	89 83       	std	Y+1, r24	; 0x01
    1bba:	6a 83       	std	Y+2, r22	; 0x02
    1bbc:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc0:	88 30       	cpi	r24, 0x08	; 8
    1bc2:	08 f0       	brcs	.+2      	; 0x1bc6 <GPIO_setupPinDirection+0x1c>
    1bc4:	d5 c0       	rjmp	.+426    	; 0x1d70 <GPIO_setupPinDirection+0x1c6>
    1bc6:	89 81       	ldd	r24, Y+1	; 0x01
    1bc8:	84 30       	cpi	r24, 0x04	; 4
    1bca:	08 f0       	brcs	.+2      	; 0x1bce <GPIO_setupPinDirection+0x24>
    1bcc:	d1 c0       	rjmp	.+418    	; 0x1d70 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1bce:	89 81       	ldd	r24, Y+1	; 0x01
    1bd0:	28 2f       	mov	r18, r24
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	3d 83       	std	Y+5, r19	; 0x05
    1bd6:	2c 83       	std	Y+4, r18	; 0x04
    1bd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bda:	9d 81       	ldd	r25, Y+5	; 0x05
    1bdc:	81 30       	cpi	r24, 0x01	; 1
    1bde:	91 05       	cpc	r25, r1
    1be0:	09 f4       	brne	.+2      	; 0x1be4 <GPIO_setupPinDirection+0x3a>
    1be2:	43 c0       	rjmp	.+134    	; 0x1c6a <GPIO_setupPinDirection+0xc0>
    1be4:	2c 81       	ldd	r18, Y+4	; 0x04
    1be6:	3d 81       	ldd	r19, Y+5	; 0x05
    1be8:	22 30       	cpi	r18, 0x02	; 2
    1bea:	31 05       	cpc	r19, r1
    1bec:	2c f4       	brge	.+10     	; 0x1bf8 <GPIO_setupPinDirection+0x4e>
    1bee:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf0:	9d 81       	ldd	r25, Y+5	; 0x05
    1bf2:	00 97       	sbiw	r24, 0x00	; 0
    1bf4:	71 f0       	breq	.+28     	; 0x1c12 <GPIO_setupPinDirection+0x68>
    1bf6:	bc c0       	rjmp	.+376    	; 0x1d70 <GPIO_setupPinDirection+0x1c6>
    1bf8:	2c 81       	ldd	r18, Y+4	; 0x04
    1bfa:	3d 81       	ldd	r19, Y+5	; 0x05
    1bfc:	22 30       	cpi	r18, 0x02	; 2
    1bfe:	31 05       	cpc	r19, r1
    1c00:	09 f4       	brne	.+2      	; 0x1c04 <GPIO_setupPinDirection+0x5a>
    1c02:	5f c0       	rjmp	.+190    	; 0x1cc2 <GPIO_setupPinDirection+0x118>
    1c04:	8c 81       	ldd	r24, Y+4	; 0x04
    1c06:	9d 81       	ldd	r25, Y+5	; 0x05
    1c08:	83 30       	cpi	r24, 0x03	; 3
    1c0a:	91 05       	cpc	r25, r1
    1c0c:	09 f4       	brne	.+2      	; 0x1c10 <GPIO_setupPinDirection+0x66>
    1c0e:	85 c0       	rjmp	.+266    	; 0x1d1a <GPIO_setupPinDirection+0x170>
    1c10:	af c0       	rjmp	.+350    	; 0x1d70 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1c12:	8b 81       	ldd	r24, Y+3	; 0x03
    1c14:	81 30       	cpi	r24, 0x01	; 1
    1c16:	a1 f4       	brne	.+40     	; 0x1c40 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1c18:	aa e3       	ldi	r26, 0x3A	; 58
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	ea e3       	ldi	r30, 0x3A	; 58
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	48 2f       	mov	r20, r24
    1c24:	8a 81       	ldd	r24, Y+2	; 0x02
    1c26:	28 2f       	mov	r18, r24
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	02 2e       	mov	r0, r18
    1c30:	02 c0       	rjmp	.+4      	; 0x1c36 <GPIO_setupPinDirection+0x8c>
    1c32:	88 0f       	add	r24, r24
    1c34:	99 1f       	adc	r25, r25
    1c36:	0a 94       	dec	r0
    1c38:	e2 f7       	brpl	.-8      	; 0x1c32 <GPIO_setupPinDirection+0x88>
    1c3a:	84 2b       	or	r24, r20
    1c3c:	8c 93       	st	X, r24
    1c3e:	98 c0       	rjmp	.+304    	; 0x1d70 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1c40:	aa e3       	ldi	r26, 0x3A	; 58
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	ea e3       	ldi	r30, 0x3A	; 58
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	48 2f       	mov	r20, r24
    1c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4e:	28 2f       	mov	r18, r24
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	02 2e       	mov	r0, r18
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <GPIO_setupPinDirection+0xb4>
    1c5a:	88 0f       	add	r24, r24
    1c5c:	99 1f       	adc	r25, r25
    1c5e:	0a 94       	dec	r0
    1c60:	e2 f7       	brpl	.-8      	; 0x1c5a <GPIO_setupPinDirection+0xb0>
    1c62:	80 95       	com	r24
    1c64:	84 23       	and	r24, r20
    1c66:	8c 93       	st	X, r24
    1c68:	83 c0       	rjmp	.+262    	; 0x1d70 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	81 30       	cpi	r24, 0x01	; 1
    1c6e:	a1 f4       	brne	.+40     	; 0x1c98 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1c70:	a7 e3       	ldi	r26, 0x37	; 55
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	e7 e3       	ldi	r30, 0x37	; 55
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	48 2f       	mov	r20, r24
    1c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7e:	28 2f       	mov	r18, r24
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	02 2e       	mov	r0, r18
    1c88:	02 c0       	rjmp	.+4      	; 0x1c8e <GPIO_setupPinDirection+0xe4>
    1c8a:	88 0f       	add	r24, r24
    1c8c:	99 1f       	adc	r25, r25
    1c8e:	0a 94       	dec	r0
    1c90:	e2 f7       	brpl	.-8      	; 0x1c8a <GPIO_setupPinDirection+0xe0>
    1c92:	84 2b       	or	r24, r20
    1c94:	8c 93       	st	X, r24
    1c96:	6c c0       	rjmp	.+216    	; 0x1d70 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1c98:	a7 e3       	ldi	r26, 0x37	; 55
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	e7 e3       	ldi	r30, 0x37	; 55
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	48 2f       	mov	r20, r24
    1ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca6:	28 2f       	mov	r18, r24
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	02 2e       	mov	r0, r18
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <GPIO_setupPinDirection+0x10c>
    1cb2:	88 0f       	add	r24, r24
    1cb4:	99 1f       	adc	r25, r25
    1cb6:	0a 94       	dec	r0
    1cb8:	e2 f7       	brpl	.-8      	; 0x1cb2 <GPIO_setupPinDirection+0x108>
    1cba:	80 95       	com	r24
    1cbc:	84 23       	and	r24, r20
    1cbe:	8c 93       	st	X, r24
    1cc0:	57 c0       	rjmp	.+174    	; 0x1d70 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc4:	81 30       	cpi	r24, 0x01	; 1
    1cc6:	a1 f4       	brne	.+40     	; 0x1cf0 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1cc8:	a4 e3       	ldi	r26, 0x34	; 52
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	e4 e3       	ldi	r30, 0x34	; 52
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	48 2f       	mov	r20, r24
    1cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd6:	28 2f       	mov	r18, r24
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	02 2e       	mov	r0, r18
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <GPIO_setupPinDirection+0x13c>
    1ce2:	88 0f       	add	r24, r24
    1ce4:	99 1f       	adc	r25, r25
    1ce6:	0a 94       	dec	r0
    1ce8:	e2 f7       	brpl	.-8      	; 0x1ce2 <GPIO_setupPinDirection+0x138>
    1cea:	84 2b       	or	r24, r20
    1cec:	8c 93       	st	X, r24
    1cee:	40 c0       	rjmp	.+128    	; 0x1d70 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1cf0:	a4 e3       	ldi	r26, 0x34	; 52
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	e4 e3       	ldi	r30, 0x34	; 52
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	48 2f       	mov	r20, r24
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfe:	28 2f       	mov	r18, r24
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	02 2e       	mov	r0, r18
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <GPIO_setupPinDirection+0x164>
    1d0a:	88 0f       	add	r24, r24
    1d0c:	99 1f       	adc	r25, r25
    1d0e:	0a 94       	dec	r0
    1d10:	e2 f7       	brpl	.-8      	; 0x1d0a <GPIO_setupPinDirection+0x160>
    1d12:	80 95       	com	r24
    1d14:	84 23       	and	r24, r20
    1d16:	8c 93       	st	X, r24
    1d18:	2b c0       	rjmp	.+86     	; 0x1d70 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1c:	81 30       	cpi	r24, 0x01	; 1
    1d1e:	a1 f4       	brne	.+40     	; 0x1d48 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1d20:	a1 e3       	ldi	r26, 0x31	; 49
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	e1 e3       	ldi	r30, 0x31	; 49
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	48 2f       	mov	r20, r24
    1d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2e:	28 2f       	mov	r18, r24
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	02 2e       	mov	r0, r18
    1d38:	02 c0       	rjmp	.+4      	; 0x1d3e <GPIO_setupPinDirection+0x194>
    1d3a:	88 0f       	add	r24, r24
    1d3c:	99 1f       	adc	r25, r25
    1d3e:	0a 94       	dec	r0
    1d40:	e2 f7       	brpl	.-8      	; 0x1d3a <GPIO_setupPinDirection+0x190>
    1d42:	84 2b       	or	r24, r20
    1d44:	8c 93       	st	X, r24
    1d46:	14 c0       	rjmp	.+40     	; 0x1d70 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1d48:	a1 e3       	ldi	r26, 0x31	; 49
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	e1 e3       	ldi	r30, 0x31	; 49
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	80 81       	ld	r24, Z
    1d52:	48 2f       	mov	r20, r24
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	28 2f       	mov	r18, r24
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	02 2e       	mov	r0, r18
    1d60:	02 c0       	rjmp	.+4      	; 0x1d66 <GPIO_setupPinDirection+0x1bc>
    1d62:	88 0f       	add	r24, r24
    1d64:	99 1f       	adc	r25, r25
    1d66:	0a 94       	dec	r0
    1d68:	e2 f7       	brpl	.-8      	; 0x1d62 <GPIO_setupPinDirection+0x1b8>
    1d6a:	80 95       	com	r24
    1d6c:	84 23       	and	r24, r20
    1d6e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1d70:	0f 90       	pop	r0
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	cf 91       	pop	r28
    1d7c:	df 91       	pop	r29
    1d7e:	08 95       	ret

00001d80 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1d80:	df 93       	push	r29
    1d82:	cf 93       	push	r28
    1d84:	00 d0       	rcall	.+0      	; 0x1d86 <GPIO_writePin+0x6>
    1d86:	00 d0       	rcall	.+0      	; 0x1d88 <GPIO_writePin+0x8>
    1d88:	0f 92       	push	r0
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
    1d8e:	89 83       	std	Y+1, r24	; 0x01
    1d90:	6a 83       	std	Y+2, r22	; 0x02
    1d92:	4b 83       	std	Y+3, r20	; 0x03

	if( (pin_num >= NUM_OF_PINS_PER_PORT) || ( port_num >= NUM_OF_PORTS) )
    1d94:	8a 81       	ldd	r24, Y+2	; 0x02
    1d96:	88 30       	cpi	r24, 0x08	; 8
    1d98:	08 f0       	brcs	.+2      	; 0x1d9c <GPIO_writePin+0x1c>
    1d9a:	d5 c0       	rjmp	.+426    	; 0x1f46 <GPIO_writePin+0x1c6>
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	84 30       	cpi	r24, 0x04	; 4
    1da0:	08 f0       	brcs	.+2      	; 0x1da4 <GPIO_writePin+0x24>
    1da2:	d1 c0       	rjmp	.+418    	; 0x1f46 <GPIO_writePin+0x1c6>
	{
	}

	else
	{
		switch(port_num)
    1da4:	89 81       	ldd	r24, Y+1	; 0x01
    1da6:	28 2f       	mov	r18, r24
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	3d 83       	std	Y+5, r19	; 0x05
    1dac:	2c 83       	std	Y+4, r18	; 0x04
    1dae:	8c 81       	ldd	r24, Y+4	; 0x04
    1db0:	9d 81       	ldd	r25, Y+5	; 0x05
    1db2:	81 30       	cpi	r24, 0x01	; 1
    1db4:	91 05       	cpc	r25, r1
    1db6:	09 f4       	brne	.+2      	; 0x1dba <GPIO_writePin+0x3a>
    1db8:	43 c0       	rjmp	.+134    	; 0x1e40 <GPIO_writePin+0xc0>
    1dba:	2c 81       	ldd	r18, Y+4	; 0x04
    1dbc:	3d 81       	ldd	r19, Y+5	; 0x05
    1dbe:	22 30       	cpi	r18, 0x02	; 2
    1dc0:	31 05       	cpc	r19, r1
    1dc2:	2c f4       	brge	.+10     	; 0x1dce <GPIO_writePin+0x4e>
    1dc4:	8c 81       	ldd	r24, Y+4	; 0x04
    1dc6:	9d 81       	ldd	r25, Y+5	; 0x05
    1dc8:	00 97       	sbiw	r24, 0x00	; 0
    1dca:	71 f0       	breq	.+28     	; 0x1de8 <GPIO_writePin+0x68>
    1dcc:	bc c0       	rjmp	.+376    	; 0x1f46 <GPIO_writePin+0x1c6>
    1dce:	2c 81       	ldd	r18, Y+4	; 0x04
    1dd0:	3d 81       	ldd	r19, Y+5	; 0x05
    1dd2:	22 30       	cpi	r18, 0x02	; 2
    1dd4:	31 05       	cpc	r19, r1
    1dd6:	09 f4       	brne	.+2      	; 0x1dda <GPIO_writePin+0x5a>
    1dd8:	5f c0       	rjmp	.+190    	; 0x1e98 <GPIO_writePin+0x118>
    1dda:	8c 81       	ldd	r24, Y+4	; 0x04
    1ddc:	9d 81       	ldd	r25, Y+5	; 0x05
    1dde:	83 30       	cpi	r24, 0x03	; 3
    1de0:	91 05       	cpc	r25, r1
    1de2:	09 f4       	brne	.+2      	; 0x1de6 <GPIO_writePin+0x66>
    1de4:	85 c0       	rjmp	.+266    	; 0x1ef0 <GPIO_writePin+0x170>
    1de6:	af c0       	rjmp	.+350    	; 0x1f46 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
					if(value == LOGIC_HIGH)
    1de8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dea:	81 30       	cpi	r24, 0x01	; 1
    1dec:	a1 f4       	brne	.+40     	; 0x1e16 <GPIO_writePin+0x96>
					{
						SET_BIT(PORTA,pin_num);
    1dee:	ab e3       	ldi	r26, 0x3B	; 59
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	eb e3       	ldi	r30, 0x3B	; 59
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	48 2f       	mov	r20, r24
    1dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfc:	28 2f       	mov	r18, r24
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	02 2e       	mov	r0, r18
    1e06:	02 c0       	rjmp	.+4      	; 0x1e0c <GPIO_writePin+0x8c>
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	0a 94       	dec	r0
    1e0e:	e2 f7       	brpl	.-8      	; 0x1e08 <GPIO_writePin+0x88>
    1e10:	84 2b       	or	r24, r20
    1e12:	8c 93       	st	X, r24
    1e14:	98 c0       	rjmp	.+304    	; 0x1f46 <GPIO_writePin+0x1c6>
					}
					else
					{
						CLEAR_BIT(PORTA,pin_num);
    1e16:	ab e3       	ldi	r26, 0x3B	; 59
    1e18:	b0 e0       	ldi	r27, 0x00	; 0
    1e1a:	eb e3       	ldi	r30, 0x3B	; 59
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	80 81       	ld	r24, Z
    1e20:	48 2f       	mov	r20, r24
    1e22:	8a 81       	ldd	r24, Y+2	; 0x02
    1e24:	28 2f       	mov	r18, r24
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	02 2e       	mov	r0, r18
    1e2e:	02 c0       	rjmp	.+4      	; 0x1e34 <GPIO_writePin+0xb4>
    1e30:	88 0f       	add	r24, r24
    1e32:	99 1f       	adc	r25, r25
    1e34:	0a 94       	dec	r0
    1e36:	e2 f7       	brpl	.-8      	; 0x1e30 <GPIO_writePin+0xb0>
    1e38:	80 95       	com	r24
    1e3a:	84 23       	and	r24, r20
    1e3c:	8c 93       	st	X, r24
    1e3e:	83 c0       	rjmp	.+262    	; 0x1f46 <GPIO_writePin+0x1c6>
					}
					break;
		case PORTB_ID:
							if(value == LOGIC_HIGH)
    1e40:	8b 81       	ldd	r24, Y+3	; 0x03
    1e42:	81 30       	cpi	r24, 0x01	; 1
    1e44:	a1 f4       	brne	.+40     	; 0x1e6e <GPIO_writePin+0xee>
							{
								SET_BIT(PORTB,pin_num);
    1e46:	a8 e3       	ldi	r26, 0x38	; 56
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	e8 e3       	ldi	r30, 0x38	; 56
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	48 2f       	mov	r20, r24
    1e52:	8a 81       	ldd	r24, Y+2	; 0x02
    1e54:	28 2f       	mov	r18, r24
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	02 2e       	mov	r0, r18
    1e5e:	02 c0       	rjmp	.+4      	; 0x1e64 <GPIO_writePin+0xe4>
    1e60:	88 0f       	add	r24, r24
    1e62:	99 1f       	adc	r25, r25
    1e64:	0a 94       	dec	r0
    1e66:	e2 f7       	brpl	.-8      	; 0x1e60 <GPIO_writePin+0xe0>
    1e68:	84 2b       	or	r24, r20
    1e6a:	8c 93       	st	X, r24
    1e6c:	6c c0       	rjmp	.+216    	; 0x1f46 <GPIO_writePin+0x1c6>
							}
							else
							{
								CLEAR_BIT(PORTB,pin_num);
    1e6e:	a8 e3       	ldi	r26, 0x38	; 56
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	e8 e3       	ldi	r30, 0x38	; 56
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	80 81       	ld	r24, Z
    1e78:	48 2f       	mov	r20, r24
    1e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7c:	28 2f       	mov	r18, r24
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	02 2e       	mov	r0, r18
    1e86:	02 c0       	rjmp	.+4      	; 0x1e8c <GPIO_writePin+0x10c>
    1e88:	88 0f       	add	r24, r24
    1e8a:	99 1f       	adc	r25, r25
    1e8c:	0a 94       	dec	r0
    1e8e:	e2 f7       	brpl	.-8      	; 0x1e88 <GPIO_writePin+0x108>
    1e90:	80 95       	com	r24
    1e92:	84 23       	and	r24, r20
    1e94:	8c 93       	st	X, r24
    1e96:	57 c0       	rjmp	.+174    	; 0x1f46 <GPIO_writePin+0x1c6>
							}
							break;
		case PORTC_ID:
							if(value == LOGIC_HIGH)
    1e98:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9a:	81 30       	cpi	r24, 0x01	; 1
    1e9c:	a1 f4       	brne	.+40     	; 0x1ec6 <GPIO_writePin+0x146>
							{
								SET_BIT(PORTC,pin_num);
    1e9e:	a5 e3       	ldi	r26, 0x35	; 53
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	e5 e3       	ldi	r30, 0x35	; 53
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	48 2f       	mov	r20, r24
    1eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1eac:	28 2f       	mov	r18, r24
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	02 2e       	mov	r0, r18
    1eb6:	02 c0       	rjmp	.+4      	; 0x1ebc <GPIO_writePin+0x13c>
    1eb8:	88 0f       	add	r24, r24
    1eba:	99 1f       	adc	r25, r25
    1ebc:	0a 94       	dec	r0
    1ebe:	e2 f7       	brpl	.-8      	; 0x1eb8 <GPIO_writePin+0x138>
    1ec0:	84 2b       	or	r24, r20
    1ec2:	8c 93       	st	X, r24
    1ec4:	40 c0       	rjmp	.+128    	; 0x1f46 <GPIO_writePin+0x1c6>
							}
							else
							{
								CLEAR_BIT(PORTC,pin_num);
    1ec6:	a5 e3       	ldi	r26, 0x35	; 53
    1ec8:	b0 e0       	ldi	r27, 0x00	; 0
    1eca:	e5 e3       	ldi	r30, 0x35	; 53
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	48 2f       	mov	r20, r24
    1ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed4:	28 2f       	mov	r18, r24
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	02 2e       	mov	r0, r18
    1ede:	02 c0       	rjmp	.+4      	; 0x1ee4 <GPIO_writePin+0x164>
    1ee0:	88 0f       	add	r24, r24
    1ee2:	99 1f       	adc	r25, r25
    1ee4:	0a 94       	dec	r0
    1ee6:	e2 f7       	brpl	.-8      	; 0x1ee0 <GPIO_writePin+0x160>
    1ee8:	80 95       	com	r24
    1eea:	84 23       	and	r24, r20
    1eec:	8c 93       	st	X, r24
    1eee:	2b c0       	rjmp	.+86     	; 0x1f46 <GPIO_writePin+0x1c6>
							}
							break;
		case PORTD_ID:
							if(value == LOGIC_HIGH)
    1ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef2:	81 30       	cpi	r24, 0x01	; 1
    1ef4:	a1 f4       	brne	.+40     	; 0x1f1e <GPIO_writePin+0x19e>
							{
								SET_BIT(PORTD,pin_num);
    1ef6:	a2 e3       	ldi	r26, 0x32	; 50
    1ef8:	b0 e0       	ldi	r27, 0x00	; 0
    1efa:	e2 e3       	ldi	r30, 0x32	; 50
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 81       	ld	r24, Z
    1f00:	48 2f       	mov	r20, r24
    1f02:	8a 81       	ldd	r24, Y+2	; 0x02
    1f04:	28 2f       	mov	r18, r24
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	02 2e       	mov	r0, r18
    1f0e:	02 c0       	rjmp	.+4      	; 0x1f14 <GPIO_writePin+0x194>
    1f10:	88 0f       	add	r24, r24
    1f12:	99 1f       	adc	r25, r25
    1f14:	0a 94       	dec	r0
    1f16:	e2 f7       	brpl	.-8      	; 0x1f10 <GPIO_writePin+0x190>
    1f18:	84 2b       	or	r24, r20
    1f1a:	8c 93       	st	X, r24
    1f1c:	14 c0       	rjmp	.+40     	; 0x1f46 <GPIO_writePin+0x1c6>
							}
							else
							{
								CLEAR_BIT(PORTD,pin_num);
    1f1e:	a2 e3       	ldi	r26, 0x32	; 50
    1f20:	b0 e0       	ldi	r27, 0x00	; 0
    1f22:	e2 e3       	ldi	r30, 0x32	; 50
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	80 81       	ld	r24, Z
    1f28:	48 2f       	mov	r20, r24
    1f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2c:	28 2f       	mov	r18, r24
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	02 2e       	mov	r0, r18
    1f36:	02 c0       	rjmp	.+4      	; 0x1f3c <GPIO_writePin+0x1bc>
    1f38:	88 0f       	add	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	0a 94       	dec	r0
    1f3e:	e2 f7       	brpl	.-8      	; 0x1f38 <GPIO_writePin+0x1b8>
    1f40:	80 95       	com	r24
    1f42:	84 23       	and	r24, r20
    1f44:	8c 93       	st	X, r24
							}
							break;
		}
	}

}
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
    1f4c:	0f 90       	pop	r0
    1f4e:	0f 90       	pop	r0
    1f50:	cf 91       	pop	r28
    1f52:	df 91       	pop	r29
    1f54:	08 95       	ret

00001f56 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1f56:	df 93       	push	r29
    1f58:	cf 93       	push	r28
    1f5a:	00 d0       	rcall	.+0      	; 0x1f5c <GPIO_readPin+0x6>
    1f5c:	00 d0       	rcall	.+0      	; 0x1f5e <GPIO_readPin+0x8>
    1f5e:	00 d0       	rcall	.+0      	; 0x1f60 <GPIO_readPin+0xa>
    1f60:	cd b7       	in	r28, 0x3d	; 61
    1f62:	de b7       	in	r29, 0x3e	; 62
    1f64:	89 83       	std	Y+1, r24	; 0x01
    1f66:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1f68:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6a:	88 30       	cpi	r24, 0x08	; 8
    1f6c:	08 f0       	brcs	.+2      	; 0x1f70 <GPIO_readPin+0x1a>
    1f6e:	85 c0       	rjmp	.+266    	; 0x207a <GPIO_readPin+0x124>
    1f70:	89 81       	ldd	r24, Y+1	; 0x01
    1f72:	84 30       	cpi	r24, 0x04	; 4
    1f74:	08 f0       	brcs	.+2      	; 0x1f78 <GPIO_readPin+0x22>
    1f76:	81 c0       	rjmp	.+258    	; 0x207a <GPIO_readPin+0x124>
			/* Do Nothing */
		}
		else
		{
			/* Setup the pin direction as required */
			switch(port_num)
    1f78:	89 81       	ldd	r24, Y+1	; 0x01
    1f7a:	28 2f       	mov	r18, r24
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	3d 83       	std	Y+5, r19	; 0x05
    1f80:	2c 83       	std	Y+4, r18	; 0x04
    1f82:	4c 81       	ldd	r20, Y+4	; 0x04
    1f84:	5d 81       	ldd	r21, Y+5	; 0x05
    1f86:	41 30       	cpi	r20, 0x01	; 1
    1f88:	51 05       	cpc	r21, r1
    1f8a:	79 f1       	breq	.+94     	; 0x1fea <GPIO_readPin+0x94>
    1f8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f90:	82 30       	cpi	r24, 0x02	; 2
    1f92:	91 05       	cpc	r25, r1
    1f94:	34 f4       	brge	.+12     	; 0x1fa2 <GPIO_readPin+0x4c>
    1f96:	2c 81       	ldd	r18, Y+4	; 0x04
    1f98:	3d 81       	ldd	r19, Y+5	; 0x05
    1f9a:	21 15       	cp	r18, r1
    1f9c:	31 05       	cpc	r19, r1
    1f9e:	69 f0       	breq	.+26     	; 0x1fba <GPIO_readPin+0x64>
    1fa0:	6c c0       	rjmp	.+216    	; 0x207a <GPIO_readPin+0x124>
    1fa2:	4c 81       	ldd	r20, Y+4	; 0x04
    1fa4:	5d 81       	ldd	r21, Y+5	; 0x05
    1fa6:	42 30       	cpi	r20, 0x02	; 2
    1fa8:	51 05       	cpc	r21, r1
    1faa:	b9 f1       	breq	.+110    	; 0x201a <GPIO_readPin+0xc4>
    1fac:	8c 81       	ldd	r24, Y+4	; 0x04
    1fae:	9d 81       	ldd	r25, Y+5	; 0x05
    1fb0:	83 30       	cpi	r24, 0x03	; 3
    1fb2:	91 05       	cpc	r25, r1
    1fb4:	09 f4       	brne	.+2      	; 0x1fb8 <GPIO_readPin+0x62>
    1fb6:	49 c0       	rjmp	.+146    	; 0x204a <GPIO_readPin+0xf4>
    1fb8:	60 c0       	rjmp	.+192    	; 0x207a <GPIO_readPin+0x124>
			{
			case PORTA_ID:
				if( BIT_IS_SET(PINA,pin_num) )
    1fba:	e9 e3       	ldi	r30, 0x39	; 57
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	28 2f       	mov	r18, r24
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc6:	88 2f       	mov	r24, r24
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	a9 01       	movw	r20, r18
    1fcc:	02 c0       	rjmp	.+4      	; 0x1fd2 <GPIO_readPin+0x7c>
    1fce:	55 95       	asr	r21
    1fd0:	47 95       	ror	r20
    1fd2:	8a 95       	dec	r24
    1fd4:	e2 f7       	brpl	.-8      	; 0x1fce <GPIO_readPin+0x78>
    1fd6:	ca 01       	movw	r24, r20
    1fd8:	81 70       	andi	r24, 0x01	; 1
    1fda:	90 70       	andi	r25, 0x00	; 0
    1fdc:	88 23       	and	r24, r24
    1fde:	19 f0       	breq	.+6      	; 0x1fe6 <GPIO_readPin+0x90>
				{
					return LOGIC_HIGH ;
    1fe0:	51 e0       	ldi	r21, 0x01	; 1
    1fe2:	5b 83       	std	Y+3, r21	; 0x03
    1fe4:	4b c0       	rjmp	.+150    	; 0x207c <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW ;
    1fe6:	1b 82       	std	Y+3, r1	; 0x03
    1fe8:	49 c0       	rjmp	.+146    	; 0x207c <GPIO_readPin+0x126>
				}
				break;
			case PORTB_ID:
				if( BIT_IS_SET(PINB,pin_num) )
    1fea:	e6 e3       	ldi	r30, 0x36	; 54
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	80 81       	ld	r24, Z
    1ff0:	28 2f       	mov	r18, r24
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff6:	88 2f       	mov	r24, r24
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	a9 01       	movw	r20, r18
    1ffc:	02 c0       	rjmp	.+4      	; 0x2002 <GPIO_readPin+0xac>
    1ffe:	55 95       	asr	r21
    2000:	47 95       	ror	r20
    2002:	8a 95       	dec	r24
    2004:	e2 f7       	brpl	.-8      	; 0x1ffe <GPIO_readPin+0xa8>
    2006:	ca 01       	movw	r24, r20
    2008:	81 70       	andi	r24, 0x01	; 1
    200a:	90 70       	andi	r25, 0x00	; 0
    200c:	88 23       	and	r24, r24
    200e:	19 f0       	breq	.+6      	; 0x2016 <GPIO_readPin+0xc0>
				{
					return LOGIC_HIGH ;
    2010:	51 e0       	ldi	r21, 0x01	; 1
    2012:	5b 83       	std	Y+3, r21	; 0x03
    2014:	33 c0       	rjmp	.+102    	; 0x207c <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW ;
    2016:	1b 82       	std	Y+3, r1	; 0x03
    2018:	31 c0       	rjmp	.+98     	; 0x207c <GPIO_readPin+0x126>
				}
				break;
			case PORTC_ID:
				if( BIT_IS_SET(PINC,pin_num) )
    201a:	e3 e3       	ldi	r30, 0x33	; 51
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	80 81       	ld	r24, Z
    2020:	28 2f       	mov	r18, r24
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	8a 81       	ldd	r24, Y+2	; 0x02
    2026:	88 2f       	mov	r24, r24
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	a9 01       	movw	r20, r18
    202c:	02 c0       	rjmp	.+4      	; 0x2032 <GPIO_readPin+0xdc>
    202e:	55 95       	asr	r21
    2030:	47 95       	ror	r20
    2032:	8a 95       	dec	r24
    2034:	e2 f7       	brpl	.-8      	; 0x202e <GPIO_readPin+0xd8>
    2036:	ca 01       	movw	r24, r20
    2038:	81 70       	andi	r24, 0x01	; 1
    203a:	90 70       	andi	r25, 0x00	; 0
    203c:	88 23       	and	r24, r24
    203e:	19 f0       	breq	.+6      	; 0x2046 <GPIO_readPin+0xf0>
				{
					return LOGIC_HIGH ;
    2040:	51 e0       	ldi	r21, 0x01	; 1
    2042:	5b 83       	std	Y+3, r21	; 0x03
    2044:	1b c0       	rjmp	.+54     	; 0x207c <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW ;
    2046:	1b 82       	std	Y+3, r1	; 0x03
    2048:	19 c0       	rjmp	.+50     	; 0x207c <GPIO_readPin+0x126>
				}
				break;
			case PORTD_ID:
				if( BIT_IS_SET(PIND,pin_num) )
    204a:	e0 e3       	ldi	r30, 0x30	; 48
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	28 2f       	mov	r18, r24
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	8a 81       	ldd	r24, Y+2	; 0x02
    2056:	88 2f       	mov	r24, r24
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	a9 01       	movw	r20, r18
    205c:	02 c0       	rjmp	.+4      	; 0x2062 <GPIO_readPin+0x10c>
    205e:	55 95       	asr	r21
    2060:	47 95       	ror	r20
    2062:	8a 95       	dec	r24
    2064:	e2 f7       	brpl	.-8      	; 0x205e <GPIO_readPin+0x108>
    2066:	ca 01       	movw	r24, r20
    2068:	81 70       	andi	r24, 0x01	; 1
    206a:	90 70       	andi	r25, 0x00	; 0
    206c:	88 23       	and	r24, r24
    206e:	19 f0       	breq	.+6      	; 0x2076 <GPIO_readPin+0x120>
				{
					return LOGIC_HIGH ;
    2070:	51 e0       	ldi	r21, 0x01	; 1
    2072:	5b 83       	std	Y+3, r21	; 0x03
    2074:	03 c0       	rjmp	.+6      	; 0x207c <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW ;
    2076:	1b 82       	std	Y+3, r1	; 0x03
    2078:	01 c0       	rjmp	.+2      	; 0x207c <GPIO_readPin+0x126>
    207a:	02 c0       	rjmp	.+4      	; 0x2080 <GPIO_readPin+0x12a>
				}
				break;
			}
		}

}
    207c:	8b 81       	ldd	r24, Y+3	; 0x03
    207e:	8e 83       	std	Y+6, r24	; 0x06
    2080:	8e 81       	ldd	r24, Y+6	; 0x06
    2082:	26 96       	adiw	r28, 0x06	; 6
    2084:	0f b6       	in	r0, 0x3f	; 63
    2086:	f8 94       	cli
    2088:	de bf       	out	0x3e, r29	; 62
    208a:	0f be       	out	0x3f, r0	; 63
    208c:	cd bf       	out	0x3d, r28	; 61
    208e:	cf 91       	pop	r28
    2090:	df 91       	pop	r29
    2092:	08 95       	ret

00002094 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2094:	df 93       	push	r29
    2096:	cf 93       	push	r28
    2098:	00 d0       	rcall	.+0      	; 0x209a <GPIO_setupPortDirection+0x6>
    209a:	00 d0       	rcall	.+0      	; 0x209c <GPIO_setupPortDirection+0x8>
    209c:	cd b7       	in	r28, 0x3d	; 61
    209e:	de b7       	in	r29, 0x3e	; 62
    20a0:	89 83       	std	Y+1, r24	; 0x01
    20a2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    20a4:	89 81       	ldd	r24, Y+1	; 0x01
    20a6:	84 30       	cpi	r24, 0x04	; 4
    20a8:	90 f5       	brcc	.+100    	; 0x210e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    20aa:	89 81       	ldd	r24, Y+1	; 0x01
    20ac:	28 2f       	mov	r18, r24
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	3c 83       	std	Y+4, r19	; 0x04
    20b2:	2b 83       	std	Y+3, r18	; 0x03
    20b4:	8b 81       	ldd	r24, Y+3	; 0x03
    20b6:	9c 81       	ldd	r25, Y+4	; 0x04
    20b8:	81 30       	cpi	r24, 0x01	; 1
    20ba:	91 05       	cpc	r25, r1
    20bc:	d1 f0       	breq	.+52     	; 0x20f2 <GPIO_setupPortDirection+0x5e>
    20be:	2b 81       	ldd	r18, Y+3	; 0x03
    20c0:	3c 81       	ldd	r19, Y+4	; 0x04
    20c2:	22 30       	cpi	r18, 0x02	; 2
    20c4:	31 05       	cpc	r19, r1
    20c6:	2c f4       	brge	.+10     	; 0x20d2 <GPIO_setupPortDirection+0x3e>
    20c8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ca:	9c 81       	ldd	r25, Y+4	; 0x04
    20cc:	00 97       	sbiw	r24, 0x00	; 0
    20ce:	61 f0       	breq	.+24     	; 0x20e8 <GPIO_setupPortDirection+0x54>
    20d0:	1e c0       	rjmp	.+60     	; 0x210e <GPIO_setupPortDirection+0x7a>
    20d2:	2b 81       	ldd	r18, Y+3	; 0x03
    20d4:	3c 81       	ldd	r19, Y+4	; 0x04
    20d6:	22 30       	cpi	r18, 0x02	; 2
    20d8:	31 05       	cpc	r19, r1
    20da:	81 f0       	breq	.+32     	; 0x20fc <GPIO_setupPortDirection+0x68>
    20dc:	8b 81       	ldd	r24, Y+3	; 0x03
    20de:	9c 81       	ldd	r25, Y+4	; 0x04
    20e0:	83 30       	cpi	r24, 0x03	; 3
    20e2:	91 05       	cpc	r25, r1
    20e4:	81 f0       	breq	.+32     	; 0x2106 <GPIO_setupPortDirection+0x72>
    20e6:	13 c0       	rjmp	.+38     	; 0x210e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    20e8:	ea e3       	ldi	r30, 0x3A	; 58
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	8a 81       	ldd	r24, Y+2	; 0x02
    20ee:	80 83       	st	Z, r24
    20f0:	0e c0       	rjmp	.+28     	; 0x210e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    20f2:	e7 e3       	ldi	r30, 0x37	; 55
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	8a 81       	ldd	r24, Y+2	; 0x02
    20f8:	80 83       	st	Z, r24
    20fa:	09 c0       	rjmp	.+18     	; 0x210e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    20fc:	e4 e3       	ldi	r30, 0x34	; 52
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	8a 81       	ldd	r24, Y+2	; 0x02
    2102:	80 83       	st	Z, r24
    2104:	04 c0       	rjmp	.+8      	; 0x210e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2106:	e1 e3       	ldi	r30, 0x31	; 49
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	8a 81       	ldd	r24, Y+2	; 0x02
    210c:	80 83       	st	Z, r24
			break;
		}
	}
}
    210e:	0f 90       	pop	r0
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	cf 91       	pop	r28
    2118:	df 91       	pop	r29
    211a:	08 95       	ret

0000211c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    211c:	df 93       	push	r29
    211e:	cf 93       	push	r28
    2120:	00 d0       	rcall	.+0      	; 0x2122 <GPIO_writePort+0x6>
    2122:	00 d0       	rcall	.+0      	; 0x2124 <GPIO_writePort+0x8>
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
    2128:	89 83       	std	Y+1, r24	; 0x01
    212a:	6a 83       	std	Y+2, r22	; 0x02
	if(( port_num >= NUM_OF_PORTS) )
    212c:	89 81       	ldd	r24, Y+1	; 0x01
    212e:	84 30       	cpi	r24, 0x04	; 4
    2130:	90 f5       	brcc	.+100    	; 0x2196 <GPIO_writePort+0x7a>
		{
		}

		else
		{
			switch(port_num)
    2132:	89 81       	ldd	r24, Y+1	; 0x01
    2134:	28 2f       	mov	r18, r24
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	3c 83       	std	Y+4, r19	; 0x04
    213a:	2b 83       	std	Y+3, r18	; 0x03
    213c:	8b 81       	ldd	r24, Y+3	; 0x03
    213e:	9c 81       	ldd	r25, Y+4	; 0x04
    2140:	81 30       	cpi	r24, 0x01	; 1
    2142:	91 05       	cpc	r25, r1
    2144:	d1 f0       	breq	.+52     	; 0x217a <GPIO_writePort+0x5e>
    2146:	2b 81       	ldd	r18, Y+3	; 0x03
    2148:	3c 81       	ldd	r19, Y+4	; 0x04
    214a:	22 30       	cpi	r18, 0x02	; 2
    214c:	31 05       	cpc	r19, r1
    214e:	2c f4       	brge	.+10     	; 0x215a <GPIO_writePort+0x3e>
    2150:	8b 81       	ldd	r24, Y+3	; 0x03
    2152:	9c 81       	ldd	r25, Y+4	; 0x04
    2154:	00 97       	sbiw	r24, 0x00	; 0
    2156:	61 f0       	breq	.+24     	; 0x2170 <GPIO_writePort+0x54>
    2158:	1e c0       	rjmp	.+60     	; 0x2196 <GPIO_writePort+0x7a>
    215a:	2b 81       	ldd	r18, Y+3	; 0x03
    215c:	3c 81       	ldd	r19, Y+4	; 0x04
    215e:	22 30       	cpi	r18, 0x02	; 2
    2160:	31 05       	cpc	r19, r1
    2162:	81 f0       	breq	.+32     	; 0x2184 <GPIO_writePort+0x68>
    2164:	8b 81       	ldd	r24, Y+3	; 0x03
    2166:	9c 81       	ldd	r25, Y+4	; 0x04
    2168:	83 30       	cpi	r24, 0x03	; 3
    216a:	91 05       	cpc	r25, r1
    216c:	81 f0       	breq	.+32     	; 0x218e <GPIO_writePort+0x72>
    216e:	13 c0       	rjmp	.+38     	; 0x2196 <GPIO_writePort+0x7a>
			{
			case PORTA_ID:
								PORTA =value;
    2170:	eb e3       	ldi	r30, 0x3B	; 59
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	8a 81       	ldd	r24, Y+2	; 0x02
    2176:	80 83       	st	Z, r24
    2178:	0e c0       	rjmp	.+28     	; 0x2196 <GPIO_writePort+0x7a>
								break;
			case PORTB_ID:
								PORTB=value;
    217a:	e8 e3       	ldi	r30, 0x38	; 56
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	8a 81       	ldd	r24, Y+2	; 0x02
    2180:	80 83       	st	Z, r24
    2182:	09 c0       	rjmp	.+18     	; 0x2196 <GPIO_writePort+0x7a>
								break;
			case PORTC_ID:
								PORTC=value;
    2184:	e5 e3       	ldi	r30, 0x35	; 53
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	8a 81       	ldd	r24, Y+2	; 0x02
    218a:	80 83       	st	Z, r24
    218c:	04 c0       	rjmp	.+8      	; 0x2196 <GPIO_writePort+0x7a>
								break;
			case PORTD_ID:
								PORTD=value;
    218e:	e2 e3       	ldi	r30, 0x32	; 50
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	8a 81       	ldd	r24, Y+2	; 0x02
    2194:	80 83       	st	Z, r24
								break;
			}
		}
}
    2196:	0f 90       	pop	r0
    2198:	0f 90       	pop	r0
    219a:	0f 90       	pop	r0
    219c:	0f 90       	pop	r0
    219e:	cf 91       	pop	r28
    21a0:	df 91       	pop	r29
    21a2:	08 95       	ret

000021a4 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    21a4:	df 93       	push	r29
    21a6:	cf 93       	push	r28
    21a8:	00 d0       	rcall	.+0      	; 0x21aa <GPIO_readPort+0x6>
    21aa:	00 d0       	rcall	.+0      	; 0x21ac <GPIO_readPort+0x8>
    21ac:	0f 92       	push	r0
    21ae:	cd b7       	in	r28, 0x3d	; 61
    21b0:	de b7       	in	r29, 0x3e	; 62
    21b2:	89 83       	std	Y+1, r24	; 0x01

	if(( port_num >= NUM_OF_PORTS) )
    21b4:	89 81       	ldd	r24, Y+1	; 0x01
    21b6:	84 30       	cpi	r24, 0x04	; 4
    21b8:	98 f5       	brcc	.+102    	; 0x2220 <GPIO_readPort+0x7c>
		{
		}

		else
		{
			switch(port_num)
    21ba:	89 81       	ldd	r24, Y+1	; 0x01
    21bc:	28 2f       	mov	r18, r24
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	3c 83       	std	Y+4, r19	; 0x04
    21c2:	2b 83       	std	Y+3, r18	; 0x03
    21c4:	8b 81       	ldd	r24, Y+3	; 0x03
    21c6:	9c 81       	ldd	r25, Y+4	; 0x04
    21c8:	81 30       	cpi	r24, 0x01	; 1
    21ca:	91 05       	cpc	r25, r1
    21cc:	d1 f0       	breq	.+52     	; 0x2202 <GPIO_readPort+0x5e>
    21ce:	2b 81       	ldd	r18, Y+3	; 0x03
    21d0:	3c 81       	ldd	r19, Y+4	; 0x04
    21d2:	22 30       	cpi	r18, 0x02	; 2
    21d4:	31 05       	cpc	r19, r1
    21d6:	2c f4       	brge	.+10     	; 0x21e2 <GPIO_readPort+0x3e>
    21d8:	8b 81       	ldd	r24, Y+3	; 0x03
    21da:	9c 81       	ldd	r25, Y+4	; 0x04
    21dc:	00 97       	sbiw	r24, 0x00	; 0
    21de:	61 f0       	breq	.+24     	; 0x21f8 <GPIO_readPort+0x54>
    21e0:	1f c0       	rjmp	.+62     	; 0x2220 <GPIO_readPort+0x7c>
    21e2:	2b 81       	ldd	r18, Y+3	; 0x03
    21e4:	3c 81       	ldd	r19, Y+4	; 0x04
    21e6:	22 30       	cpi	r18, 0x02	; 2
    21e8:	31 05       	cpc	r19, r1
    21ea:	81 f0       	breq	.+32     	; 0x220c <GPIO_readPort+0x68>
    21ec:	8b 81       	ldd	r24, Y+3	; 0x03
    21ee:	9c 81       	ldd	r25, Y+4	; 0x04
    21f0:	83 30       	cpi	r24, 0x03	; 3
    21f2:	91 05       	cpc	r25, r1
    21f4:	81 f0       	breq	.+32     	; 0x2216 <GPIO_readPort+0x72>
    21f6:	14 c0       	rjmp	.+40     	; 0x2220 <GPIO_readPort+0x7c>
			{
			case PORTA_ID:
						return (PINA & 0xFF);
    21f8:	e9 e3       	ldi	r30, 0x39	; 57
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	90 81       	ld	r25, Z
    21fe:	9a 83       	std	Y+2, r25	; 0x02
    2200:	10 c0       	rjmp	.+32     	; 0x2222 <GPIO_readPort+0x7e>
						break;
			case PORTB_ID:
						return (PINB & 0xFF);
    2202:	e6 e3       	ldi	r30, 0x36	; 54
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	20 81       	ld	r18, Z
    2208:	2a 83       	std	Y+2, r18	; 0x02
    220a:	0b c0       	rjmp	.+22     	; 0x2222 <GPIO_readPort+0x7e>
								break;
			case PORTC_ID:
						return (PINC & 0xFF);
    220c:	e3 e3       	ldi	r30, 0x33	; 51
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	30 81       	ld	r19, Z
    2212:	3a 83       	std	Y+2, r19	; 0x02
    2214:	06 c0       	rjmp	.+12     	; 0x2222 <GPIO_readPort+0x7e>

								break;
			case PORTD_ID:
						return (PIND & 0xFF);
    2216:	e0 e3       	ldi	r30, 0x30	; 48
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	8a 83       	std	Y+2, r24	; 0x02
    221e:	01 c0       	rjmp	.+2      	; 0x2222 <GPIO_readPort+0x7e>
    2220:	02 c0       	rjmp	.+4      	; 0x2226 <GPIO_readPort+0x82>

								break;
			}
		}
}
    2222:	9a 81       	ldd	r25, Y+2	; 0x02
    2224:	9d 83       	std	Y+5, r25	; 0x05
    2226:	8d 81       	ldd	r24, Y+5	; 0x05
    2228:	0f 90       	pop	r0
    222a:	0f 90       	pop	r0
    222c:	0f 90       	pop	r0
    222e:	0f 90       	pop	r0
    2230:	0f 90       	pop	r0
    2232:	cf 91       	pop	r28
    2234:	df 91       	pop	r29
    2236:	08 95       	ret

00002238 <__udivmodsi4>:
    2238:	a1 e2       	ldi	r26, 0x21	; 33
    223a:	1a 2e       	mov	r1, r26
    223c:	aa 1b       	sub	r26, r26
    223e:	bb 1b       	sub	r27, r27
    2240:	fd 01       	movw	r30, r26
    2242:	0d c0       	rjmp	.+26     	; 0x225e <__udivmodsi4_ep>

00002244 <__udivmodsi4_loop>:
    2244:	aa 1f       	adc	r26, r26
    2246:	bb 1f       	adc	r27, r27
    2248:	ee 1f       	adc	r30, r30
    224a:	ff 1f       	adc	r31, r31
    224c:	a2 17       	cp	r26, r18
    224e:	b3 07       	cpc	r27, r19
    2250:	e4 07       	cpc	r30, r20
    2252:	f5 07       	cpc	r31, r21
    2254:	20 f0       	brcs	.+8      	; 0x225e <__udivmodsi4_ep>
    2256:	a2 1b       	sub	r26, r18
    2258:	b3 0b       	sbc	r27, r19
    225a:	e4 0b       	sbc	r30, r20
    225c:	f5 0b       	sbc	r31, r21

0000225e <__udivmodsi4_ep>:
    225e:	66 1f       	adc	r22, r22
    2260:	77 1f       	adc	r23, r23
    2262:	88 1f       	adc	r24, r24
    2264:	99 1f       	adc	r25, r25
    2266:	1a 94       	dec	r1
    2268:	69 f7       	brne	.-38     	; 0x2244 <__udivmodsi4_loop>
    226a:	60 95       	com	r22
    226c:	70 95       	com	r23
    226e:	80 95       	com	r24
    2270:	90 95       	com	r25
    2272:	9b 01       	movw	r18, r22
    2274:	ac 01       	movw	r20, r24
    2276:	bd 01       	movw	r22, r26
    2278:	cf 01       	movw	r24, r30
    227a:	08 95       	ret

0000227c <__prologue_saves__>:
    227c:	2f 92       	push	r2
    227e:	3f 92       	push	r3
    2280:	4f 92       	push	r4
    2282:	5f 92       	push	r5
    2284:	6f 92       	push	r6
    2286:	7f 92       	push	r7
    2288:	8f 92       	push	r8
    228a:	9f 92       	push	r9
    228c:	af 92       	push	r10
    228e:	bf 92       	push	r11
    2290:	cf 92       	push	r12
    2292:	df 92       	push	r13
    2294:	ef 92       	push	r14
    2296:	ff 92       	push	r15
    2298:	0f 93       	push	r16
    229a:	1f 93       	push	r17
    229c:	cf 93       	push	r28
    229e:	df 93       	push	r29
    22a0:	cd b7       	in	r28, 0x3d	; 61
    22a2:	de b7       	in	r29, 0x3e	; 62
    22a4:	ca 1b       	sub	r28, r26
    22a6:	db 0b       	sbc	r29, r27
    22a8:	0f b6       	in	r0, 0x3f	; 63
    22aa:	f8 94       	cli
    22ac:	de bf       	out	0x3e, r29	; 62
    22ae:	0f be       	out	0x3f, r0	; 63
    22b0:	cd bf       	out	0x3d, r28	; 61
    22b2:	09 94       	ijmp

000022b4 <__epilogue_restores__>:
    22b4:	2a 88       	ldd	r2, Y+18	; 0x12
    22b6:	39 88       	ldd	r3, Y+17	; 0x11
    22b8:	48 88       	ldd	r4, Y+16	; 0x10
    22ba:	5f 84       	ldd	r5, Y+15	; 0x0f
    22bc:	6e 84       	ldd	r6, Y+14	; 0x0e
    22be:	7d 84       	ldd	r7, Y+13	; 0x0d
    22c0:	8c 84       	ldd	r8, Y+12	; 0x0c
    22c2:	9b 84       	ldd	r9, Y+11	; 0x0b
    22c4:	aa 84       	ldd	r10, Y+10	; 0x0a
    22c6:	b9 84       	ldd	r11, Y+9	; 0x09
    22c8:	c8 84       	ldd	r12, Y+8	; 0x08
    22ca:	df 80       	ldd	r13, Y+7	; 0x07
    22cc:	ee 80       	ldd	r14, Y+6	; 0x06
    22ce:	fd 80       	ldd	r15, Y+5	; 0x05
    22d0:	0c 81       	ldd	r16, Y+4	; 0x04
    22d2:	1b 81       	ldd	r17, Y+3	; 0x03
    22d4:	aa 81       	ldd	r26, Y+2	; 0x02
    22d6:	b9 81       	ldd	r27, Y+1	; 0x01
    22d8:	ce 0f       	add	r28, r30
    22da:	d1 1d       	adc	r29, r1
    22dc:	0f b6       	in	r0, 0x3f	; 63
    22de:	f8 94       	cli
    22e0:	de bf       	out	0x3e, r29	; 62
    22e2:	0f be       	out	0x3f, r0	; 63
    22e4:	cd bf       	out	0x3d, r28	; 61
    22e6:	ed 01       	movw	r28, r26
    22e8:	08 95       	ret

000022ea <_exit>:
    22ea:	f8 94       	cli

000022ec <__stop_program>:
    22ec:	ff cf       	rjmp	.-2      	; 0x22ec <__stop_program>
